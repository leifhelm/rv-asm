pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __u_char = u8;
pub const __u_short = c_ushort;
pub const __u_int = c_uint;
pub const __u_long = c_ulong;
pub const __int8_t = i8;
pub const __uint8_t = u8;
pub const __int16_t = c_short;
pub const __uint16_t = c_ushort;
pub const __int32_t = c_int;
pub const __uint32_t = c_uint;
pub const __int64_t = c_long;
pub const __uint64_t = c_ulong;
pub const __int_least8_t = __int8_t;
pub const __uint_least8_t = __uint8_t;
pub const __int_least16_t = __int16_t;
pub const __uint_least16_t = __uint16_t;
pub const __int_least32_t = __int32_t;
pub const __uint_least32_t = __uint32_t;
pub const __int_least64_t = __int64_t;
pub const __uint_least64_t = __uint64_t;
pub const __quad_t = c_long;
pub const __u_quad_t = c_ulong;
pub const __intmax_t = c_long;
pub const __uintmax_t = c_ulong;
pub const __dev_t = c_ulong;
pub const __uid_t = c_uint;
pub const __gid_t = c_uint;
pub const __ino_t = c_ulong;
pub const __ino64_t = c_ulong;
pub const __mode_t = c_uint;
pub const __nlink_t = c_ulong;
pub const __off_t = c_long;
pub const __off64_t = c_long;
pub const __pid_t = c_int;
pub const __fsid_t = extern struct {
    __val: [2]c_int,
};
pub const __clock_t = c_long;
pub const __rlim_t = c_ulong;
pub const __rlim64_t = c_ulong;
pub const __id_t = c_uint;
pub const __time_t = c_long;
pub const __useconds_t = c_uint;
pub const __suseconds_t = c_long;
pub const __suseconds64_t = c_long;
pub const __daddr_t = c_int;
pub const __key_t = c_int;
pub const __clockid_t = c_int;
pub const __timer_t = ?*anyopaque;
pub const __blksize_t = c_long;
pub const __blkcnt_t = c_long;
pub const __blkcnt64_t = c_long;
pub const __fsblkcnt_t = c_ulong;
pub const __fsblkcnt64_t = c_ulong;
pub const __fsfilcnt_t = c_ulong;
pub const __fsfilcnt64_t = c_ulong;
pub const __fsword_t = c_long;
pub const __ssize_t = c_long;
pub const __syscall_slong_t = c_long;
pub const __syscall_ulong_t = c_ulong;
pub const __loff_t = __off64_t;
pub const __caddr_t = [*c]u8;
pub const __intptr_t = c_long;
pub const __socklen_t = c_uint;
pub const __sig_atomic_t = c_int;
pub const int_least8_t = __int_least8_t;
pub const int_least16_t = __int_least16_t;
pub const int_least32_t = __int_least32_t;
pub const int_least64_t = __int_least64_t;
pub const uint_least8_t = __uint_least8_t;
pub const uint_least16_t = __uint_least16_t;
pub const uint_least32_t = __uint_least32_t;
pub const uint_least64_t = __uint_least64_t;
pub const int_fast8_t = i8;
pub const int_fast16_t = c_long;
pub const int_fast32_t = c_long;
pub const int_fast64_t = c_long;
pub const uint_fast8_t = u8;
pub const uint_fast16_t = c_ulong;
pub const uint_fast32_t = c_ulong;
pub const uint_fast64_t = c_ulong;
pub const intmax_t = __intmax_t;
pub const uintmax_t = __uintmax_t;
pub const Elf32_Half = u16;
pub const Elf64_Half = u16;
pub const Elf32_Word = u32;
pub const Elf32_Sword = i32;
pub const Elf64_Word = u32;
pub const Elf64_Sword = i32;
pub const Elf32_Xword = u64;
pub const Elf32_Sxword = i64;
pub const Elf64_Xword = u64;
pub const Elf64_Sxword = i64;
pub const Elf32_Addr = u32;
pub const Elf64_Addr = u64;
pub const Elf32_Off = u32;
pub const Elf64_Off = u64;
pub const Elf32_Section = u16;
pub const Elf64_Section = u16;
pub const Elf32_Versym = Elf32_Half;
pub const Elf64_Versym = Elf64_Half;
pub const Elf32_Ehdr = extern struct {
    e_ident: [16]u8,
    e_type: Elf32_Half,
    e_machine: Elf32_Half,
    e_version: Elf32_Word,
    e_entry: Elf32_Addr,
    e_phoff: Elf32_Off,
    e_shoff: Elf32_Off,
    e_flags: Elf32_Word,
    e_ehsize: Elf32_Half,
    e_phentsize: Elf32_Half,
    e_phnum: Elf32_Half,
    e_shentsize: Elf32_Half,
    e_shnum: Elf32_Half,
    e_shstrndx: Elf32_Half,
};
pub const Elf64_Ehdr = extern struct {
    e_ident: [16]u8,
    e_type: Elf64_Half,
    e_machine: Elf64_Half,
    e_version: Elf64_Word,
    e_entry: Elf64_Addr,
    e_phoff: Elf64_Off,
    e_shoff: Elf64_Off,
    e_flags: Elf64_Word,
    e_ehsize: Elf64_Half,
    e_phentsize: Elf64_Half,
    e_phnum: Elf64_Half,
    e_shentsize: Elf64_Half,
    e_shnum: Elf64_Half,
    e_shstrndx: Elf64_Half,
};
pub const Elf32_Shdr = extern struct {
    sh_name: Elf32_Word,
    sh_type: Elf32_Word,
    sh_flags: Elf32_Word,
    sh_addr: Elf32_Addr,
    sh_offset: Elf32_Off,
    sh_size: Elf32_Word,
    sh_link: Elf32_Word,
    sh_info: Elf32_Word,
    sh_addralign: Elf32_Word,
    sh_entsize: Elf32_Word,
};
pub const Elf64_Shdr = extern struct {
    sh_name: Elf64_Word,
    sh_type: Elf64_Word,
    sh_flags: Elf64_Xword,
    sh_addr: Elf64_Addr,
    sh_offset: Elf64_Off,
    sh_size: Elf64_Xword,
    sh_link: Elf64_Word,
    sh_info: Elf64_Word,
    sh_addralign: Elf64_Xword,
    sh_entsize: Elf64_Xword,
};
pub const Elf32_Chdr = extern struct {
    ch_type: Elf32_Word,
    ch_size: Elf32_Word,
    ch_addralign: Elf32_Word,
};
pub const Elf64_Chdr = extern struct {
    ch_type: Elf64_Word,
    ch_reserved: Elf64_Word,
    ch_size: Elf64_Xword,
    ch_addralign: Elf64_Xword,
};
pub const Elf32_Sym = extern struct {
    st_name: Elf32_Word,
    st_value: Elf32_Addr,
    st_size: Elf32_Word,
    st_info: u8,
    st_other: u8,
    st_shndx: Elf32_Section,
};
pub const Elf64_Sym = extern struct {
    st_name: Elf64_Word,
    st_info: u8,
    st_other: u8,
    st_shndx: Elf64_Section,
    st_value: Elf64_Addr,
    st_size: Elf64_Xword,
};
pub const Elf32_Syminfo = extern struct {
    si_boundto: Elf32_Half,
    si_flags: Elf32_Half,
};
pub const Elf64_Syminfo = extern struct {
    si_boundto: Elf64_Half,
    si_flags: Elf64_Half,
};
pub const Elf32_Rel = extern struct {
    r_offset: Elf32_Addr,
    r_info: Elf32_Word,
};
pub const Elf64_Rel = extern struct {
    r_offset: Elf64_Addr,
    r_info: Elf64_Xword,
};
pub const Elf32_Rela = extern struct {
    r_offset: Elf32_Addr,
    r_info: Elf32_Word,
    r_addend: Elf32_Sword,
};
pub const Elf64_Rela = extern struct {
    r_offset: Elf64_Addr,
    r_info: Elf64_Xword,
    r_addend: Elf64_Sxword,
};
pub const Elf32_Phdr = extern struct {
    p_type: Elf32_Word,
    p_offset: Elf32_Off,
    p_vaddr: Elf32_Addr,
    p_paddr: Elf32_Addr,
    p_filesz: Elf32_Word,
    p_memsz: Elf32_Word,
    p_flags: Elf32_Word,
    p_align: Elf32_Word,
};
pub const Elf64_Phdr = extern struct {
    p_type: Elf64_Word,
    p_flags: Elf64_Word,
    p_offset: Elf64_Off,
    p_vaddr: Elf64_Addr,
    p_paddr: Elf64_Addr,
    p_filesz: Elf64_Xword,
    p_memsz: Elf64_Xword,
    p_align: Elf64_Xword,
};
const union_unnamed_1 = extern union {
    d_val: Elf32_Word,
    d_ptr: Elf32_Addr,
};
pub const Elf32_Dyn = extern struct {
    d_tag: Elf32_Sword,
    d_un: union_unnamed_1,
};
const union_unnamed_2 = extern union {
    d_val: Elf64_Xword,
    d_ptr: Elf64_Addr,
};
pub const Elf64_Dyn = extern struct {
    d_tag: Elf64_Sxword,
    d_un: union_unnamed_2,
};
pub const Elf32_Verdef = extern struct {
    vd_version: Elf32_Half,
    vd_flags: Elf32_Half,
    vd_ndx: Elf32_Half,
    vd_cnt: Elf32_Half,
    vd_hash: Elf32_Word,
    vd_aux: Elf32_Word,
    vd_next: Elf32_Word,
};
pub const Elf64_Verdef = extern struct {
    vd_version: Elf64_Half,
    vd_flags: Elf64_Half,
    vd_ndx: Elf64_Half,
    vd_cnt: Elf64_Half,
    vd_hash: Elf64_Word,
    vd_aux: Elf64_Word,
    vd_next: Elf64_Word,
};
pub const Elf32_Verdaux = extern struct {
    vda_name: Elf32_Word,
    vda_next: Elf32_Word,
};
pub const Elf64_Verdaux = extern struct {
    vda_name: Elf64_Word,
    vda_next: Elf64_Word,
};
pub const Elf32_Verneed = extern struct {
    vn_version: Elf32_Half,
    vn_cnt: Elf32_Half,
    vn_file: Elf32_Word,
    vn_aux: Elf32_Word,
    vn_next: Elf32_Word,
};
pub const Elf64_Verneed = extern struct {
    vn_version: Elf64_Half,
    vn_cnt: Elf64_Half,
    vn_file: Elf64_Word,
    vn_aux: Elf64_Word,
    vn_next: Elf64_Word,
};
pub const Elf32_Vernaux = extern struct {
    vna_hash: Elf32_Word,
    vna_flags: Elf32_Half,
    vna_other: Elf32_Half,
    vna_name: Elf32_Word,
    vna_next: Elf32_Word,
};
pub const Elf64_Vernaux = extern struct {
    vna_hash: Elf64_Word,
    vna_flags: Elf64_Half,
    vna_other: Elf64_Half,
    vna_name: Elf64_Word,
    vna_next: Elf64_Word,
};
const union_unnamed_3 = extern union {
    a_val: u32,
};
pub const Elf32_auxv_t = extern struct {
    a_type: u32,
    a_un: union_unnamed_3,
};
const union_unnamed_4 = extern union {
    a_val: u64,
};
pub const Elf64_auxv_t = extern struct {
    a_type: u64,
    a_un: union_unnamed_4,
};
pub const Elf32_Nhdr = extern struct {
    n_namesz: Elf32_Word,
    n_descsz: Elf32_Word,
    n_type: Elf32_Word,
};
pub const Elf64_Nhdr = extern struct {
    n_namesz: Elf64_Word,
    n_descsz: Elf64_Word,
    n_type: Elf64_Word,
};
pub const Elf32_Move = extern struct {
    m_value: Elf32_Xword,
    m_info: Elf32_Word,
    m_poffset: Elf32_Word,
    m_repeat: Elf32_Half,
    m_stride: Elf32_Half,
};
pub const Elf64_Move = extern struct {
    m_value: Elf64_Xword,
    m_info: Elf64_Xword,
    m_poffset: Elf64_Xword,
    m_repeat: Elf64_Half,
    m_stride: Elf64_Half,
};
const struct_unnamed_5 = extern struct {
    gt_current_g_value: Elf32_Word,
    gt_unused: Elf32_Word,
};
const struct_unnamed_6 = extern struct {
    gt_g_value: Elf32_Word,
    gt_bytes: Elf32_Word,
};
pub const Elf32_gptab = extern union {
    gt_header: struct_unnamed_5,
    gt_entry: struct_unnamed_6,
};
pub const Elf32_RegInfo = extern struct {
    ri_gprmask: Elf32_Word,
    ri_cprmask: [4]Elf32_Word,
    ri_gp_value: Elf32_Sword,
};
pub const Elf_Options = extern struct {
    kind: u8,
    size: u8,
    section: Elf32_Section,
    info: Elf32_Word,
};
pub const Elf_Options_Hw = extern struct {
    hwp_flags1: Elf32_Word,
    hwp_flags2: Elf32_Word,
};
pub const Elf32_Lib = extern struct {
    l_name: Elf32_Word,
    l_time_stamp: Elf32_Word,
    l_checksum: Elf32_Word,
    l_version: Elf32_Word,
    l_flags: Elf32_Word,
};
pub const Elf64_Lib = extern struct {
    l_name: Elf64_Word,
    l_time_stamp: Elf64_Word,
    l_checksum: Elf64_Word,
    l_version: Elf64_Word,
    l_flags: Elf64_Word,
};
pub const Elf32_Conflict = Elf32_Addr;
pub const Elf_MIPS_ABIFlags_v0 = extern struct {
    version: Elf32_Half,
    isa_level: u8,
    isa_rev: u8,
    gpr_size: u8,
    cpr1_size: u8,
    cpr2_size: u8,
    fp_abi: u8,
    isa_ext: Elf32_Word,
    ases: Elf32_Word,
    flags1: Elf32_Word,
    flags2: Elf32_Word,
};
pub const Val_GNU_MIPS_ABI_FP_ANY: c_int = 0;
pub const Val_GNU_MIPS_ABI_FP_DOUBLE: c_int = 1;
pub const Val_GNU_MIPS_ABI_FP_SINGLE: c_int = 2;
pub const Val_GNU_MIPS_ABI_FP_SOFT: c_int = 3;
pub const Val_GNU_MIPS_ABI_FP_OLD_64: c_int = 4;
pub const Val_GNU_MIPS_ABI_FP_XX: c_int = 5;
pub const Val_GNU_MIPS_ABI_FP_64: c_int = 6;
pub const Val_GNU_MIPS_ABI_FP_64A: c_int = 7;
pub const Val_GNU_MIPS_ABI_FP_MAX: c_int = 7;
const enum_unnamed_7 = c_uint;
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`"); // (no file):67:9
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`"); // (no file):73:9
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`"); // (no file):164:9
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`"); // (no file):186:9
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`"); // (no file):194:9
pub const __seg_gs = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // (no file):315:9
pub const __seg_fs = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // (no file):316:9
pub const __GLIBC_USE = @compileError("unable to translate macro: undefined identifier `__GLIBC_USE_`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/features.h:186:9
pub const __glibc_has_attribute = @compileError("unable to translate macro: undefined identifier `__has_attribute`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:44:10
pub const __glibc_has_builtin = @compileError("unable to translate macro: undefined identifier `__has_builtin`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:49:10
pub const __glibc_has_extension = @compileError("unable to translate macro: undefined identifier `__has_extension`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:54:10
pub const __THROW = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:78:11
pub const __THROWNL = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:79:11
pub const __NTH = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:80:11
pub const __NTHNL = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:81:11
pub const __CONCAT = @compileError("unable to translate C expr: unexpected token .HashHash"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:123:9
pub const __STRING = @compileError("unable to translate C expr: unexpected token .Hash"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:124:9
pub const __warnattr = @compileError("unable to translate C expr: unexpected token .Eof"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:158:10
pub const __errordecl = @compileError("unable to translate C expr: unexpected token .Keyword_extern"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:159:10
pub const __flexarr = @compileError("unable to translate C expr: unexpected token .LBracket"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:167:10
pub const __REDIRECT = @compileError("unable to translate macro: undefined identifier `__asm__`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:198:10
pub const __REDIRECT_NTH = @compileError("unable to translate macro: undefined identifier `__asm__`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:205:11
pub const __REDIRECT_NTHNL = @compileError("unable to translate macro: undefined identifier `__asm__`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:207:11
pub const __ASMNAME2 = @compileError("unable to translate C expr: unexpected token .Identifier"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:211:10
pub const __attribute_malloc__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:232:10
pub const __attribute_alloc_size__ = @compileError("unable to translate C expr: unexpected token .Eof"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:243:10
pub const __attribute_pure__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:250:10
pub const __attribute_const__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:257:10
pub const __attribute_maybe_unused__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:263:10
pub const __attribute_used__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:272:10
pub const __attribute_noinline__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:273:10
pub const __attribute_deprecated__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:281:10
pub const __attribute_deprecated_msg__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:291:10
pub const __attribute_format_arg__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:304:10
pub const __attribute_format_strfmon__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:314:10
pub const __nonnull = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:324:11
pub const __returns_nonnull = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:337:10
pub const __attribute_warn_unused_result__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:346:10
pub const __always_inline = @compileError("unable to translate macro: undefined identifier `__inline`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:364:10
pub const __attribute_artificial__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:373:10
pub const __extern_inline = @compileError("unable to translate macro: undefined identifier `__inline`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:391:11
pub const __extern_always_inline = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:392:11
pub const __restrict_arr = @compileError("unable to translate macro: undefined identifier `__restrict`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:435:10
pub const __attribute_copy__ = @compileError("unable to translate C expr: unexpected token .Eof"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:484:10
pub const __LDBL_REDIR2_DECL = @compileError("unable to translate C expr: unexpected token .Eof"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:560:10
pub const __LDBL_REDIR_DECL = @compileError("unable to translate C expr: unexpected token .Eof"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:561:10
pub const __glibc_macro_warning1 = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:575:10
pub const __glibc_macro_warning = @compileError("unable to translate macro: undefined identifier `GCC`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:576:10
pub const __attr_access = @compileError("unable to translate C expr: unexpected token .Eof"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:612:11
pub const __attr_access_none = @compileError("unable to translate C expr: unexpected token .Eof"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:613:11
pub const __attr_dealloc = @compileError("unable to translate C expr: unexpected token .Eof"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:623:10
pub const __attribute_returns_twice__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/sys/cdefs.h:630:10
pub const __STD_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_typedef"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/bits/types.h:137:10
pub const __FSID_T_TYPE = @compileError("unable to translate macro: undefined identifier `__val`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/x86_64-linux-gnu/bits/typesizes.h:73:9
pub const __INT64_C = @compileError("unable to translate macro: undefined identifier `L`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/stdint.h:106:11
pub const __UINT64_C = @compileError("unable to translate macro: undefined identifier `UL`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/stdint.h:107:11
pub const INT64_C = @compileError("unable to translate macro: undefined identifier `L`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/stdint.h:252:11
pub const UINT32_C = @compileError("unable to translate macro: undefined identifier `U`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/stdint.h:260:10
pub const UINT64_C = @compileError("unable to translate macro: undefined identifier `UL`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/stdint.h:262:11
pub const INTMAX_C = @compileError("unable to translate macro: undefined identifier `L`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/stdint.h:269:11
pub const UINTMAX_C = @compileError("unable to translate macro: undefined identifier `UL`"); // /nix/store/c5g4ryg4w87hfav1vijjrnivw5h7ax26-zig-0.9.1/lib/zig/libc/include/generic-glibc/stdint.h:270:11
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 13);
pub const __clang_minor__ = @as(c_int, 0);
pub const __clang_patchlevel__ = @as(c_int, 1);
pub const __clang_version__ = "13.0.1 ";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Clang 13.0.1";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 0);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-32";
pub const __OPTIMIZE__ = @as(c_int, 1);
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const _LP64 = @as(c_int, 1);
pub const __LP64__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __SIZE_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __PTRDIFF_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __UINTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 8);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 16);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 8);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 8);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 8);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 4);
pub const __SIZEOF_WINT_T__ = @as(c_int, 4);
pub const __SIZEOF_INT128__ = @as(c_int, 16);
pub const __INTMAX_TYPE__ = c_long;
pub const __INTMAX_FMTd__ = "ld";
pub const __INTMAX_FMTi__ = "li";
pub const __UINTMAX_TYPE__ = c_ulong;
pub const __UINTMAX_FMTo__ = "lo";
pub const __UINTMAX_FMTu__ = "lu";
pub const __UINTMAX_FMTx__ = "lx";
pub const __UINTMAX_FMTX__ = "lX";
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_TYPE__ = c_long;
pub const __PTRDIFF_FMTd__ = "ld";
pub const __PTRDIFF_FMTi__ = "li";
pub const __PTRDIFF_WIDTH__ = @as(c_int, 64);
pub const __INTPTR_TYPE__ = c_long;
pub const __INTPTR_FMTd__ = "ld";
pub const __INTPTR_FMTi__ = "li";
pub const __INTPTR_WIDTH__ = @as(c_int, 64);
pub const __SIZE_TYPE__ = c_ulong;
pub const __SIZE_FMTo__ = "lo";
pub const __SIZE_FMTu__ = "lu";
pub const __SIZE_FMTx__ = "lx";
pub const __SIZE_FMTX__ = "lX";
pub const __SIZE_WIDTH__ = @as(c_int, 64);
pub const __WCHAR_TYPE__ = c_int;
pub const __WCHAR_WIDTH__ = @as(c_int, 32);
pub const __WINT_TYPE__ = c_uint;
pub const __WINT_WIDTH__ = @as(c_int, 32);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __UINTPTR_TYPE__ = c_ulong;
pub const __UINTPTR_FMTo__ = "lo";
pub const __UINTPTR_FMTu__ = "lu";
pub const __UINTPTR_FMTx__ = "lx";
pub const __UINTPTR_FMTX__ = "lX";
pub const __UINTPTR_WIDTH__ = @as(c_int, 64);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = 4.9406564584124654e-324;
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = 2.2204460492503131e-16;
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = 1.7976931348623157e+308;
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = 2.2250738585072014e-308;
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 3.64519953188247460253e-4951);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 18);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 21);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 1.08420217248550443401e-19);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 64);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 4932);
pub const __LDBL_MAX_EXP__ = @as(c_int, 16384);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 4931);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 16381);
pub const __LDBL_MIN__ = @as(c_longdouble, 3.36210314311209350626e-4932);
pub const __POINTER_WIDTH__ = @as(c_int, 64);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 16);
pub const __WINT_UNSIGNED__ = @as(c_int, 1);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_long;
pub const __INT64_FMTd__ = "ld";
pub const __INT64_FMTi__ = "li";
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulong;
pub const __UINT64_FMTo__ = "lo";
pub const __UINT64_FMTu__ = "lu";
pub const __UINT64_FMTx__ = "lx";
pub const __UINT64_FMTX__ = "lX";
pub const __UINT64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __INT64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_long;
pub const __INT_LEAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST64_FMTd__ = "ld";
pub const __INT_LEAST64_FMTi__ = "li";
pub const __UINT_LEAST64_TYPE__ = c_ulong;
pub const __UINT_LEAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINT_LEAST64_FMTo__ = "lo";
pub const __UINT_LEAST64_FMTu__ = "lu";
pub const __UINT_LEAST64_FMTx__ = "lx";
pub const __UINT_LEAST64_FMTX__ = "lX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_long;
pub const __INT_FAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_FAST64_FMTd__ = "ld";
pub const __INT_FAST64_FMTi__ = "li";
pub const __UINT_FAST64_TYPE__ = c_ulong;
pub const __UINT_FAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINT_FAST64_FMTo__ = "lo";
pub const __UINT_FAST64_FMTu__ = "lu";
pub const __UINT_FAST64_FMTx__ = "lx";
pub const __UINT_FAST64_FMTX__ = "lX";
pub const __USER_LABEL_PREFIX__ = "";
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __PIC__ = @as(c_int, 2);
pub const __pic__ = @as(c_int, 2);
pub const __FLT_EVAL_METHOD__ = @as(c_int, 0);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __SSP_STRONG__ = @as(c_int, 2);
pub const __GCC_ASM_FLAG_OUTPUTS__ = @as(c_int, 1);
pub const __code_model_small__ = @as(c_int, 1);
pub const __amd64__ = @as(c_int, 1);
pub const __amd64 = @as(c_int, 1);
pub const __x86_64 = @as(c_int, 1);
pub const __x86_64__ = @as(c_int, 1);
pub const __SEG_GS = @as(c_int, 1);
pub const __SEG_FS = @as(c_int, 1);
pub const __corei7 = @as(c_int, 1);
pub const __corei7__ = @as(c_int, 1);
pub const __tune_corei7__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __NO_MATH_INLINES = @as(c_int, 1);
pub const __AES__ = @as(c_int, 1);
pub const __PCLMUL__ = @as(c_int, 1);
pub const __LAHF_SAHF__ = @as(c_int, 1);
pub const __LZCNT__ = @as(c_int, 1);
pub const __RDRND__ = @as(c_int, 1);
pub const __FSGSBASE__ = @as(c_int, 1);
pub const __BMI__ = @as(c_int, 1);
pub const __BMI2__ = @as(c_int, 1);
pub const __POPCNT__ = @as(c_int, 1);
pub const __PRFCHW__ = @as(c_int, 1);
pub const __RDSEED__ = @as(c_int, 1);
pub const __ADX__ = @as(c_int, 1);
pub const __MOVBE__ = @as(c_int, 1);
pub const __FMA__ = @as(c_int, 1);
pub const __F16C__ = @as(c_int, 1);
pub const __FXSR__ = @as(c_int, 1);
pub const __XSAVE__ = @as(c_int, 1);
pub const __XSAVEOPT__ = @as(c_int, 1);
pub const __XSAVEC__ = @as(c_int, 1);
pub const __XSAVES__ = @as(c_int, 1);
pub const __CLFLUSHOPT__ = @as(c_int, 1);
pub const __SGX__ = @as(c_int, 1);
pub const __INVPCID__ = @as(c_int, 1);
pub const __AVX2__ = @as(c_int, 1);
pub const __AVX__ = @as(c_int, 1);
pub const __SSE4_2__ = @as(c_int, 1);
pub const __SSE4_1__ = @as(c_int, 1);
pub const __SSSE3__ = @as(c_int, 1);
pub const __SSE3__ = @as(c_int, 1);
pub const __SSE2__ = @as(c_int, 1);
pub const __SSE2_MATH__ = @as(c_int, 1);
pub const __SSE__ = @as(c_int, 1);
pub const __SSE_MATH__ = @as(c_int, 1);
pub const __MMX__ = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = @as(c_int, 1);
pub const __SIZEOF_FLOAT128__ = @as(c_int, 16);
pub const unix = @as(c_int, 1);
pub const __unix = @as(c_int, 1);
pub const __unix__ = @as(c_int, 1);
pub const linux = @as(c_int, 1);
pub const __linux = @as(c_int, 1);
pub const __linux__ = @as(c_int, 1);
pub const __ELF__ = @as(c_int, 1);
pub const __gnu_linux__ = @as(c_int, 1);
pub const __FLOAT128__ = @as(c_int, 1);
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 1);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const __GLIBC_MINOR__ = @as(c_int, 19);
pub const _DEBUG = @as(c_int, 1);
pub const __GCC_HAVE_DWARF2_CFI_ASM = @as(c_int, 1);
pub const _ELF_H = @as(c_int, 1);
pub const __CLANG_STDINT_H = "";
pub const _STDINT_H = @as(c_int, 1);
pub const __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION = "";
pub const _FEATURES_H = @as(c_int, 1);
pub const __KERNEL_STRICT_NAMES = "";
pub inline fn __GNUC_PREREQ(maj: anytype, min: anytype) @TypeOf(((__GNUC__ << @as(c_int, 16)) + __GNUC_MINOR__) >= ((maj << @as(c_int, 16)) + min)) {
    return ((__GNUC__ << @as(c_int, 16)) + __GNUC_MINOR__) >= ((maj << @as(c_int, 16)) + min);
}
pub inline fn __glibc_clang_prereq(maj: anytype, min: anytype) @TypeOf(((__clang_major__ << @as(c_int, 16)) + __clang_minor__) >= ((maj << @as(c_int, 16)) + min)) {
    return ((__clang_major__ << @as(c_int, 16)) + __clang_minor__) >= ((maj << @as(c_int, 16)) + min);
}
pub const _DEFAULT_SOURCE = @as(c_int, 1);
pub const __GLIBC_USE_ISOC2X = @as(c_int, 0);
pub const __USE_ISOC11 = @as(c_int, 1);
pub const __USE_ISOC99 = @as(c_int, 1);
pub const __USE_ISOC95 = @as(c_int, 1);
pub const __USE_POSIX_IMPLICITLY = @as(c_int, 1);
pub const _POSIX_SOURCE = @as(c_int, 1);
pub const _POSIX_C_SOURCE = @as(c_long, 200809);
pub const __USE_POSIX = @as(c_int, 1);
pub const __USE_POSIX2 = @as(c_int, 1);
pub const __USE_POSIX199309 = @as(c_int, 1);
pub const __USE_POSIX199506 = @as(c_int, 1);
pub const __USE_XOPEN2K = @as(c_int, 1);
pub const __USE_XOPEN2K8 = @as(c_int, 1);
pub const _ATFILE_SOURCE = @as(c_int, 1);
pub const __WORDSIZE = @as(c_int, 64);
pub const __WORDSIZE_TIME64_COMPAT32 = @as(c_int, 1);
pub const __SYSCALL_WORDSIZE = @as(c_int, 64);
pub const __TIMESIZE = __WORDSIZE;
pub const __USE_MISC = @as(c_int, 1);
pub const __USE_ATFILE = @as(c_int, 1);
pub const __USE_FORTIFY_LEVEL = @as(c_int, 0);
pub const __GLIBC_USE_DEPRECATED_GETS = @as(c_int, 0);
pub const __GLIBC_USE_DEPRECATED_SCANF = @as(c_int, 0);
pub const _STDC_PREDEF_H = @as(c_int, 1);
pub const __STDC_IEC_559__ = @as(c_int, 1);
pub const __STDC_IEC_559_COMPLEX__ = @as(c_int, 1);
pub const __STDC_ISO_10646__ = @as(c_long, 201706);
pub const __GNU_LIBRARY__ = @as(c_int, 6);
pub const __GLIBC__ = @as(c_int, 2);
pub inline fn __GLIBC_PREREQ(maj: anytype, min: anytype) @TypeOf(((__GLIBC__ << @as(c_int, 16)) + __GLIBC_MINOR__) >= ((maj << @as(c_int, 16)) + min)) {
    return ((__GLIBC__ << @as(c_int, 16)) + __GLIBC_MINOR__) >= ((maj << @as(c_int, 16)) + min);
}
pub const _SYS_CDEFS_H = @as(c_int, 1);
pub const __LEAF = "";
pub const __LEAF_ATTR = "";
pub inline fn __P(args: anytype) @TypeOf(args) {
    return args;
}
pub inline fn __PMT(args: anytype) @TypeOf(args) {
    return args;
}
pub const __ptr_t = ?*anyopaque;
pub const __BEGIN_DECLS = "";
pub const __END_DECLS = "";
pub inline fn __bos(ptr: anytype) @TypeOf(__builtin_object_size(ptr, __USE_FORTIFY_LEVEL > @as(c_int, 1))) {
    return __builtin_object_size(ptr, __USE_FORTIFY_LEVEL > @as(c_int, 1));
}
pub inline fn __bos0(ptr: anytype) @TypeOf(__builtin_object_size(ptr, @as(c_int, 0))) {
    return __builtin_object_size(ptr, @as(c_int, 0));
}
pub inline fn __glibc_objsize0(__o: anytype) @TypeOf(__bos0(__o)) {
    return __bos0(__o);
}
pub inline fn __glibc_objsize(__o: anytype) @TypeOf(__bos(__o)) {
    return __bos(__o);
}
pub const __glibc_c99_flexarr_available = @as(c_int, 1);
pub inline fn __ASMNAME(cname: anytype) @TypeOf(__ASMNAME2(__USER_LABEL_PREFIX__, cname)) {
    return __ASMNAME2(__USER_LABEL_PREFIX__, cname);
}
pub const __wur = "";
pub const __fortify_function = __extern_always_inline ++ __attribute_artificial__;
pub inline fn __glibc_unlikely(cond: anytype) @TypeOf(__builtin_expect(cond, @as(c_int, 0))) {
    return __builtin_expect(cond, @as(c_int, 0));
}
pub inline fn __glibc_likely(cond: anytype) @TypeOf(__builtin_expect(cond, @as(c_int, 1))) {
    return __builtin_expect(cond, @as(c_int, 1));
}
pub const __attribute_nonstring__ = "";
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = @as(c_int, 0);
pub inline fn __LDBL_REDIR1(name: anytype, proto: anytype, alias: anytype) @TypeOf(name ++ proto) {
    _ = alias;
    return name ++ proto;
}
pub inline fn __LDBL_REDIR(name: anytype, proto: anytype) @TypeOf(name ++ proto) {
    return name ++ proto;
}
pub inline fn __LDBL_REDIR1_NTH(name: anytype, proto: anytype, alias: anytype) @TypeOf(name ++ proto ++ __THROW) {
    _ = alias;
    return name ++ proto ++ __THROW;
}
pub inline fn __LDBL_REDIR_NTH(name: anytype, proto: anytype) @TypeOf(name ++ proto ++ __THROW) {
    return name ++ proto ++ __THROW;
}
pub inline fn __REDIRECT_LDBL(name: anytype, proto: anytype, alias: anytype) @TypeOf(__REDIRECT(name, proto, alias)) {
    return __REDIRECT(name, proto, alias);
}
pub inline fn __REDIRECT_NTH_LDBL(name: anytype, proto: anytype, alias: anytype) @TypeOf(__REDIRECT_NTH(name, proto, alias)) {
    return __REDIRECT_NTH(name, proto, alias);
}
pub const __HAVE_GENERIC_SELECTION = @as(c_int, 1);
pub const __attr_dealloc_free = "";
pub const __USE_EXTERN_INLINES = @as(c_int, 1);
pub const __stub___compat_bdflush = "";
pub const __stub_chflags = "";
pub const __stub_fchflags = "";
pub const __stub_gtty = "";
pub const __stub_revoke = "";
pub const __stub_setlogin = "";
pub const __stub_sigreturn = "";
pub const __stub_stty = "";
pub const __GLIBC_USE_LIB_EXT2 = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_BFP_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_TYPES_EXT = @as(c_int, 0);
pub const _BITS_TYPES_H = @as(c_int, 1);
pub const __S16_TYPE = c_short;
pub const __U16_TYPE = c_ushort;
pub const __S32_TYPE = c_int;
pub const __U32_TYPE = c_uint;
pub const __SLONGWORD_TYPE = c_long;
pub const __ULONGWORD_TYPE = c_ulong;
pub const __SQUAD_TYPE = c_long;
pub const __UQUAD_TYPE = c_ulong;
pub const __SWORD_TYPE = c_long;
pub const __UWORD_TYPE = c_ulong;
pub const __SLONG32_TYPE = c_int;
pub const __ULONG32_TYPE = c_uint;
pub const __S64_TYPE = c_long;
pub const __U64_TYPE = c_ulong;
pub const _BITS_TYPESIZES_H = @as(c_int, 1);
pub const __SYSCALL_SLONG_TYPE = __SLONGWORD_TYPE;
pub const __SYSCALL_ULONG_TYPE = __ULONGWORD_TYPE;
pub const __DEV_T_TYPE = __UQUAD_TYPE;
pub const __UID_T_TYPE = __U32_TYPE;
pub const __GID_T_TYPE = __U32_TYPE;
pub const __INO_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __INO64_T_TYPE = __UQUAD_TYPE;
pub const __MODE_T_TYPE = __U32_TYPE;
pub const __NLINK_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSWORD_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __OFF_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __OFF64_T_TYPE = __SQUAD_TYPE;
pub const __PID_T_TYPE = __S32_TYPE;
pub const __RLIM_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __RLIM64_T_TYPE = __UQUAD_TYPE;
pub const __BLKCNT_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __BLKCNT64_T_TYPE = __SQUAD_TYPE;
pub const __FSBLKCNT_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSBLKCNT64_T_TYPE = __UQUAD_TYPE;
pub const __FSFILCNT_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSFILCNT64_T_TYPE = __UQUAD_TYPE;
pub const __ID_T_TYPE = __U32_TYPE;
pub const __CLOCK_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __TIME_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __USECONDS_T_TYPE = __U32_TYPE;
pub const __SUSECONDS_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __SUSECONDS64_T_TYPE = __SQUAD_TYPE;
pub const __DADDR_T_TYPE = __S32_TYPE;
pub const __KEY_T_TYPE = __S32_TYPE;
pub const __CLOCKID_T_TYPE = __S32_TYPE;
pub const __TIMER_T_TYPE = ?*anyopaque;
pub const __BLKSIZE_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __SSIZE_T_TYPE = __SWORD_TYPE;
pub const __CPU_MASK_TYPE = __SYSCALL_ULONG_TYPE;
pub const __OFF_T_MATCHES_OFF64_T = @as(c_int, 1);
pub const __INO_T_MATCHES_INO64_T = @as(c_int, 1);
pub const __RLIM_T_MATCHES_RLIM64_T = @as(c_int, 1);
pub const __STATFS_MATCHES_STATFS64 = @as(c_int, 1);
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = @as(c_int, 1);
pub const __FD_SETSIZE = @as(c_int, 1024);
pub const _BITS_TIME64_H = @as(c_int, 1);
pub const __TIME64_T_TYPE = __TIME_T_TYPE;
pub const _BITS_WCHAR_H = @as(c_int, 1);
pub const __WCHAR_MAX = __WCHAR_MAX__;
pub const __WCHAR_MIN = -__WCHAR_MAX - @as(c_int, 1);
pub const _BITS_STDINT_INTN_H = @as(c_int, 1);
pub const _BITS_STDINT_UINTN_H = @as(c_int, 1);
pub const __intptr_t_defined = "";
pub const INT8_MIN = -@as(c_int, 128);
pub const INT16_MIN = -@as(c_int, 32767) - @as(c_int, 1);
pub const INT32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const INT64_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INT8_MAX = @as(c_int, 127);
pub const INT16_MAX = @as(c_int, 32767);
pub const INT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const INT64_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINT8_MAX = @as(c_int, 255);
pub const UINT16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const UINT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const UINT64_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INT_LEAST8_MIN = -@as(c_int, 128);
pub const INT_LEAST16_MIN = -@as(c_int, 32767) - @as(c_int, 1);
pub const INT_LEAST32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const INT_LEAST64_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INT_LEAST8_MAX = @as(c_int, 127);
pub const INT_LEAST16_MAX = @as(c_int, 32767);
pub const INT_LEAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const INT_LEAST64_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINT_LEAST8_MAX = @as(c_int, 255);
pub const UINT_LEAST16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const UINT_LEAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const UINT_LEAST64_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INT_FAST8_MIN = -@as(c_int, 128);
pub const INT_FAST16_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const INT_FAST32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const INT_FAST64_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INT_FAST8_MAX = @as(c_int, 127);
pub const INT_FAST16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const INT_FAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const INT_FAST64_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINT_FAST8_MAX = @as(c_int, 255);
pub const UINT_FAST16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const UINT_FAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const UINT_FAST64_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INTPTR_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const INTPTR_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const UINTPTR_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const INTMAX_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INTMAX_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINTMAX_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const PTRDIFF_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const PTRDIFF_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const SIG_ATOMIC_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const SIG_ATOMIC_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const SIZE_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const WCHAR_MIN = __WCHAR_MIN;
pub const WCHAR_MAX = __WCHAR_MAX;
pub const WINT_MIN = @as(c_uint, 0);
pub const WINT_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub inline fn INT8_C(c: anytype) @TypeOf(c) {
    return c;
}
pub inline fn INT16_C(c: anytype) @TypeOf(c) {
    return c;
}
pub inline fn INT32_C(c: anytype) @TypeOf(c) {
    return c;
}
pub inline fn UINT8_C(c: anytype) @TypeOf(c) {
    return c;
}
pub inline fn UINT16_C(c: anytype) @TypeOf(c) {
    return c;
}
pub const EI_NIDENT = @as(c_int, 16);
pub const EI_MAG0 = @as(c_int, 0);
pub const ELFMAG0 = @as(c_int, 0x7f);
pub const EI_MAG1 = @as(c_int, 1);
pub const ELFMAG1 = 'E';
pub const EI_MAG2 = @as(c_int, 2);
pub const ELFMAG2 = 'L';
pub const EI_MAG3 = @as(c_int, 3);
pub const ELFMAG3 = 'F';
pub const ELFMAG = "\x7fELF";
pub const SELFMAG = @as(c_int, 4);
pub const EI_CLASS = @as(c_int, 4);
pub const ELFCLASSNONE = @as(c_int, 0);
pub const ELFCLASS32 = @as(c_int, 1);
pub const ELFCLASS64 = @as(c_int, 2);
pub const ELFCLASSNUM = @as(c_int, 3);
pub const EI_DATA = @as(c_int, 5);
pub const ELFDATANONE = @as(c_int, 0);
pub const ELFDATA2LSB = @as(c_int, 1);
pub const ELFDATA2MSB = @as(c_int, 2);
pub const ELFDATANUM = @as(c_int, 3);
pub const EI_VERSION = @as(c_int, 6);
pub const EI_OSABI = @as(c_int, 7);
pub const ELFOSABI_NONE = @as(c_int, 0);
pub const ELFOSABI_SYSV = @as(c_int, 0);
pub const ELFOSABI_HPUX = @as(c_int, 1);
pub const ELFOSABI_NETBSD = @as(c_int, 2);
pub const ELFOSABI_GNU = @as(c_int, 3);
pub const ELFOSABI_LINUX = ELFOSABI_GNU;
pub const ELFOSABI_SOLARIS = @as(c_int, 6);
pub const ELFOSABI_AIX = @as(c_int, 7);
pub const ELFOSABI_IRIX = @as(c_int, 8);
pub const ELFOSABI_FREEBSD = @as(c_int, 9);
pub const ELFOSABI_TRU64 = @as(c_int, 10);
pub const ELFOSABI_MODESTO = @as(c_int, 11);
pub const ELFOSABI_OPENBSD = @as(c_int, 12);
pub const ELFOSABI_ARM_AEABI = @as(c_int, 64);
pub const ELFOSABI_ARM = @as(c_int, 97);
pub const ELFOSABI_STANDALONE = @as(c_int, 255);
pub const EI_ABIVERSION = @as(c_int, 8);
pub const EI_PAD = @as(c_int, 9);
pub const ET_NONE = @as(c_int, 0);
pub const ET_REL = @as(c_int, 1);
pub const ET_EXEC = @as(c_int, 2);
pub const ET_DYN = @as(c_int, 3);
pub const ET_CORE = @as(c_int, 4);
pub const ET_NUM = @as(c_int, 5);
pub const ET_LOOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xfe00, .hexadecimal);
pub const ET_HIOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xfeff, .hexadecimal);
pub const ET_LOPROC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00, .hexadecimal);
pub const ET_HIPROC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff, .hexadecimal);
pub const EM_NONE = @as(c_int, 0);
pub const EM_M32 = @as(c_int, 1);
pub const EM_SPARC = @as(c_int, 2);
pub const EM_386 = @as(c_int, 3);
pub const EM_68K = @as(c_int, 4);
pub const EM_88K = @as(c_int, 5);
pub const EM_IAMCU = @as(c_int, 6);
pub const EM_860 = @as(c_int, 7);
pub const EM_MIPS = @as(c_int, 8);
pub const EM_S370 = @as(c_int, 9);
pub const EM_MIPS_RS3_LE = @as(c_int, 10);
pub const EM_PARISC = @as(c_int, 15);
pub const EM_VPP500 = @as(c_int, 17);
pub const EM_SPARC32PLUS = @as(c_int, 18);
pub const EM_960 = @as(c_int, 19);
pub const EM_PPC = @as(c_int, 20);
pub const EM_PPC64 = @as(c_int, 21);
pub const EM_S390 = @as(c_int, 22);
pub const EM_SPU = @as(c_int, 23);
pub const EM_V800 = @as(c_int, 36);
pub const EM_FR20 = @as(c_int, 37);
pub const EM_RH32 = @as(c_int, 38);
pub const EM_RCE = @as(c_int, 39);
pub const EM_ARM = @as(c_int, 40);
pub const EM_FAKE_ALPHA = @as(c_int, 41);
pub const EM_SH = @as(c_int, 42);
pub const EM_SPARCV9 = @as(c_int, 43);
pub const EM_TRICORE = @as(c_int, 44);
pub const EM_ARC = @as(c_int, 45);
pub const EM_H8_300 = @as(c_int, 46);
pub const EM_H8_300H = @as(c_int, 47);
pub const EM_H8S = @as(c_int, 48);
pub const EM_H8_500 = @as(c_int, 49);
pub const EM_IA_64 = @as(c_int, 50);
pub const EM_MIPS_X = @as(c_int, 51);
pub const EM_COLDFIRE = @as(c_int, 52);
pub const EM_68HC12 = @as(c_int, 53);
pub const EM_MMA = @as(c_int, 54);
pub const EM_PCP = @as(c_int, 55);
pub const EM_NCPU = @as(c_int, 56);
pub const EM_NDR1 = @as(c_int, 57);
pub const EM_STARCORE = @as(c_int, 58);
pub const EM_ME16 = @as(c_int, 59);
pub const EM_ST100 = @as(c_int, 60);
pub const EM_TINYJ = @as(c_int, 61);
pub const EM_X86_64 = @as(c_int, 62);
pub const EM_PDSP = @as(c_int, 63);
pub const EM_PDP10 = @as(c_int, 64);
pub const EM_PDP11 = @as(c_int, 65);
pub const EM_FX66 = @as(c_int, 66);
pub const EM_ST9PLUS = @as(c_int, 67);
pub const EM_ST7 = @as(c_int, 68);
pub const EM_68HC16 = @as(c_int, 69);
pub const EM_68HC11 = @as(c_int, 70);
pub const EM_68HC08 = @as(c_int, 71);
pub const EM_68HC05 = @as(c_int, 72);
pub const EM_SVX = @as(c_int, 73);
pub const EM_ST19 = @as(c_int, 74);
pub const EM_VAX = @as(c_int, 75);
pub const EM_CRIS = @as(c_int, 76);
pub const EM_JAVELIN = @as(c_int, 77);
pub const EM_FIREPATH = @as(c_int, 78);
pub const EM_ZSP = @as(c_int, 79);
pub const EM_MMIX = @as(c_int, 80);
pub const EM_HUANY = @as(c_int, 81);
pub const EM_PRISM = @as(c_int, 82);
pub const EM_AVR = @as(c_int, 83);
pub const EM_FR30 = @as(c_int, 84);
pub const EM_D10V = @as(c_int, 85);
pub const EM_D30V = @as(c_int, 86);
pub const EM_V850 = @as(c_int, 87);
pub const EM_M32R = @as(c_int, 88);
pub const EM_MN10300 = @as(c_int, 89);
pub const EM_MN10200 = @as(c_int, 90);
pub const EM_PJ = @as(c_int, 91);
pub const EM_OPENRISC = @as(c_int, 92);
pub const EM_ARC_COMPACT = @as(c_int, 93);
pub const EM_XTENSA = @as(c_int, 94);
pub const EM_VIDEOCORE = @as(c_int, 95);
pub const EM_TMM_GPP = @as(c_int, 96);
pub const EM_NS32K = @as(c_int, 97);
pub const EM_TPC = @as(c_int, 98);
pub const EM_SNP1K = @as(c_int, 99);
pub const EM_ST200 = @as(c_int, 100);
pub const EM_IP2K = @as(c_int, 101);
pub const EM_MAX = @as(c_int, 102);
pub const EM_CR = @as(c_int, 103);
pub const EM_F2MC16 = @as(c_int, 104);
pub const EM_MSP430 = @as(c_int, 105);
pub const EM_BLACKFIN = @as(c_int, 106);
pub const EM_SE_C33 = @as(c_int, 107);
pub const EM_SEP = @as(c_int, 108);
pub const EM_ARCA = @as(c_int, 109);
pub const EM_UNICORE = @as(c_int, 110);
pub const EM_EXCESS = @as(c_int, 111);
pub const EM_DXP = @as(c_int, 112);
pub const EM_ALTERA_NIOS2 = @as(c_int, 113);
pub const EM_CRX = @as(c_int, 114);
pub const EM_XGATE = @as(c_int, 115);
pub const EM_C166 = @as(c_int, 116);
pub const EM_M16C = @as(c_int, 117);
pub const EM_DSPIC30F = @as(c_int, 118);
pub const EM_CE = @as(c_int, 119);
pub const EM_M32C = @as(c_int, 120);
pub const EM_TSK3000 = @as(c_int, 131);
pub const EM_RS08 = @as(c_int, 132);
pub const EM_SHARC = @as(c_int, 133);
pub const EM_ECOG2 = @as(c_int, 134);
pub const EM_SCORE7 = @as(c_int, 135);
pub const EM_DSP24 = @as(c_int, 136);
pub const EM_VIDEOCORE3 = @as(c_int, 137);
pub const EM_LATTICEMICO32 = @as(c_int, 138);
pub const EM_SE_C17 = @as(c_int, 139);
pub const EM_TI_C6000 = @as(c_int, 140);
pub const EM_TI_C2000 = @as(c_int, 141);
pub const EM_TI_C5500 = @as(c_int, 142);
pub const EM_TI_ARP32 = @as(c_int, 143);
pub const EM_TI_PRU = @as(c_int, 144);
pub const EM_MMDSP_PLUS = @as(c_int, 160);
pub const EM_CYPRESS_M8C = @as(c_int, 161);
pub const EM_R32C = @as(c_int, 162);
pub const EM_TRIMEDIA = @as(c_int, 163);
pub const EM_QDSP6 = @as(c_int, 164);
pub const EM_8051 = @as(c_int, 165);
pub const EM_STXP7X = @as(c_int, 166);
pub const EM_NDS32 = @as(c_int, 167);
pub const EM_ECOG1X = @as(c_int, 168);
pub const EM_MAXQ30 = @as(c_int, 169);
pub const EM_XIMO16 = @as(c_int, 170);
pub const EM_MANIK = @as(c_int, 171);
pub const EM_CRAYNV2 = @as(c_int, 172);
pub const EM_RX = @as(c_int, 173);
pub const EM_METAG = @as(c_int, 174);
pub const EM_MCST_ELBRUS = @as(c_int, 175);
pub const EM_ECOG16 = @as(c_int, 176);
pub const EM_CR16 = @as(c_int, 177);
pub const EM_ETPU = @as(c_int, 178);
pub const EM_SLE9X = @as(c_int, 179);
pub const EM_L10M = @as(c_int, 180);
pub const EM_K10M = @as(c_int, 181);
pub const EM_AARCH64 = @as(c_int, 183);
pub const EM_AVR32 = @as(c_int, 185);
pub const EM_STM8 = @as(c_int, 186);
pub const EM_TILE64 = @as(c_int, 187);
pub const EM_TILEPRO = @as(c_int, 188);
pub const EM_MICROBLAZE = @as(c_int, 189);
pub const EM_CUDA = @as(c_int, 190);
pub const EM_TILEGX = @as(c_int, 191);
pub const EM_CLOUDSHIELD = @as(c_int, 192);
pub const EM_COREA_1ST = @as(c_int, 193);
pub const EM_COREA_2ND = @as(c_int, 194);
pub const EM_ARCV2 = @as(c_int, 195);
pub const EM_OPEN8 = @as(c_int, 196);
pub const EM_RL78 = @as(c_int, 197);
pub const EM_VIDEOCORE5 = @as(c_int, 198);
pub const EM_78KOR = @as(c_int, 199);
pub const EM_56800EX = @as(c_int, 200);
pub const EM_BA1 = @as(c_int, 201);
pub const EM_BA2 = @as(c_int, 202);
pub const EM_XCORE = @as(c_int, 203);
pub const EM_MCHP_PIC = @as(c_int, 204);
pub const EM_INTELGT = @as(c_int, 205);
pub const EM_KM32 = @as(c_int, 210);
pub const EM_KMX32 = @as(c_int, 211);
pub const EM_EMX16 = @as(c_int, 212);
pub const EM_EMX8 = @as(c_int, 213);
pub const EM_KVARC = @as(c_int, 214);
pub const EM_CDP = @as(c_int, 215);
pub const EM_COGE = @as(c_int, 216);
pub const EM_COOL = @as(c_int, 217);
pub const EM_NORC = @as(c_int, 218);
pub const EM_CSR_KALIMBA = @as(c_int, 219);
pub const EM_Z80 = @as(c_int, 220);
pub const EM_VISIUM = @as(c_int, 221);
pub const EM_FT32 = @as(c_int, 222);
pub const EM_MOXIE = @as(c_int, 223);
pub const EM_AMDGPU = @as(c_int, 224);
pub const EM_RISCV = @as(c_int, 243);
pub const EM_BPF = @as(c_int, 247);
pub const EM_CSKY = @as(c_int, 252);
pub const EM_NUM = @as(c_int, 253);
pub const EM_ARC_A5 = EM_ARC_COMPACT;
pub const EM_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9026, .hexadecimal);
pub const EV_NONE = @as(c_int, 0);
pub const EV_CURRENT = @as(c_int, 1);
pub const EV_NUM = @as(c_int, 2);
pub const SHN_UNDEF = @as(c_int, 0);
pub const SHN_LORESERVE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00, .hexadecimal);
pub const SHN_LOPROC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00, .hexadecimal);
pub const SHN_BEFORE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00, .hexadecimal);
pub const SHN_AFTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff01, .hexadecimal);
pub const SHN_HIPROC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff1f, .hexadecimal);
pub const SHN_LOOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff20, .hexadecimal);
pub const SHN_HIOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff3f, .hexadecimal);
pub const SHN_ABS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xfff1, .hexadecimal);
pub const SHN_COMMON = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xfff2, .hexadecimal);
pub const SHN_XINDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff, .hexadecimal);
pub const SHN_HIRESERVE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff, .hexadecimal);
pub const SHT_NULL = @as(c_int, 0);
pub const SHT_PROGBITS = @as(c_int, 1);
pub const SHT_SYMTAB = @as(c_int, 2);
pub const SHT_STRTAB = @as(c_int, 3);
pub const SHT_RELA = @as(c_int, 4);
pub const SHT_HASH = @as(c_int, 5);
pub const SHT_DYNAMIC = @as(c_int, 6);
pub const SHT_NOTE = @as(c_int, 7);
pub const SHT_NOBITS = @as(c_int, 8);
pub const SHT_REL = @as(c_int, 9);
pub const SHT_SHLIB = @as(c_int, 10);
pub const SHT_DYNSYM = @as(c_int, 11);
pub const SHT_INIT_ARRAY = @as(c_int, 14);
pub const SHT_FINI_ARRAY = @as(c_int, 15);
pub const SHT_PREINIT_ARRAY = @as(c_int, 16);
pub const SHT_GROUP = @as(c_int, 17);
pub const SHT_SYMTAB_SHNDX = @as(c_int, 18);
pub const SHT_NUM = @as(c_int, 19);
pub const SHT_LOOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x60000000, .hexadecimal);
pub const SHT_GNU_ATTRIBUTES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffff5, .hexadecimal);
pub const SHT_GNU_HASH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffff6, .hexadecimal);
pub const SHT_GNU_LIBLIST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffff7, .hexadecimal);
pub const SHT_CHECKSUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffff8, .hexadecimal);
pub const SHT_LOSUNW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffffa, .hexadecimal);
pub const SHT_SUNW_move = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffffa, .hexadecimal);
pub const SHT_SUNW_COMDAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffffb, .hexadecimal);
pub const SHT_SUNW_syminfo = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffffc, .hexadecimal);
pub const SHT_GNU_verdef = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffffd, .hexadecimal);
pub const SHT_GNU_verneed = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffffe, .hexadecimal);
pub const SHT_GNU_versym = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6fffffff, .hexadecimal);
pub const SHT_HISUNW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6fffffff, .hexadecimal);
pub const SHT_HIOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6fffffff, .hexadecimal);
pub const SHT_LOPROC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000000, .hexadecimal);
pub const SHT_HIPROC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7fffffff, .hexadecimal);
pub const SHT_LOUSER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal);
pub const SHT_HIUSER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8fffffff, .hexadecimal);
pub const SHF_WRITE = @as(c_int, 1) << @as(c_int, 0);
pub const SHF_ALLOC = @as(c_int, 1) << @as(c_int, 1);
pub const SHF_EXECINSTR = @as(c_int, 1) << @as(c_int, 2);
pub const SHF_MERGE = @as(c_int, 1) << @as(c_int, 4);
pub const SHF_STRINGS = @as(c_int, 1) << @as(c_int, 5);
pub const SHF_INFO_LINK = @as(c_int, 1) << @as(c_int, 6);
pub const SHF_LINK_ORDER = @as(c_int, 1) << @as(c_int, 7);
pub const SHF_OS_NONCONFORMING = @as(c_int, 1) << @as(c_int, 8);
pub const SHF_GROUP = @as(c_int, 1) << @as(c_int, 9);
pub const SHF_TLS = @as(c_int, 1) << @as(c_int, 10);
pub const SHF_COMPRESSED = @as(c_int, 1) << @as(c_int, 11);
pub const SHF_MASKOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0ff00000, .hexadecimal);
pub const SHF_MASKPROC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hexadecimal);
pub const SHF_GNU_RETAIN = @as(c_int, 1) << @as(c_int, 21);
pub const SHF_ORDERED = @as(c_int, 1) << @as(c_int, 30);
pub const SHF_EXCLUDE = @as(c_uint, 1) << @as(c_int, 31);
pub const ELFCOMPRESS_ZLIB = @as(c_int, 1);
pub const ELFCOMPRESS_LOOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x60000000, .hexadecimal);
pub const ELFCOMPRESS_HIOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6fffffff, .hexadecimal);
pub const ELFCOMPRESS_LOPROC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000000, .hexadecimal);
pub const ELFCOMPRESS_HIPROC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7fffffff, .hexadecimal);
pub const GRP_COMDAT = @as(c_int, 0x1);
pub const SYMINFO_BT_SELF = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff, .hexadecimal);
pub const SYMINFO_BT_PARENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xfffe, .hexadecimal);
pub const SYMINFO_BT_LOWRESERVE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00, .hexadecimal);
pub const SYMINFO_FLG_DIRECT = @as(c_int, 0x0001);
pub const SYMINFO_FLG_PASSTHRU = @as(c_int, 0x0002);
pub const SYMINFO_FLG_COPY = @as(c_int, 0x0004);
pub const SYMINFO_FLG_LAZYLOAD = @as(c_int, 0x0008);
pub const SYMINFO_NONE = @as(c_int, 0);
pub const SYMINFO_CURRENT = @as(c_int, 1);
pub const SYMINFO_NUM = @as(c_int, 2);
pub inline fn ELF32_ST_BIND(val: anytype) @TypeOf(@import("std").zig.c_translation.cast(u8, val) >> @as(c_int, 4)) {
    return @import("std").zig.c_translation.cast(u8, val) >> @as(c_int, 4);
}
pub inline fn ELF32_ST_TYPE(val: anytype) @TypeOf(val & @as(c_int, 0xf)) {
    return val & @as(c_int, 0xf);
}
pub inline fn ELF32_ST_INFO(bind: anytype, @"type": anytype) @TypeOf((bind << @as(c_int, 4)) + (@"type" & @as(c_int, 0xf))) {
    return (bind << @as(c_int, 4)) + (@"type" & @as(c_int, 0xf));
}
pub inline fn ELF64_ST_BIND(val: anytype) @TypeOf(ELF32_ST_BIND(val)) {
    return ELF32_ST_BIND(val);
}
pub inline fn ELF64_ST_TYPE(val: anytype) @TypeOf(ELF32_ST_TYPE(val)) {
    return ELF32_ST_TYPE(val);
}
pub inline fn ELF64_ST_INFO(bind: anytype, @"type": anytype) @TypeOf(ELF32_ST_INFO(bind, @"type")) {
    return ELF32_ST_INFO(bind, @"type");
}
pub const STB_LOCAL = @as(c_int, 0);
pub const STB_GLOBAL = @as(c_int, 1);
pub const STB_WEAK = @as(c_int, 2);
pub const STB_NUM = @as(c_int, 3);
pub const STB_LOOS = @as(c_int, 10);
pub const STB_GNU_UNIQUE = @as(c_int, 10);
pub const STB_HIOS = @as(c_int, 12);
pub const STB_LOPROC = @as(c_int, 13);
pub const STB_HIPROC = @as(c_int, 15);
pub const STT_NOTYPE = @as(c_int, 0);
pub const STT_OBJECT = @as(c_int, 1);
pub const STT_FUNC = @as(c_int, 2);
pub const STT_SECTION = @as(c_int, 3);
pub const STT_FILE = @as(c_int, 4);
pub const STT_COMMON = @as(c_int, 5);
pub const STT_TLS = @as(c_int, 6);
pub const STT_NUM = @as(c_int, 7);
pub const STT_LOOS = @as(c_int, 10);
pub const STT_GNU_IFUNC = @as(c_int, 10);
pub const STT_HIOS = @as(c_int, 12);
pub const STT_LOPROC = @as(c_int, 13);
pub const STT_HIPROC = @as(c_int, 15);
pub const STN_UNDEF = @as(c_int, 0);
pub inline fn ELF32_ST_VISIBILITY(o: anytype) @TypeOf(o & @as(c_int, 0x03)) {
    return o & @as(c_int, 0x03);
}
pub inline fn ELF64_ST_VISIBILITY(o: anytype) @TypeOf(ELF32_ST_VISIBILITY(o)) {
    return ELF32_ST_VISIBILITY(o);
}
pub const STV_DEFAULT = @as(c_int, 0);
pub const STV_INTERNAL = @as(c_int, 1);
pub const STV_HIDDEN = @as(c_int, 2);
pub const STV_PROTECTED = @as(c_int, 3);
pub inline fn ELF32_R_SYM(val: anytype) @TypeOf(val >> @as(c_int, 8)) {
    return val >> @as(c_int, 8);
}
pub inline fn ELF32_R_TYPE(val: anytype) @TypeOf(val & @as(c_int, 0xff)) {
    return val & @as(c_int, 0xff);
}
pub inline fn ELF32_R_INFO(sym: anytype, @"type": anytype) @TypeOf((sym << @as(c_int, 8)) + (@"type" & @as(c_int, 0xff))) {
    return (sym << @as(c_int, 8)) + (@"type" & @as(c_int, 0xff));
}
pub inline fn ELF64_R_SYM(i: anytype) @TypeOf(i >> @as(c_int, 32)) {
    return i >> @as(c_int, 32);
}
pub inline fn ELF64_R_TYPE(i: anytype) @TypeOf(i & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal)) {
    return i & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal);
}
pub inline fn ELF64_R_INFO(sym: anytype, @"type": anytype) @TypeOf((@import("std").zig.c_translation.cast(Elf64_Xword, sym) << @as(c_int, 32)) + @"type") {
    return (@import("std").zig.c_translation.cast(Elf64_Xword, sym) << @as(c_int, 32)) + @"type";
}
pub const PN_XNUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff, .hexadecimal);
pub const PT_NULL = @as(c_int, 0);
pub const PT_LOAD = @as(c_int, 1);
pub const PT_DYNAMIC = @as(c_int, 2);
pub const PT_INTERP = @as(c_int, 3);
pub const PT_NOTE = @as(c_int, 4);
pub const PT_SHLIB = @as(c_int, 5);
pub const PT_PHDR = @as(c_int, 6);
pub const PT_TLS = @as(c_int, 7);
pub const PT_NUM = @as(c_int, 8);
pub const PT_LOOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x60000000, .hexadecimal);
pub const PT_GNU_EH_FRAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6474e550, .hexadecimal);
pub const PT_GNU_STACK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6474e551, .hexadecimal);
pub const PT_GNU_RELRO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6474e552, .hexadecimal);
pub const PT_GNU_PROPERTY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6474e553, .hexadecimal);
pub const PT_LOSUNW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffffa, .hexadecimal);
pub const PT_SUNWBSS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffffa, .hexadecimal);
pub const PT_SUNWSTACK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffffb, .hexadecimal);
pub const PT_HISUNW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6fffffff, .hexadecimal);
pub const PT_HIOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6fffffff, .hexadecimal);
pub const PT_LOPROC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000000, .hexadecimal);
pub const PT_HIPROC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7fffffff, .hexadecimal);
pub const PF_X = @as(c_int, 1) << @as(c_int, 0);
pub const PF_W = @as(c_int, 1) << @as(c_int, 1);
pub const PF_R = @as(c_int, 1) << @as(c_int, 2);
pub const PF_MASKOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0ff00000, .hexadecimal);
pub const PF_MASKPROC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hexadecimal);
pub const NT_PRSTATUS = @as(c_int, 1);
pub const NT_PRFPREG = @as(c_int, 2);
pub const NT_FPREGSET = @as(c_int, 2);
pub const NT_PRPSINFO = @as(c_int, 3);
pub const NT_PRXREG = @as(c_int, 4);
pub const NT_TASKSTRUCT = @as(c_int, 4);
pub const NT_PLATFORM = @as(c_int, 5);
pub const NT_AUXV = @as(c_int, 6);
pub const NT_GWINDOWS = @as(c_int, 7);
pub const NT_ASRS = @as(c_int, 8);
pub const NT_PSTATUS = @as(c_int, 10);
pub const NT_PSINFO = @as(c_int, 13);
pub const NT_PRCRED = @as(c_int, 14);
pub const NT_UTSNAME = @as(c_int, 15);
pub const NT_LWPSTATUS = @as(c_int, 16);
pub const NT_LWPSINFO = @as(c_int, 17);
pub const NT_PRFPXREG = @as(c_int, 20);
pub const NT_SIGINFO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x53494749, .hexadecimal);
pub const NT_FILE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x46494c45, .hexadecimal);
pub const NT_PRXFPREG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x46e62b7f, .hexadecimal);
pub const NT_PPC_VMX = @as(c_int, 0x100);
pub const NT_PPC_SPE = @as(c_int, 0x101);
pub const NT_PPC_VSX = @as(c_int, 0x102);
pub const NT_PPC_TAR = @as(c_int, 0x103);
pub const NT_PPC_PPR = @as(c_int, 0x104);
pub const NT_PPC_DSCR = @as(c_int, 0x105);
pub const NT_PPC_EBB = @as(c_int, 0x106);
pub const NT_PPC_PMU = @as(c_int, 0x107);
pub const NT_PPC_TM_CGPR = @as(c_int, 0x108);
pub const NT_PPC_TM_CFPR = @as(c_int, 0x109);
pub const NT_PPC_TM_CVMX = @as(c_int, 0x10a);
pub const NT_PPC_TM_CVSX = @as(c_int, 0x10b);
pub const NT_PPC_TM_SPR = @as(c_int, 0x10c);
pub const NT_PPC_TM_CTAR = @as(c_int, 0x10d);
pub const NT_PPC_TM_CPPR = @as(c_int, 0x10e);
pub const NT_PPC_TM_CDSCR = @as(c_int, 0x10f);
pub const NT_PPC_PKEY = @as(c_int, 0x110);
pub const NT_386_TLS = @as(c_int, 0x200);
pub const NT_386_IOPERM = @as(c_int, 0x201);
pub const NT_X86_XSTATE = @as(c_int, 0x202);
pub const NT_S390_HIGH_GPRS = @as(c_int, 0x300);
pub const NT_S390_TIMER = @as(c_int, 0x301);
pub const NT_S390_TODCMP = @as(c_int, 0x302);
pub const NT_S390_TODPREG = @as(c_int, 0x303);
pub const NT_S390_CTRS = @as(c_int, 0x304);
pub const NT_S390_PREFIX = @as(c_int, 0x305);
pub const NT_S390_LAST_BREAK = @as(c_int, 0x306);
pub const NT_S390_SYSTEM_CALL = @as(c_int, 0x307);
pub const NT_S390_TDB = @as(c_int, 0x308);
pub const NT_S390_VXRS_LOW = @as(c_int, 0x309);
pub const NT_S390_VXRS_HIGH = @as(c_int, 0x30a);
pub const NT_S390_GS_CB = @as(c_int, 0x30b);
pub const NT_S390_GS_BC = @as(c_int, 0x30c);
pub const NT_S390_RI_CB = @as(c_int, 0x30d);
pub const NT_ARM_VFP = @as(c_int, 0x400);
pub const NT_ARM_TLS = @as(c_int, 0x401);
pub const NT_ARM_HW_BREAK = @as(c_int, 0x402);
pub const NT_ARM_HW_WATCH = @as(c_int, 0x403);
pub const NT_ARM_SYSTEM_CALL = @as(c_int, 0x404);
pub const NT_ARM_SVE = @as(c_int, 0x405);
pub const NT_ARM_PAC_MASK = @as(c_int, 0x406);
pub const NT_ARM_PACA_KEYS = @as(c_int, 0x407);
pub const NT_ARM_PACG_KEYS = @as(c_int, 0x408);
pub const NT_ARM_TAGGED_ADDR_CTRL = @as(c_int, 0x409);
pub const NT_ARM_PAC_ENABLED_KEYS = @as(c_int, 0x40a);
pub const NT_VMCOREDD = @as(c_int, 0x700);
pub const NT_MIPS_DSP = @as(c_int, 0x800);
pub const NT_MIPS_FP_MODE = @as(c_int, 0x801);
pub const NT_MIPS_MSA = @as(c_int, 0x802);
pub const NT_VERSION = @as(c_int, 1);
pub const DT_NULL = @as(c_int, 0);
pub const DT_NEEDED = @as(c_int, 1);
pub const DT_PLTRELSZ = @as(c_int, 2);
pub const DT_PLTGOT = @as(c_int, 3);
pub const DT_HASH = @as(c_int, 4);
pub const DT_STRTAB = @as(c_int, 5);
pub const DT_SYMTAB = @as(c_int, 6);
pub const DT_RELA = @as(c_int, 7);
pub const DT_RELASZ = @as(c_int, 8);
pub const DT_RELAENT = @as(c_int, 9);
pub const DT_STRSZ = @as(c_int, 10);
pub const DT_SYMENT = @as(c_int, 11);
pub const DT_INIT = @as(c_int, 12);
pub const DT_FINI = @as(c_int, 13);
pub const DT_SONAME = @as(c_int, 14);
pub const DT_RPATH = @as(c_int, 15);
pub const DT_SYMBOLIC = @as(c_int, 16);
pub const DT_REL = @as(c_int, 17);
pub const DT_RELSZ = @as(c_int, 18);
pub const DT_RELENT = @as(c_int, 19);
pub const DT_PLTREL = @as(c_int, 20);
pub const DT_DEBUG = @as(c_int, 21);
pub const DT_TEXTREL = @as(c_int, 22);
pub const DT_JMPREL = @as(c_int, 23);
pub const DT_BIND_NOW = @as(c_int, 24);
pub const DT_INIT_ARRAY = @as(c_int, 25);
pub const DT_FINI_ARRAY = @as(c_int, 26);
pub const DT_INIT_ARRAYSZ = @as(c_int, 27);
pub const DT_FINI_ARRAYSZ = @as(c_int, 28);
pub const DT_RUNPATH = @as(c_int, 29);
pub const DT_FLAGS = @as(c_int, 30);
pub const DT_ENCODING = @as(c_int, 32);
pub const DT_PREINIT_ARRAY = @as(c_int, 32);
pub const DT_PREINIT_ARRAYSZ = @as(c_int, 33);
pub const DT_SYMTAB_SHNDX = @as(c_int, 34);
pub const DT_NUM = @as(c_int, 35);
pub const DT_LOOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6000000d, .hexadecimal);
pub const DT_HIOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffff000, .hexadecimal);
pub const DT_LOPROC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000000, .hexadecimal);
pub const DT_HIPROC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7fffffff, .hexadecimal);
pub const DT_PROCNUM = DT_MIPS_NUM;
pub const DT_VALRNGLO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffd00, .hexadecimal);
pub const DT_GNU_PRELINKED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffdf5, .hexadecimal);
pub const DT_GNU_CONFLICTSZ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffdf6, .hexadecimal);
pub const DT_GNU_LIBLISTSZ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffdf7, .hexadecimal);
pub const DT_CHECKSUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffdf8, .hexadecimal);
pub const DT_PLTPADSZ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffdf9, .hexadecimal);
pub const DT_MOVEENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffdfa, .hexadecimal);
pub const DT_MOVESZ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffdfb, .hexadecimal);
pub const DT_FEATURE_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffdfc, .hexadecimal);
pub const DT_POSFLAG_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffdfd, .hexadecimal);
pub const DT_SYMINSZ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffdfe, .hexadecimal);
pub const DT_SYMINENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffdff, .hexadecimal);
pub const DT_VALRNGHI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffdff, .hexadecimal);
pub inline fn DT_VALTAGIDX(tag: anytype) @TypeOf(DT_VALRNGHI - tag) {
    return DT_VALRNGHI - tag;
}
pub const DT_VALNUM = @as(c_int, 12);
pub const DT_ADDRRNGLO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffe00, .hexadecimal);
pub const DT_GNU_HASH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffef5, .hexadecimal);
pub const DT_TLSDESC_PLT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffef6, .hexadecimal);
pub const DT_TLSDESC_GOT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffef7, .hexadecimal);
pub const DT_GNU_CONFLICT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffef8, .hexadecimal);
pub const DT_GNU_LIBLIST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffef9, .hexadecimal);
pub const DT_CONFIG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffefa, .hexadecimal);
pub const DT_DEPAUDIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffefb, .hexadecimal);
pub const DT_AUDIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffefc, .hexadecimal);
pub const DT_PLTPAD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffefd, .hexadecimal);
pub const DT_MOVETAB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffefe, .hexadecimal);
pub const DT_SYMINFO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffeff, .hexadecimal);
pub const DT_ADDRRNGHI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffeff, .hexadecimal);
pub inline fn DT_ADDRTAGIDX(tag: anytype) @TypeOf(DT_ADDRRNGHI - tag) {
    return DT_ADDRRNGHI - tag;
}
pub const DT_ADDRNUM = @as(c_int, 11);
pub const DT_VERSYM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffff0, .hexadecimal);
pub const DT_RELACOUNT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffff9, .hexadecimal);
pub const DT_RELCOUNT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffffa, .hexadecimal);
pub const DT_FLAGS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffffb, .hexadecimal);
pub const DT_VERDEF = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffffc, .hexadecimal);
pub const DT_VERDEFNUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffffd, .hexadecimal);
pub const DT_VERNEED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6ffffffe, .hexadecimal);
pub const DT_VERNEEDNUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6fffffff, .hexadecimal);
pub inline fn DT_VERSIONTAGIDX(tag: anytype) @TypeOf(DT_VERNEEDNUM - tag) {
    return DT_VERNEEDNUM - tag;
}
pub const DT_VERSIONTAGNUM = @as(c_int, 16);
pub const DT_AUXILIARY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7ffffffd, .hexadecimal);
pub const DT_FILTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7fffffff, .hexadecimal);
pub inline fn DT_EXTRATAGIDX(tag: anytype) @TypeOf(@import("std").zig.c_translation.cast(Elf32_Word, -((@import("std").zig.c_translation.cast(Elf32_Sword, tag) << @as(c_int, 1)) >> @as(c_int, 1))) - @as(c_int, 1)) {
    return @import("std").zig.c_translation.cast(Elf32_Word, -((@import("std").zig.c_translation.cast(Elf32_Sword, tag) << @as(c_int, 1)) >> @as(c_int, 1))) - @as(c_int, 1);
}
pub const DT_EXTRANUM = @as(c_int, 3);
pub const DF_ORIGIN = @as(c_int, 0x00000001);
pub const DF_SYMBOLIC = @as(c_int, 0x00000002);
pub const DF_TEXTREL = @as(c_int, 0x00000004);
pub const DF_BIND_NOW = @as(c_int, 0x00000008);
pub const DF_STATIC_TLS = @as(c_int, 0x00000010);
pub const DF_1_NOW = @as(c_int, 0x00000001);
pub const DF_1_GLOBAL = @as(c_int, 0x00000002);
pub const DF_1_GROUP = @as(c_int, 0x00000004);
pub const DF_1_NODELETE = @as(c_int, 0x00000008);
pub const DF_1_LOADFLTR = @as(c_int, 0x00000010);
pub const DF_1_INITFIRST = @as(c_int, 0x00000020);
pub const DF_1_NOOPEN = @as(c_int, 0x00000040);
pub const DF_1_ORIGIN = @as(c_int, 0x00000080);
pub const DF_1_DIRECT = @as(c_int, 0x00000100);
pub const DF_1_TRANS = @as(c_int, 0x00000200);
pub const DF_1_INTERPOSE = @as(c_int, 0x00000400);
pub const DF_1_NODEFLIB = @as(c_int, 0x00000800);
pub const DF_1_NODUMP = @as(c_int, 0x00001000);
pub const DF_1_CONFALT = @as(c_int, 0x00002000);
pub const DF_1_ENDFILTEE = @as(c_int, 0x00004000);
pub const DF_1_DISPRELDNE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal);
pub const DF_1_DISPRELPND = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal);
pub const DF_1_NODIRECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal);
pub const DF_1_IGNMULDEF = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal);
pub const DF_1_NOKSYMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal);
pub const DF_1_NOHDR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal);
pub const DF_1_EDITED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal);
pub const DF_1_NORELOC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal);
pub const DF_1_SYMINTPOSE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal);
pub const DF_1_GLOBAUDIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal);
pub const DF_1_SINGLETON = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal);
pub const DF_1_STUB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal);
pub const DF_1_PIE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal);
pub const DF_1_KMOD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal);
pub const DF_1_WEAKFILTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const DF_1_NOCOMMON = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal);
pub const DTF_1_PARINIT = @as(c_int, 0x00000001);
pub const DTF_1_CONFEXP = @as(c_int, 0x00000002);
pub const DF_P1_LAZYLOAD = @as(c_int, 0x00000001);
pub const DF_P1_GROUPPERM = @as(c_int, 0x00000002);
pub const VER_DEF_NONE = @as(c_int, 0);
pub const VER_DEF_CURRENT = @as(c_int, 1);
pub const VER_DEF_NUM = @as(c_int, 2);
pub const VER_FLG_BASE = @as(c_int, 0x1);
pub const VER_FLG_WEAK = @as(c_int, 0x2);
pub const VER_NDX_LOCAL = @as(c_int, 0);
pub const VER_NDX_GLOBAL = @as(c_int, 1);
pub const VER_NDX_LORESERVE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00, .hexadecimal);
pub const VER_NDX_ELIMINATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff01, .hexadecimal);
pub const VER_NEED_NONE = @as(c_int, 0);
pub const VER_NEED_CURRENT = @as(c_int, 1);
pub const VER_NEED_NUM = @as(c_int, 2);
pub const AT_NULL = @as(c_int, 0);
pub const AT_IGNORE = @as(c_int, 1);
pub const AT_EXECFD = @as(c_int, 2);
pub const AT_PHDR = @as(c_int, 3);
pub const AT_PHENT = @as(c_int, 4);
pub const AT_PHNUM = @as(c_int, 5);
pub const AT_PAGESZ = @as(c_int, 6);
pub const AT_BASE = @as(c_int, 7);
pub const AT_FLAGS = @as(c_int, 8);
pub const AT_ENTRY = @as(c_int, 9);
pub const AT_NOTELF = @as(c_int, 10);
pub const AT_UID = @as(c_int, 11);
pub const AT_EUID = @as(c_int, 12);
pub const AT_GID = @as(c_int, 13);
pub const AT_EGID = @as(c_int, 14);
pub const AT_CLKTCK = @as(c_int, 17);
pub const AT_PLATFORM = @as(c_int, 15);
pub const AT_HWCAP = @as(c_int, 16);
pub const AT_FPUCW = @as(c_int, 18);
pub const AT_DCACHEBSIZE = @as(c_int, 19);
pub const AT_ICACHEBSIZE = @as(c_int, 20);
pub const AT_UCACHEBSIZE = @as(c_int, 21);
pub const AT_IGNOREPPC = @as(c_int, 22);
pub const AT_SECURE = @as(c_int, 23);
pub const AT_BASE_PLATFORM = @as(c_int, 24);
pub const AT_RANDOM = @as(c_int, 25);
pub const AT_HWCAP2 = @as(c_int, 26);
pub const AT_EXECFN = @as(c_int, 31);
pub const AT_SYSINFO = @as(c_int, 32);
pub const AT_SYSINFO_EHDR = @as(c_int, 33);
pub const AT_L1I_CACHESHAPE = @as(c_int, 34);
pub const AT_L1D_CACHESHAPE = @as(c_int, 35);
pub const AT_L2_CACHESHAPE = @as(c_int, 36);
pub const AT_L3_CACHESHAPE = @as(c_int, 37);
pub const AT_L1I_CACHESIZE = @as(c_int, 40);
pub const AT_L1I_CACHEGEOMETRY = @as(c_int, 41);
pub const AT_L1D_CACHESIZE = @as(c_int, 42);
pub const AT_L1D_CACHEGEOMETRY = @as(c_int, 43);
pub const AT_L2_CACHESIZE = @as(c_int, 44);
pub const AT_L2_CACHEGEOMETRY = @as(c_int, 45);
pub const AT_L3_CACHESIZE = @as(c_int, 46);
pub const AT_L3_CACHEGEOMETRY = @as(c_int, 47);
pub const AT_MINSIGSTKSZ = @as(c_int, 51);
pub const ELF_NOTE_SOLARIS = "SUNW Solaris";
pub const ELF_NOTE_GNU = "GNU";
pub const ELF_NOTE_PAGESIZE_HINT = @as(c_int, 1);
pub const NT_GNU_ABI_TAG = @as(c_int, 1);
pub const ELF_NOTE_ABI = NT_GNU_ABI_TAG;
pub const ELF_NOTE_OS_LINUX = @as(c_int, 0);
pub const ELF_NOTE_OS_GNU = @as(c_int, 1);
pub const ELF_NOTE_OS_SOLARIS2 = @as(c_int, 2);
pub const ELF_NOTE_OS_FREEBSD = @as(c_int, 3);
pub const NT_GNU_HWCAP = @as(c_int, 2);
pub const NT_GNU_BUILD_ID = @as(c_int, 3);
pub const NT_GNU_GOLD_VERSION = @as(c_int, 4);
pub const NT_GNU_PROPERTY_TYPE_0 = @as(c_int, 5);
pub const NOTE_GNU_PROPERTY_SECTION_NAME = ".note.gnu.property";
pub const GNU_PROPERTY_STACK_SIZE = @as(c_int, 1);
pub const GNU_PROPERTY_NO_COPY_ON_PROTECTED = @as(c_int, 2);
pub const GNU_PROPERTY_LOPROC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xc0000000, .hexadecimal);
pub const GNU_PROPERTY_HIPROC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xdfffffff, .hexadecimal);
pub const GNU_PROPERTY_LOUSER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xe0000000, .hexadecimal);
pub const GNU_PROPERTY_HIUSER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal);
pub const GNU_PROPERTY_AARCH64_FEATURE_1_AND = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xc0000000, .hexadecimal);
pub const GNU_PROPERTY_AARCH64_FEATURE_1_BTI = @as(c_uint, 1) << @as(c_int, 0);
pub const GNU_PROPERTY_AARCH64_FEATURE_1_PAC = @as(c_uint, 1) << @as(c_int, 1);
pub const GNU_PROPERTY_X86_ISA_1_USED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xc0010002, .hexadecimal);
pub const GNU_PROPERTY_X86_ISA_1_NEEDED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xc0008002, .hexadecimal);
pub const GNU_PROPERTY_X86_FEATURE_1_AND = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xc0000002, .hexadecimal);
pub const GNU_PROPERTY_X86_ISA_1_BASELINE = @as(c_uint, 1) << @as(c_int, 0);
pub const GNU_PROPERTY_X86_ISA_1_V2 = @as(c_uint, 1) << @as(c_int, 1);
pub const GNU_PROPERTY_X86_ISA_1_V3 = @as(c_uint, 1) << @as(c_int, 2);
pub const GNU_PROPERTY_X86_ISA_1_V4 = @as(c_uint, 1) << @as(c_int, 3);
pub const GNU_PROPERTY_X86_FEATURE_1_IBT = @as(c_uint, 1) << @as(c_int, 0);
pub const GNU_PROPERTY_X86_FEATURE_1_SHSTK = @as(c_uint, 1) << @as(c_int, 1);
pub inline fn ELF32_M_SYM(info: anytype) @TypeOf(info >> @as(c_int, 8)) {
    return info >> @as(c_int, 8);
}
pub inline fn ELF32_M_SIZE(info: anytype) u8 {
    return @import("std").zig.c_translation.cast(u8, info);
}
pub inline fn ELF32_M_INFO(sym: anytype, size: anytype) @TypeOf((sym << @as(c_int, 8)) + @import("std").zig.c_translation.cast(u8, size)) {
    return (sym << @as(c_int, 8)) + @import("std").zig.c_translation.cast(u8, size);
}
pub inline fn ELF64_M_SYM(info: anytype) @TypeOf(ELF32_M_SYM(info)) {
    return ELF32_M_SYM(info);
}
pub inline fn ELF64_M_SIZE(info: anytype) @TypeOf(ELF32_M_SIZE(info)) {
    return ELF32_M_SIZE(info);
}
pub inline fn ELF64_M_INFO(sym: anytype, size: anytype) @TypeOf(ELF32_M_INFO(sym, size)) {
    return ELF32_M_INFO(sym, size);
}
pub const EF_CPU32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00810000, .hexadecimal);
pub const R_68K_NONE = @as(c_int, 0);
pub const R_68K_32 = @as(c_int, 1);
pub const R_68K_16 = @as(c_int, 2);
pub const R_68K_8 = @as(c_int, 3);
pub const R_68K_PC32 = @as(c_int, 4);
pub const R_68K_PC16 = @as(c_int, 5);
pub const R_68K_PC8 = @as(c_int, 6);
pub const R_68K_GOT32 = @as(c_int, 7);
pub const R_68K_GOT16 = @as(c_int, 8);
pub const R_68K_GOT8 = @as(c_int, 9);
pub const R_68K_GOT32O = @as(c_int, 10);
pub const R_68K_GOT16O = @as(c_int, 11);
pub const R_68K_GOT8O = @as(c_int, 12);
pub const R_68K_PLT32 = @as(c_int, 13);
pub const R_68K_PLT16 = @as(c_int, 14);
pub const R_68K_PLT8 = @as(c_int, 15);
pub const R_68K_PLT32O = @as(c_int, 16);
pub const R_68K_PLT16O = @as(c_int, 17);
pub const R_68K_PLT8O = @as(c_int, 18);
pub const R_68K_COPY = @as(c_int, 19);
pub const R_68K_GLOB_DAT = @as(c_int, 20);
pub const R_68K_JMP_SLOT = @as(c_int, 21);
pub const R_68K_RELATIVE = @as(c_int, 22);
pub const R_68K_TLS_GD32 = @as(c_int, 25);
pub const R_68K_TLS_GD16 = @as(c_int, 26);
pub const R_68K_TLS_GD8 = @as(c_int, 27);
pub const R_68K_TLS_LDM32 = @as(c_int, 28);
pub const R_68K_TLS_LDM16 = @as(c_int, 29);
pub const R_68K_TLS_LDM8 = @as(c_int, 30);
pub const R_68K_TLS_LDO32 = @as(c_int, 31);
pub const R_68K_TLS_LDO16 = @as(c_int, 32);
pub const R_68K_TLS_LDO8 = @as(c_int, 33);
pub const R_68K_TLS_IE32 = @as(c_int, 34);
pub const R_68K_TLS_IE16 = @as(c_int, 35);
pub const R_68K_TLS_IE8 = @as(c_int, 36);
pub const R_68K_TLS_LE32 = @as(c_int, 37);
pub const R_68K_TLS_LE16 = @as(c_int, 38);
pub const R_68K_TLS_LE8 = @as(c_int, 39);
pub const R_68K_TLS_DTPMOD32 = @as(c_int, 40);
pub const R_68K_TLS_DTPREL32 = @as(c_int, 41);
pub const R_68K_TLS_TPREL32 = @as(c_int, 42);
pub const R_68K_NUM = @as(c_int, 43);
pub const R_386_NONE = @as(c_int, 0);
pub const R_386_32 = @as(c_int, 1);
pub const R_386_PC32 = @as(c_int, 2);
pub const R_386_GOT32 = @as(c_int, 3);
pub const R_386_PLT32 = @as(c_int, 4);
pub const R_386_COPY = @as(c_int, 5);
pub const R_386_GLOB_DAT = @as(c_int, 6);
pub const R_386_JMP_SLOT = @as(c_int, 7);
pub const R_386_RELATIVE = @as(c_int, 8);
pub const R_386_GOTOFF = @as(c_int, 9);
pub const R_386_GOTPC = @as(c_int, 10);
pub const R_386_32PLT = @as(c_int, 11);
pub const R_386_TLS_TPOFF = @as(c_int, 14);
pub const R_386_TLS_IE = @as(c_int, 15);
pub const R_386_TLS_GOTIE = @as(c_int, 16);
pub const R_386_TLS_LE = @as(c_int, 17);
pub const R_386_TLS_GD = @as(c_int, 18);
pub const R_386_TLS_LDM = @as(c_int, 19);
pub const R_386_16 = @as(c_int, 20);
pub const R_386_PC16 = @as(c_int, 21);
pub const R_386_8 = @as(c_int, 22);
pub const R_386_PC8 = @as(c_int, 23);
pub const R_386_TLS_GD_32 = @as(c_int, 24);
pub const R_386_TLS_GD_PUSH = @as(c_int, 25);
pub const R_386_TLS_GD_CALL = @as(c_int, 26);
pub const R_386_TLS_GD_POP = @as(c_int, 27);
pub const R_386_TLS_LDM_32 = @as(c_int, 28);
pub const R_386_TLS_LDM_PUSH = @as(c_int, 29);
pub const R_386_TLS_LDM_CALL = @as(c_int, 30);
pub const R_386_TLS_LDM_POP = @as(c_int, 31);
pub const R_386_TLS_LDO_32 = @as(c_int, 32);
pub const R_386_TLS_IE_32 = @as(c_int, 33);
pub const R_386_TLS_LE_32 = @as(c_int, 34);
pub const R_386_TLS_DTPMOD32 = @as(c_int, 35);
pub const R_386_TLS_DTPOFF32 = @as(c_int, 36);
pub const R_386_TLS_TPOFF32 = @as(c_int, 37);
pub const R_386_SIZE32 = @as(c_int, 38);
pub const R_386_TLS_GOTDESC = @as(c_int, 39);
pub const R_386_TLS_DESC_CALL = @as(c_int, 40);
pub const R_386_TLS_DESC = @as(c_int, 41);
pub const R_386_IRELATIVE = @as(c_int, 42);
pub const R_386_GOT32X = @as(c_int, 43);
pub const R_386_NUM = @as(c_int, 44);
pub const STT_SPARC_REGISTER = @as(c_int, 13);
pub const EF_SPARCV9_MM = @as(c_int, 3);
pub const EF_SPARCV9_TSO = @as(c_int, 0);
pub const EF_SPARCV9_PSO = @as(c_int, 1);
pub const EF_SPARCV9_RMO = @as(c_int, 2);
pub const EF_SPARC_LEDATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800000, .hexadecimal);
pub const EF_SPARC_EXT_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFF00, .hexadecimal);
pub const EF_SPARC_32PLUS = @as(c_int, 0x000100);
pub const EF_SPARC_SUN_US1 = @as(c_int, 0x000200);
pub const EF_SPARC_HAL_R1 = @as(c_int, 0x000400);
pub const EF_SPARC_SUN_US3 = @as(c_int, 0x000800);
pub const R_SPARC_NONE = @as(c_int, 0);
pub const R_SPARC_8 = @as(c_int, 1);
pub const R_SPARC_16 = @as(c_int, 2);
pub const R_SPARC_32 = @as(c_int, 3);
pub const R_SPARC_DISP8 = @as(c_int, 4);
pub const R_SPARC_DISP16 = @as(c_int, 5);
pub const R_SPARC_DISP32 = @as(c_int, 6);
pub const R_SPARC_WDISP30 = @as(c_int, 7);
pub const R_SPARC_WDISP22 = @as(c_int, 8);
pub const R_SPARC_HI22 = @as(c_int, 9);
pub const R_SPARC_22 = @as(c_int, 10);
pub const R_SPARC_13 = @as(c_int, 11);
pub const R_SPARC_LO10 = @as(c_int, 12);
pub const R_SPARC_GOT10 = @as(c_int, 13);
pub const R_SPARC_GOT13 = @as(c_int, 14);
pub const R_SPARC_GOT22 = @as(c_int, 15);
pub const R_SPARC_PC10 = @as(c_int, 16);
pub const R_SPARC_PC22 = @as(c_int, 17);
pub const R_SPARC_WPLT30 = @as(c_int, 18);
pub const R_SPARC_COPY = @as(c_int, 19);
pub const R_SPARC_GLOB_DAT = @as(c_int, 20);
pub const R_SPARC_JMP_SLOT = @as(c_int, 21);
pub const R_SPARC_RELATIVE = @as(c_int, 22);
pub const R_SPARC_UA32 = @as(c_int, 23);
pub const R_SPARC_PLT32 = @as(c_int, 24);
pub const R_SPARC_HIPLT22 = @as(c_int, 25);
pub const R_SPARC_LOPLT10 = @as(c_int, 26);
pub const R_SPARC_PCPLT32 = @as(c_int, 27);
pub const R_SPARC_PCPLT22 = @as(c_int, 28);
pub const R_SPARC_PCPLT10 = @as(c_int, 29);
pub const R_SPARC_10 = @as(c_int, 30);
pub const R_SPARC_11 = @as(c_int, 31);
pub const R_SPARC_64 = @as(c_int, 32);
pub const R_SPARC_OLO10 = @as(c_int, 33);
pub const R_SPARC_HH22 = @as(c_int, 34);
pub const R_SPARC_HM10 = @as(c_int, 35);
pub const R_SPARC_LM22 = @as(c_int, 36);
pub const R_SPARC_PC_HH22 = @as(c_int, 37);
pub const R_SPARC_PC_HM10 = @as(c_int, 38);
pub const R_SPARC_PC_LM22 = @as(c_int, 39);
pub const R_SPARC_WDISP16 = @as(c_int, 40);
pub const R_SPARC_WDISP19 = @as(c_int, 41);
pub const R_SPARC_GLOB_JMP = @as(c_int, 42);
pub const R_SPARC_7 = @as(c_int, 43);
pub const R_SPARC_5 = @as(c_int, 44);
pub const R_SPARC_6 = @as(c_int, 45);
pub const R_SPARC_DISP64 = @as(c_int, 46);
pub const R_SPARC_PLT64 = @as(c_int, 47);
pub const R_SPARC_HIX22 = @as(c_int, 48);
pub const R_SPARC_LOX10 = @as(c_int, 49);
pub const R_SPARC_H44 = @as(c_int, 50);
pub const R_SPARC_M44 = @as(c_int, 51);
pub const R_SPARC_L44 = @as(c_int, 52);
pub const R_SPARC_REGISTER = @as(c_int, 53);
pub const R_SPARC_UA64 = @as(c_int, 54);
pub const R_SPARC_UA16 = @as(c_int, 55);
pub const R_SPARC_TLS_GD_HI22 = @as(c_int, 56);
pub const R_SPARC_TLS_GD_LO10 = @as(c_int, 57);
pub const R_SPARC_TLS_GD_ADD = @as(c_int, 58);
pub const R_SPARC_TLS_GD_CALL = @as(c_int, 59);
pub const R_SPARC_TLS_LDM_HI22 = @as(c_int, 60);
pub const R_SPARC_TLS_LDM_LO10 = @as(c_int, 61);
pub const R_SPARC_TLS_LDM_ADD = @as(c_int, 62);
pub const R_SPARC_TLS_LDM_CALL = @as(c_int, 63);
pub const R_SPARC_TLS_LDO_HIX22 = @as(c_int, 64);
pub const R_SPARC_TLS_LDO_LOX10 = @as(c_int, 65);
pub const R_SPARC_TLS_LDO_ADD = @as(c_int, 66);
pub const R_SPARC_TLS_IE_HI22 = @as(c_int, 67);
pub const R_SPARC_TLS_IE_LO10 = @as(c_int, 68);
pub const R_SPARC_TLS_IE_LD = @as(c_int, 69);
pub const R_SPARC_TLS_IE_LDX = @as(c_int, 70);
pub const R_SPARC_TLS_IE_ADD = @as(c_int, 71);
pub const R_SPARC_TLS_LE_HIX22 = @as(c_int, 72);
pub const R_SPARC_TLS_LE_LOX10 = @as(c_int, 73);
pub const R_SPARC_TLS_DTPMOD32 = @as(c_int, 74);
pub const R_SPARC_TLS_DTPMOD64 = @as(c_int, 75);
pub const R_SPARC_TLS_DTPOFF32 = @as(c_int, 76);
pub const R_SPARC_TLS_DTPOFF64 = @as(c_int, 77);
pub const R_SPARC_TLS_TPOFF32 = @as(c_int, 78);
pub const R_SPARC_TLS_TPOFF64 = @as(c_int, 79);
pub const R_SPARC_GOTDATA_HIX22 = @as(c_int, 80);
pub const R_SPARC_GOTDATA_LOX10 = @as(c_int, 81);
pub const R_SPARC_GOTDATA_OP_HIX22 = @as(c_int, 82);
pub const R_SPARC_GOTDATA_OP_LOX10 = @as(c_int, 83);
pub const R_SPARC_GOTDATA_OP = @as(c_int, 84);
pub const R_SPARC_H34 = @as(c_int, 85);
pub const R_SPARC_SIZE32 = @as(c_int, 86);
pub const R_SPARC_SIZE64 = @as(c_int, 87);
pub const R_SPARC_WDISP10 = @as(c_int, 88);
pub const R_SPARC_JMP_IREL = @as(c_int, 248);
pub const R_SPARC_IRELATIVE = @as(c_int, 249);
pub const R_SPARC_GNU_VTINHERIT = @as(c_int, 250);
pub const R_SPARC_GNU_VTENTRY = @as(c_int, 251);
pub const R_SPARC_REV32 = @as(c_int, 252);
pub const R_SPARC_NUM = @as(c_int, 253);
pub const DT_SPARC_REGISTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000001, .hexadecimal);
pub const DT_SPARC_NUM = @as(c_int, 2);
pub const EF_MIPS_NOREORDER = @as(c_int, 1);
pub const EF_MIPS_PIC = @as(c_int, 2);
pub const EF_MIPS_CPIC = @as(c_int, 4);
pub const EF_MIPS_XGOT = @as(c_int, 8);
pub const EF_MIPS_64BIT_WHIRL = @as(c_int, 16);
pub const EF_MIPS_ABI2 = @as(c_int, 32);
pub const EF_MIPS_ABI_ON32 = @as(c_int, 64);
pub const EF_MIPS_FP64 = @as(c_int, 512);
pub const EF_MIPS_NAN2008 = @as(c_int, 1024);
pub const EF_MIPS_ARCH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hexadecimal);
pub const EF_MIPS_ARCH_1 = @as(c_int, 0x00000000);
pub const EF_MIPS_ARCH_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal);
pub const EF_MIPS_ARCH_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const EF_MIPS_ARCH_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal);
pub const EF_MIPS_ARCH_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal);
pub const EF_MIPS_ARCH_32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x50000000, .hexadecimal);
pub const EF_MIPS_ARCH_64 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x60000000, .hexadecimal);
pub const EF_MIPS_ARCH_32R2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000000, .hexadecimal);
pub const EF_MIPS_ARCH_64R2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal);
pub const E_MIPS_ARCH_1 = EF_MIPS_ARCH_1;
pub const E_MIPS_ARCH_2 = EF_MIPS_ARCH_2;
pub const E_MIPS_ARCH_3 = EF_MIPS_ARCH_3;
pub const E_MIPS_ARCH_4 = EF_MIPS_ARCH_4;
pub const E_MIPS_ARCH_5 = EF_MIPS_ARCH_5;
pub const E_MIPS_ARCH_32 = EF_MIPS_ARCH_32;
pub const E_MIPS_ARCH_64 = EF_MIPS_ARCH_64;
pub const SHN_MIPS_ACOMMON = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00, .hexadecimal);
pub const SHN_MIPS_TEXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff01, .hexadecimal);
pub const SHN_MIPS_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff02, .hexadecimal);
pub const SHN_MIPS_SCOMMON = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff03, .hexadecimal);
pub const SHN_MIPS_SUNDEFINED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff04, .hexadecimal);
pub const SHT_MIPS_LIBLIST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000000, .hexadecimal);
pub const SHT_MIPS_MSYM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000001, .hexadecimal);
pub const SHT_MIPS_CONFLICT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000002, .hexadecimal);
pub const SHT_MIPS_GPTAB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000003, .hexadecimal);
pub const SHT_MIPS_UCODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000004, .hexadecimal);
pub const SHT_MIPS_DEBUG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000005, .hexadecimal);
pub const SHT_MIPS_REGINFO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000006, .hexadecimal);
pub const SHT_MIPS_PACKAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000007, .hexadecimal);
pub const SHT_MIPS_PACKSYM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000008, .hexadecimal);
pub const SHT_MIPS_RELD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000009, .hexadecimal);
pub const SHT_MIPS_IFACE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7000000b, .hexadecimal);
pub const SHT_MIPS_CONTENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7000000c, .hexadecimal);
pub const SHT_MIPS_OPTIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7000000d, .hexadecimal);
pub const SHT_MIPS_SHDR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000010, .hexadecimal);
pub const SHT_MIPS_FDESC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000011, .hexadecimal);
pub const SHT_MIPS_EXTSYM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000012, .hexadecimal);
pub const SHT_MIPS_DENSE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000013, .hexadecimal);
pub const SHT_MIPS_PDESC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000014, .hexadecimal);
pub const SHT_MIPS_LOCSYM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000015, .hexadecimal);
pub const SHT_MIPS_AUXSYM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000016, .hexadecimal);
pub const SHT_MIPS_OPTSYM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000017, .hexadecimal);
pub const SHT_MIPS_LOCSTR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000018, .hexadecimal);
pub const SHT_MIPS_LINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000019, .hexadecimal);
pub const SHT_MIPS_RFDESC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7000001a, .hexadecimal);
pub const SHT_MIPS_DELTASYM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7000001b, .hexadecimal);
pub const SHT_MIPS_DELTAINST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7000001c, .hexadecimal);
pub const SHT_MIPS_DELTACLASS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7000001d, .hexadecimal);
pub const SHT_MIPS_DWARF = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7000001e, .hexadecimal);
pub const SHT_MIPS_DELTADECL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7000001f, .hexadecimal);
pub const SHT_MIPS_SYMBOL_LIB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000020, .hexadecimal);
pub const SHT_MIPS_EVENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000021, .hexadecimal);
pub const SHT_MIPS_TRANSLATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000022, .hexadecimal);
pub const SHT_MIPS_PIXIE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000023, .hexadecimal);
pub const SHT_MIPS_XLATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000024, .hexadecimal);
pub const SHT_MIPS_XLATE_DEBUG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000025, .hexadecimal);
pub const SHT_MIPS_WHIRL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000026, .hexadecimal);
pub const SHT_MIPS_EH_REGION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000027, .hexadecimal);
pub const SHT_MIPS_XLATE_OLD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000028, .hexadecimal);
pub const SHT_MIPS_PDR_EXCEPTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000029, .hexadecimal);
pub const SHT_MIPS_XHASH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7000002b, .hexadecimal);
pub const SHF_MIPS_GPREL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal);
pub const SHF_MIPS_MERGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const SHF_MIPS_ADDR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal);
pub const SHF_MIPS_STRINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal);
pub const SHF_MIPS_NOSTRIP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal);
pub const SHF_MIPS_LOCAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal);
pub const SHF_MIPS_NAMES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal);
pub const SHF_MIPS_NODUPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal);
pub const STO_MIPS_DEFAULT = @as(c_int, 0x0);
pub const STO_MIPS_INTERNAL = @as(c_int, 0x1);
pub const STO_MIPS_HIDDEN = @as(c_int, 0x2);
pub const STO_MIPS_PROTECTED = @as(c_int, 0x3);
pub const STO_MIPS_PLT = @as(c_int, 0x8);
pub const STO_MIPS_SC_ALIGN_UNUSED = @as(c_int, 0xff);
pub const STB_MIPS_SPLIT_COMMON = @as(c_int, 13);
pub const ODK_NULL = @as(c_int, 0);
pub const ODK_REGINFO = @as(c_int, 1);
pub const ODK_EXCEPTIONS = @as(c_int, 2);
pub const ODK_PAD = @as(c_int, 3);
pub const ODK_HWPATCH = @as(c_int, 4);
pub const ODK_FILL = @as(c_int, 5);
pub const ODK_TAGS = @as(c_int, 6);
pub const ODK_HWAND = @as(c_int, 7);
pub const ODK_HWOR = @as(c_int, 8);
pub const OEX_FPU_MIN = @as(c_int, 0x1f);
pub const OEX_FPU_MAX = @as(c_int, 0x1f00);
pub const OEX_PAGE0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000, .hexadecimal);
pub const OEX_SMM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000, .hexadecimal);
pub const OEX_FPDBUG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000, .hexadecimal);
pub const OEX_PRECISEFP = OEX_FPDBUG;
pub const OEX_DISMISS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000, .hexadecimal);
pub const OEX_FPU_INVAL = @as(c_int, 0x10);
pub const OEX_FPU_DIV0 = @as(c_int, 0x08);
pub const OEX_FPU_OFLO = @as(c_int, 0x04);
pub const OEX_FPU_UFLO = @as(c_int, 0x02);
pub const OEX_FPU_INEX = @as(c_int, 0x01);
pub const OHW_R4KEOP = @as(c_int, 0x1);
pub const OHW_R8KPFETCH = @as(c_int, 0x2);
pub const OHW_R5KEOP = @as(c_int, 0x4);
pub const OHW_R5KCVTL = @as(c_int, 0x8);
pub const OPAD_PREFIX = @as(c_int, 0x1);
pub const OPAD_POSTFIX = @as(c_int, 0x2);
pub const OPAD_SYMBOL = @as(c_int, 0x4);
pub const OHWA0_R4KEOP_CHECKED = @as(c_int, 0x00000001);
pub const OHWA1_R4KEOP_CLEAN = @as(c_int, 0x00000002);
pub const R_MIPS_NONE = @as(c_int, 0);
pub const R_MIPS_16 = @as(c_int, 1);
pub const R_MIPS_32 = @as(c_int, 2);
pub const R_MIPS_REL32 = @as(c_int, 3);
pub const R_MIPS_26 = @as(c_int, 4);
pub const R_MIPS_HI16 = @as(c_int, 5);
pub const R_MIPS_LO16 = @as(c_int, 6);
pub const R_MIPS_GPREL16 = @as(c_int, 7);
pub const R_MIPS_LITERAL = @as(c_int, 8);
pub const R_MIPS_GOT16 = @as(c_int, 9);
pub const R_MIPS_PC16 = @as(c_int, 10);
pub const R_MIPS_CALL16 = @as(c_int, 11);
pub const R_MIPS_GPREL32 = @as(c_int, 12);
pub const R_MIPS_SHIFT5 = @as(c_int, 16);
pub const R_MIPS_SHIFT6 = @as(c_int, 17);
pub const R_MIPS_64 = @as(c_int, 18);
pub const R_MIPS_GOT_DISP = @as(c_int, 19);
pub const R_MIPS_GOT_PAGE = @as(c_int, 20);
pub const R_MIPS_GOT_OFST = @as(c_int, 21);
pub const R_MIPS_GOT_HI16 = @as(c_int, 22);
pub const R_MIPS_GOT_LO16 = @as(c_int, 23);
pub const R_MIPS_SUB = @as(c_int, 24);
pub const R_MIPS_INSERT_A = @as(c_int, 25);
pub const R_MIPS_INSERT_B = @as(c_int, 26);
pub const R_MIPS_DELETE = @as(c_int, 27);
pub const R_MIPS_HIGHER = @as(c_int, 28);
pub const R_MIPS_HIGHEST = @as(c_int, 29);
pub const R_MIPS_CALL_HI16 = @as(c_int, 30);
pub const R_MIPS_CALL_LO16 = @as(c_int, 31);
pub const R_MIPS_SCN_DISP = @as(c_int, 32);
pub const R_MIPS_REL16 = @as(c_int, 33);
pub const R_MIPS_ADD_IMMEDIATE = @as(c_int, 34);
pub const R_MIPS_PJUMP = @as(c_int, 35);
pub const R_MIPS_RELGOT = @as(c_int, 36);
pub const R_MIPS_JALR = @as(c_int, 37);
pub const R_MIPS_TLS_DTPMOD32 = @as(c_int, 38);
pub const R_MIPS_TLS_DTPREL32 = @as(c_int, 39);
pub const R_MIPS_TLS_DTPMOD64 = @as(c_int, 40);
pub const R_MIPS_TLS_DTPREL64 = @as(c_int, 41);
pub const R_MIPS_TLS_GD = @as(c_int, 42);
pub const R_MIPS_TLS_LDM = @as(c_int, 43);
pub const R_MIPS_TLS_DTPREL_HI16 = @as(c_int, 44);
pub const R_MIPS_TLS_DTPREL_LO16 = @as(c_int, 45);
pub const R_MIPS_TLS_GOTTPREL = @as(c_int, 46);
pub const R_MIPS_TLS_TPREL32 = @as(c_int, 47);
pub const R_MIPS_TLS_TPREL64 = @as(c_int, 48);
pub const R_MIPS_TLS_TPREL_HI16 = @as(c_int, 49);
pub const R_MIPS_TLS_TPREL_LO16 = @as(c_int, 50);
pub const R_MIPS_GLOB_DAT = @as(c_int, 51);
pub const R_MIPS_COPY = @as(c_int, 126);
pub const R_MIPS_JUMP_SLOT = @as(c_int, 127);
pub const R_MIPS_NUM = @as(c_int, 128);
pub const PT_MIPS_REGINFO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000000, .hexadecimal);
pub const PT_MIPS_RTPROC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000001, .hexadecimal);
pub const PT_MIPS_OPTIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000002, .hexadecimal);
pub const PT_MIPS_ABIFLAGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000003, .hexadecimal);
pub const PF_MIPS_LOCAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal);
pub const DT_MIPS_RLD_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000001, .hexadecimal);
pub const DT_MIPS_TIME_STAMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000002, .hexadecimal);
pub const DT_MIPS_ICHECKSUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000003, .hexadecimal);
pub const DT_MIPS_IVERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000004, .hexadecimal);
pub const DT_MIPS_FLAGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000005, .hexadecimal);
pub const DT_MIPS_BASE_ADDRESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000006, .hexadecimal);
pub const DT_MIPS_MSYM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000007, .hexadecimal);
pub const DT_MIPS_CONFLICT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000008, .hexadecimal);
pub const DT_MIPS_LIBLIST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000009, .hexadecimal);
pub const DT_MIPS_LOCAL_GOTNO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7000000a, .hexadecimal);
pub const DT_MIPS_CONFLICTNO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7000000b, .hexadecimal);
pub const DT_MIPS_LIBLISTNO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000010, .hexadecimal);
pub const DT_MIPS_SYMTABNO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000011, .hexadecimal);
pub const DT_MIPS_UNREFEXTNO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000012, .hexadecimal);
pub const DT_MIPS_GOTSYM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000013, .hexadecimal);
pub const DT_MIPS_HIPAGENO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000014, .hexadecimal);
pub const DT_MIPS_RLD_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000016, .hexadecimal);
pub const DT_MIPS_DELTA_CLASS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000017, .hexadecimal);
pub const DT_MIPS_DELTA_CLASS_NO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000018, .hexadecimal);
pub const DT_MIPS_DELTA_INSTANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000019, .hexadecimal);
pub const DT_MIPS_DELTA_INSTANCE_NO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7000001a, .hexadecimal);
pub const DT_MIPS_DELTA_RELOC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7000001b, .hexadecimal);
pub const DT_MIPS_DELTA_RELOC_NO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7000001c, .hexadecimal);
pub const DT_MIPS_DELTA_SYM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7000001d, .hexadecimal);
pub const DT_MIPS_DELTA_SYM_NO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7000001e, .hexadecimal);
pub const DT_MIPS_DELTA_CLASSSYM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000020, .hexadecimal);
pub const DT_MIPS_DELTA_CLASSSYM_NO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000021, .hexadecimal);
pub const DT_MIPS_CXX_FLAGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000022, .hexadecimal);
pub const DT_MIPS_PIXIE_INIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000023, .hexadecimal);
pub const DT_MIPS_SYMBOL_LIB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000024, .hexadecimal);
pub const DT_MIPS_LOCALPAGE_GOTIDX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000025, .hexadecimal);
pub const DT_MIPS_LOCAL_GOTIDX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000026, .hexadecimal);
pub const DT_MIPS_HIDDEN_GOTIDX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000027, .hexadecimal);
pub const DT_MIPS_PROTECTED_GOTIDX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000028, .hexadecimal);
pub const DT_MIPS_OPTIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000029, .hexadecimal);
pub const DT_MIPS_INTERFACE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7000002a, .hexadecimal);
pub const DT_MIPS_DYNSTR_ALIGN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7000002b, .hexadecimal);
pub const DT_MIPS_INTERFACE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7000002c, .hexadecimal);
pub const DT_MIPS_RLD_TEXT_RESOLVE_ADDR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7000002d, .hexadecimal);
pub const DT_MIPS_PERF_SUFFIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7000002e, .hexadecimal);
pub const DT_MIPS_COMPACT_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7000002f, .hexadecimal);
pub const DT_MIPS_GP_VALUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000030, .hexadecimal);
pub const DT_MIPS_AUX_DYNAMIC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000031, .hexadecimal);
pub const DT_MIPS_PLTGOT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000032, .hexadecimal);
pub const DT_MIPS_RWPLT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000034, .hexadecimal);
pub const DT_MIPS_RLD_MAP_REL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000035, .hexadecimal);
pub const DT_MIPS_XHASH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000036, .hexadecimal);
pub const DT_MIPS_NUM = @as(c_int, 0x37);
pub const RHF_NONE = @as(c_int, 0);
pub const RHF_QUICKSTART = @as(c_int, 1) << @as(c_int, 0);
pub const RHF_NOTPOT = @as(c_int, 1) << @as(c_int, 1);
pub const RHF_NO_LIBRARY_REPLACEMENT = @as(c_int, 1) << @as(c_int, 2);
pub const RHF_NO_MOVE = @as(c_int, 1) << @as(c_int, 3);
pub const RHF_SGI_ONLY = @as(c_int, 1) << @as(c_int, 4);
pub const RHF_GUARANTEE_INIT = @as(c_int, 1) << @as(c_int, 5);
pub const RHF_DELTA_C_PLUS_PLUS = @as(c_int, 1) << @as(c_int, 6);
pub const RHF_GUARANTEE_START_INIT = @as(c_int, 1) << @as(c_int, 7);
pub const RHF_PIXIE = @as(c_int, 1) << @as(c_int, 8);
pub const RHF_DEFAULT_DELAY_LOAD = @as(c_int, 1) << @as(c_int, 9);
pub const RHF_REQUICKSTART = @as(c_int, 1) << @as(c_int, 10);
pub const RHF_REQUICKSTARTED = @as(c_int, 1) << @as(c_int, 11);
pub const RHF_CORD = @as(c_int, 1) << @as(c_int, 12);
pub const RHF_NO_UNRES_UNDEF = @as(c_int, 1) << @as(c_int, 13);
pub const RHF_RLD_ORDER_SAFE = @as(c_int, 1) << @as(c_int, 14);
pub const LL_NONE = @as(c_int, 0);
pub const LL_EXACT_MATCH = @as(c_int, 1) << @as(c_int, 0);
pub const LL_IGNORE_INT_VER = @as(c_int, 1) << @as(c_int, 1);
pub const LL_REQUIRE_MINOR = @as(c_int, 1) << @as(c_int, 2);
pub const LL_EXPORTS = @as(c_int, 1) << @as(c_int, 3);
pub const LL_DELAY_LOAD = @as(c_int, 1) << @as(c_int, 4);
pub const LL_DELTA = @as(c_int, 1) << @as(c_int, 5);
pub const MIPS_AFL_REG_NONE = @as(c_int, 0x00);
pub const MIPS_AFL_REG_32 = @as(c_int, 0x01);
pub const MIPS_AFL_REG_64 = @as(c_int, 0x02);
pub const MIPS_AFL_REG_128 = @as(c_int, 0x03);
pub const MIPS_AFL_ASE_DSP = @as(c_int, 0x00000001);
pub const MIPS_AFL_ASE_DSPR2 = @as(c_int, 0x00000002);
pub const MIPS_AFL_ASE_EVA = @as(c_int, 0x00000004);
pub const MIPS_AFL_ASE_MCU = @as(c_int, 0x00000008);
pub const MIPS_AFL_ASE_MDMX = @as(c_int, 0x00000010);
pub const MIPS_AFL_ASE_MIPS3D = @as(c_int, 0x00000020);
pub const MIPS_AFL_ASE_MT = @as(c_int, 0x00000040);
pub const MIPS_AFL_ASE_SMARTMIPS = @as(c_int, 0x00000080);
pub const MIPS_AFL_ASE_VIRT = @as(c_int, 0x00000100);
pub const MIPS_AFL_ASE_MSA = @as(c_int, 0x00000200);
pub const MIPS_AFL_ASE_MIPS16 = @as(c_int, 0x00000400);
pub const MIPS_AFL_ASE_MICROMIPS = @as(c_int, 0x00000800);
pub const MIPS_AFL_ASE_XPA = @as(c_int, 0x00001000);
pub const MIPS_AFL_ASE_MASK = @as(c_int, 0x00001fff);
pub const MIPS_AFL_EXT_XLR = @as(c_int, 1);
pub const MIPS_AFL_EXT_OCTEON2 = @as(c_int, 2);
pub const MIPS_AFL_EXT_OCTEONP = @as(c_int, 3);
pub const MIPS_AFL_EXT_LOONGSON_3A = @as(c_int, 4);
pub const MIPS_AFL_EXT_OCTEON = @as(c_int, 5);
pub const MIPS_AFL_EXT_5900 = @as(c_int, 6);
pub const MIPS_AFL_EXT_4650 = @as(c_int, 7);
pub const MIPS_AFL_EXT_4010 = @as(c_int, 8);
pub const MIPS_AFL_EXT_4100 = @as(c_int, 9);
pub const MIPS_AFL_EXT_3900 = @as(c_int, 10);
pub const MIPS_AFL_EXT_10000 = @as(c_int, 11);
pub const MIPS_AFL_EXT_SB1 = @as(c_int, 12);
pub const MIPS_AFL_EXT_4111 = @as(c_int, 13);
pub const MIPS_AFL_EXT_4120 = @as(c_int, 14);
pub const MIPS_AFL_EXT_5400 = @as(c_int, 15);
pub const MIPS_AFL_EXT_5500 = @as(c_int, 16);
pub const MIPS_AFL_EXT_LOONGSON_2E = @as(c_int, 17);
pub const MIPS_AFL_EXT_LOONGSON_2F = @as(c_int, 18);
pub const MIPS_AFL_FLAGS1_ODDSPREG = @as(c_int, 1);
pub const EF_PARISC_TRAPNIL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal);
pub const EF_PARISC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal);
pub const EF_PARISC_LSB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal);
pub const EF_PARISC_WIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal);
pub const EF_PARISC_NO_KABP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal);
pub const EF_PARISC_LAZYSWAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal);
pub const EF_PARISC_ARCH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal);
pub const EFA_PARISC_1_0 = @as(c_int, 0x020b);
pub const EFA_PARISC_1_1 = @as(c_int, 0x0210);
pub const EFA_PARISC_2_0 = @as(c_int, 0x0214);
pub const SHN_PARISC_ANSI_COMMON = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00, .hexadecimal);
pub const SHN_PARISC_HUGE_COMMON = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff01, .hexadecimal);
pub const SHT_PARISC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000000, .hexadecimal);
pub const SHT_PARISC_UNWIND = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000001, .hexadecimal);
pub const SHT_PARISC_DOC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000002, .hexadecimal);
pub const SHF_PARISC_SHORT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const SHF_PARISC_HUGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal);
pub const SHF_PARISC_SBP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal);
pub const STT_PARISC_MILLICODE = @as(c_int, 13);
pub const STT_HP_OPAQUE = STT_LOOS + @as(c_int, 0x1);
pub const STT_HP_STUB = STT_LOOS + @as(c_int, 0x2);
pub const R_PARISC_NONE = @as(c_int, 0);
pub const R_PARISC_DIR32 = @as(c_int, 1);
pub const R_PARISC_DIR21L = @as(c_int, 2);
pub const R_PARISC_DIR17R = @as(c_int, 3);
pub const R_PARISC_DIR17F = @as(c_int, 4);
pub const R_PARISC_DIR14R = @as(c_int, 6);
pub const R_PARISC_PCREL32 = @as(c_int, 9);
pub const R_PARISC_PCREL21L = @as(c_int, 10);
pub const R_PARISC_PCREL17R = @as(c_int, 11);
pub const R_PARISC_PCREL17F = @as(c_int, 12);
pub const R_PARISC_PCREL14R = @as(c_int, 14);
pub const R_PARISC_DPREL21L = @as(c_int, 18);
pub const R_PARISC_DPREL14R = @as(c_int, 22);
pub const R_PARISC_GPREL21L = @as(c_int, 26);
pub const R_PARISC_GPREL14R = @as(c_int, 30);
pub const R_PARISC_LTOFF21L = @as(c_int, 34);
pub const R_PARISC_LTOFF14R = @as(c_int, 38);
pub const R_PARISC_SECREL32 = @as(c_int, 41);
pub const R_PARISC_SEGBASE = @as(c_int, 48);
pub const R_PARISC_SEGREL32 = @as(c_int, 49);
pub const R_PARISC_PLTOFF21L = @as(c_int, 50);
pub const R_PARISC_PLTOFF14R = @as(c_int, 54);
pub const R_PARISC_LTOFF_FPTR32 = @as(c_int, 57);
pub const R_PARISC_LTOFF_FPTR21L = @as(c_int, 58);
pub const R_PARISC_LTOFF_FPTR14R = @as(c_int, 62);
pub const R_PARISC_FPTR64 = @as(c_int, 64);
pub const R_PARISC_PLABEL32 = @as(c_int, 65);
pub const R_PARISC_PLABEL21L = @as(c_int, 66);
pub const R_PARISC_PLABEL14R = @as(c_int, 70);
pub const R_PARISC_PCREL64 = @as(c_int, 72);
pub const R_PARISC_PCREL22F = @as(c_int, 74);
pub const R_PARISC_PCREL14WR = @as(c_int, 75);
pub const R_PARISC_PCREL14DR = @as(c_int, 76);
pub const R_PARISC_PCREL16F = @as(c_int, 77);
pub const R_PARISC_PCREL16WF = @as(c_int, 78);
pub const R_PARISC_PCREL16DF = @as(c_int, 79);
pub const R_PARISC_DIR64 = @as(c_int, 80);
pub const R_PARISC_DIR14WR = @as(c_int, 83);
pub const R_PARISC_DIR14DR = @as(c_int, 84);
pub const R_PARISC_DIR16F = @as(c_int, 85);
pub const R_PARISC_DIR16WF = @as(c_int, 86);
pub const R_PARISC_DIR16DF = @as(c_int, 87);
pub const R_PARISC_GPREL64 = @as(c_int, 88);
pub const R_PARISC_GPREL14WR = @as(c_int, 91);
pub const R_PARISC_GPREL14DR = @as(c_int, 92);
pub const R_PARISC_GPREL16F = @as(c_int, 93);
pub const R_PARISC_GPREL16WF = @as(c_int, 94);
pub const R_PARISC_GPREL16DF = @as(c_int, 95);
pub const R_PARISC_LTOFF64 = @as(c_int, 96);
pub const R_PARISC_LTOFF14WR = @as(c_int, 99);
pub const R_PARISC_LTOFF14DR = @as(c_int, 100);
pub const R_PARISC_LTOFF16F = @as(c_int, 101);
pub const R_PARISC_LTOFF16WF = @as(c_int, 102);
pub const R_PARISC_LTOFF16DF = @as(c_int, 103);
pub const R_PARISC_SECREL64 = @as(c_int, 104);
pub const R_PARISC_SEGREL64 = @as(c_int, 112);
pub const R_PARISC_PLTOFF14WR = @as(c_int, 115);
pub const R_PARISC_PLTOFF14DR = @as(c_int, 116);
pub const R_PARISC_PLTOFF16F = @as(c_int, 117);
pub const R_PARISC_PLTOFF16WF = @as(c_int, 118);
pub const R_PARISC_PLTOFF16DF = @as(c_int, 119);
pub const R_PARISC_LTOFF_FPTR64 = @as(c_int, 120);
pub const R_PARISC_LTOFF_FPTR14WR = @as(c_int, 123);
pub const R_PARISC_LTOFF_FPTR14DR = @as(c_int, 124);
pub const R_PARISC_LTOFF_FPTR16F = @as(c_int, 125);
pub const R_PARISC_LTOFF_FPTR16WF = @as(c_int, 126);
pub const R_PARISC_LTOFF_FPTR16DF = @as(c_int, 127);
pub const R_PARISC_LORESERVE = @as(c_int, 128);
pub const R_PARISC_COPY = @as(c_int, 128);
pub const R_PARISC_IPLT = @as(c_int, 129);
pub const R_PARISC_EPLT = @as(c_int, 130);
pub const R_PARISC_TPREL32 = @as(c_int, 153);
pub const R_PARISC_TPREL21L = @as(c_int, 154);
pub const R_PARISC_TPREL14R = @as(c_int, 158);
pub const R_PARISC_LTOFF_TP21L = @as(c_int, 162);
pub const R_PARISC_LTOFF_TP14R = @as(c_int, 166);
pub const R_PARISC_LTOFF_TP14F = @as(c_int, 167);
pub const R_PARISC_TPREL64 = @as(c_int, 216);
pub const R_PARISC_TPREL14WR = @as(c_int, 219);
pub const R_PARISC_TPREL14DR = @as(c_int, 220);
pub const R_PARISC_TPREL16F = @as(c_int, 221);
pub const R_PARISC_TPREL16WF = @as(c_int, 222);
pub const R_PARISC_TPREL16DF = @as(c_int, 223);
pub const R_PARISC_LTOFF_TP64 = @as(c_int, 224);
pub const R_PARISC_LTOFF_TP14WR = @as(c_int, 227);
pub const R_PARISC_LTOFF_TP14DR = @as(c_int, 228);
pub const R_PARISC_LTOFF_TP16F = @as(c_int, 229);
pub const R_PARISC_LTOFF_TP16WF = @as(c_int, 230);
pub const R_PARISC_LTOFF_TP16DF = @as(c_int, 231);
pub const R_PARISC_GNU_VTENTRY = @as(c_int, 232);
pub const R_PARISC_GNU_VTINHERIT = @as(c_int, 233);
pub const R_PARISC_TLS_GD21L = @as(c_int, 234);
pub const R_PARISC_TLS_GD14R = @as(c_int, 235);
pub const R_PARISC_TLS_GDCALL = @as(c_int, 236);
pub const R_PARISC_TLS_LDM21L = @as(c_int, 237);
pub const R_PARISC_TLS_LDM14R = @as(c_int, 238);
pub const R_PARISC_TLS_LDMCALL = @as(c_int, 239);
pub const R_PARISC_TLS_LDO21L = @as(c_int, 240);
pub const R_PARISC_TLS_LDO14R = @as(c_int, 241);
pub const R_PARISC_TLS_DTPMOD32 = @as(c_int, 242);
pub const R_PARISC_TLS_DTPMOD64 = @as(c_int, 243);
pub const R_PARISC_TLS_DTPOFF32 = @as(c_int, 244);
pub const R_PARISC_TLS_DTPOFF64 = @as(c_int, 245);
pub const R_PARISC_TLS_LE21L = R_PARISC_TPREL21L;
pub const R_PARISC_TLS_LE14R = R_PARISC_TPREL14R;
pub const R_PARISC_TLS_IE21L = R_PARISC_LTOFF_TP21L;
pub const R_PARISC_TLS_IE14R = R_PARISC_LTOFF_TP14R;
pub const R_PARISC_TLS_TPREL32 = R_PARISC_TPREL32;
pub const R_PARISC_TLS_TPREL64 = R_PARISC_TPREL64;
pub const R_PARISC_HIRESERVE = @as(c_int, 255);
pub const PT_HP_TLS = PT_LOOS + @as(c_int, 0x0);
pub const PT_HP_CORE_NONE = PT_LOOS + @as(c_int, 0x1);
pub const PT_HP_CORE_VERSION = PT_LOOS + @as(c_int, 0x2);
pub const PT_HP_CORE_KERNEL = PT_LOOS + @as(c_int, 0x3);
pub const PT_HP_CORE_COMM = PT_LOOS + @as(c_int, 0x4);
pub const PT_HP_CORE_PROC = PT_LOOS + @as(c_int, 0x5);
pub const PT_HP_CORE_LOADABLE = PT_LOOS + @as(c_int, 0x6);
pub const PT_HP_CORE_STACK = PT_LOOS + @as(c_int, 0x7);
pub const PT_HP_CORE_SHM = PT_LOOS + @as(c_int, 0x8);
pub const PT_HP_CORE_MMF = PT_LOOS + @as(c_int, 0x9);
pub const PT_HP_PARALLEL = PT_LOOS + @as(c_int, 0x10);
pub const PT_HP_FASTBIND = PT_LOOS + @as(c_int, 0x11);
pub const PT_HP_OPT_ANNOT = PT_LOOS + @as(c_int, 0x12);
pub const PT_HP_HSL_ANNOT = PT_LOOS + @as(c_int, 0x13);
pub const PT_HP_STACK = PT_LOOS + @as(c_int, 0x14);
pub const PT_PARISC_ARCHEXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000000, .hexadecimal);
pub const PT_PARISC_UNWIND = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000001, .hexadecimal);
pub const PF_PARISC_SBP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal);
pub const PF_HP_PAGE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal);
pub const PF_HP_FAR_SHARED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal);
pub const PF_HP_NEAR_SHARED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal);
pub const PF_HP_CODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal);
pub const PF_HP_MODIFY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal);
pub const PF_HP_LAZYSWAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal);
pub const PF_HP_SBP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal);
pub const EF_ALPHA_32BIT = @as(c_int, 1);
pub const EF_ALPHA_CANRELAX = @as(c_int, 2);
pub const SHT_ALPHA_DEBUG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000001, .hexadecimal);
pub const SHT_ALPHA_REGINFO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000002, .hexadecimal);
pub const SHF_ALPHA_GPREL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal);
pub const STO_ALPHA_NOPV = @as(c_int, 0x80);
pub const STO_ALPHA_STD_GPLOAD = @as(c_int, 0x88);
pub const R_ALPHA_NONE = @as(c_int, 0);
pub const R_ALPHA_REFLONG = @as(c_int, 1);
pub const R_ALPHA_REFQUAD = @as(c_int, 2);
pub const R_ALPHA_GPREL32 = @as(c_int, 3);
pub const R_ALPHA_LITERAL = @as(c_int, 4);
pub const R_ALPHA_LITUSE = @as(c_int, 5);
pub const R_ALPHA_GPDISP = @as(c_int, 6);
pub const R_ALPHA_BRADDR = @as(c_int, 7);
pub const R_ALPHA_HINT = @as(c_int, 8);
pub const R_ALPHA_SREL16 = @as(c_int, 9);
pub const R_ALPHA_SREL32 = @as(c_int, 10);
pub const R_ALPHA_SREL64 = @as(c_int, 11);
pub const R_ALPHA_GPRELHIGH = @as(c_int, 17);
pub const R_ALPHA_GPRELLOW = @as(c_int, 18);
pub const R_ALPHA_GPREL16 = @as(c_int, 19);
pub const R_ALPHA_COPY = @as(c_int, 24);
pub const R_ALPHA_GLOB_DAT = @as(c_int, 25);
pub const R_ALPHA_JMP_SLOT = @as(c_int, 26);
pub const R_ALPHA_RELATIVE = @as(c_int, 27);
pub const R_ALPHA_TLS_GD_HI = @as(c_int, 28);
pub const R_ALPHA_TLSGD = @as(c_int, 29);
pub const R_ALPHA_TLS_LDM = @as(c_int, 30);
pub const R_ALPHA_DTPMOD64 = @as(c_int, 31);
pub const R_ALPHA_GOTDTPREL = @as(c_int, 32);
pub const R_ALPHA_DTPREL64 = @as(c_int, 33);
pub const R_ALPHA_DTPRELHI = @as(c_int, 34);
pub const R_ALPHA_DTPRELLO = @as(c_int, 35);
pub const R_ALPHA_DTPREL16 = @as(c_int, 36);
pub const R_ALPHA_GOTTPREL = @as(c_int, 37);
pub const R_ALPHA_TPREL64 = @as(c_int, 38);
pub const R_ALPHA_TPRELHI = @as(c_int, 39);
pub const R_ALPHA_TPRELLO = @as(c_int, 40);
pub const R_ALPHA_TPREL16 = @as(c_int, 41);
pub const R_ALPHA_NUM = @as(c_int, 46);
pub const LITUSE_ALPHA_ADDR = @as(c_int, 0);
pub const LITUSE_ALPHA_BASE = @as(c_int, 1);
pub const LITUSE_ALPHA_BYTOFF = @as(c_int, 2);
pub const LITUSE_ALPHA_JSR = @as(c_int, 3);
pub const LITUSE_ALPHA_TLS_GD = @as(c_int, 4);
pub const LITUSE_ALPHA_TLS_LDM = @as(c_int, 5);
pub const DT_ALPHA_PLTRO = DT_LOPROC + @as(c_int, 0);
pub const DT_ALPHA_NUM = @as(c_int, 1);
pub const EF_PPC_EMB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal);
pub const EF_PPC_RELOCATABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal);
pub const EF_PPC_RELOCATABLE_LIB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal);
pub const R_PPC_NONE = @as(c_int, 0);
pub const R_PPC_ADDR32 = @as(c_int, 1);
pub const R_PPC_ADDR24 = @as(c_int, 2);
pub const R_PPC_ADDR16 = @as(c_int, 3);
pub const R_PPC_ADDR16_LO = @as(c_int, 4);
pub const R_PPC_ADDR16_HI = @as(c_int, 5);
pub const R_PPC_ADDR16_HA = @as(c_int, 6);
pub const R_PPC_ADDR14 = @as(c_int, 7);
pub const R_PPC_ADDR14_BRTAKEN = @as(c_int, 8);
pub const R_PPC_ADDR14_BRNTAKEN = @as(c_int, 9);
pub const R_PPC_REL24 = @as(c_int, 10);
pub const R_PPC_REL14 = @as(c_int, 11);
pub const R_PPC_REL14_BRTAKEN = @as(c_int, 12);
pub const R_PPC_REL14_BRNTAKEN = @as(c_int, 13);
pub const R_PPC_GOT16 = @as(c_int, 14);
pub const R_PPC_GOT16_LO = @as(c_int, 15);
pub const R_PPC_GOT16_HI = @as(c_int, 16);
pub const R_PPC_GOT16_HA = @as(c_int, 17);
pub const R_PPC_PLTREL24 = @as(c_int, 18);
pub const R_PPC_COPY = @as(c_int, 19);
pub const R_PPC_GLOB_DAT = @as(c_int, 20);
pub const R_PPC_JMP_SLOT = @as(c_int, 21);
pub const R_PPC_RELATIVE = @as(c_int, 22);
pub const R_PPC_LOCAL24PC = @as(c_int, 23);
pub const R_PPC_UADDR32 = @as(c_int, 24);
pub const R_PPC_UADDR16 = @as(c_int, 25);
pub const R_PPC_REL32 = @as(c_int, 26);
pub const R_PPC_PLT32 = @as(c_int, 27);
pub const R_PPC_PLTREL32 = @as(c_int, 28);
pub const R_PPC_PLT16_LO = @as(c_int, 29);
pub const R_PPC_PLT16_HI = @as(c_int, 30);
pub const R_PPC_PLT16_HA = @as(c_int, 31);
pub const R_PPC_SDAREL16 = @as(c_int, 32);
pub const R_PPC_SECTOFF = @as(c_int, 33);
pub const R_PPC_SECTOFF_LO = @as(c_int, 34);
pub const R_PPC_SECTOFF_HI = @as(c_int, 35);
pub const R_PPC_SECTOFF_HA = @as(c_int, 36);
pub const R_PPC_TLS = @as(c_int, 67);
pub const R_PPC_DTPMOD32 = @as(c_int, 68);
pub const R_PPC_TPREL16 = @as(c_int, 69);
pub const R_PPC_TPREL16_LO = @as(c_int, 70);
pub const R_PPC_TPREL16_HI = @as(c_int, 71);
pub const R_PPC_TPREL16_HA = @as(c_int, 72);
pub const R_PPC_TPREL32 = @as(c_int, 73);
pub const R_PPC_DTPREL16 = @as(c_int, 74);
pub const R_PPC_DTPREL16_LO = @as(c_int, 75);
pub const R_PPC_DTPREL16_HI = @as(c_int, 76);
pub const R_PPC_DTPREL16_HA = @as(c_int, 77);
pub const R_PPC_DTPREL32 = @as(c_int, 78);
pub const R_PPC_GOT_TLSGD16 = @as(c_int, 79);
pub const R_PPC_GOT_TLSGD16_LO = @as(c_int, 80);
pub const R_PPC_GOT_TLSGD16_HI = @as(c_int, 81);
pub const R_PPC_GOT_TLSGD16_HA = @as(c_int, 82);
pub const R_PPC_GOT_TLSLD16 = @as(c_int, 83);
pub const R_PPC_GOT_TLSLD16_LO = @as(c_int, 84);
pub const R_PPC_GOT_TLSLD16_HI = @as(c_int, 85);
pub const R_PPC_GOT_TLSLD16_HA = @as(c_int, 86);
pub const R_PPC_GOT_TPREL16 = @as(c_int, 87);
pub const R_PPC_GOT_TPREL16_LO = @as(c_int, 88);
pub const R_PPC_GOT_TPREL16_HI = @as(c_int, 89);
pub const R_PPC_GOT_TPREL16_HA = @as(c_int, 90);
pub const R_PPC_GOT_DTPREL16 = @as(c_int, 91);
pub const R_PPC_GOT_DTPREL16_LO = @as(c_int, 92);
pub const R_PPC_GOT_DTPREL16_HI = @as(c_int, 93);
pub const R_PPC_GOT_DTPREL16_HA = @as(c_int, 94);
pub const R_PPC_TLSGD = @as(c_int, 95);
pub const R_PPC_TLSLD = @as(c_int, 96);
pub const R_PPC_EMB_NADDR32 = @as(c_int, 101);
pub const R_PPC_EMB_NADDR16 = @as(c_int, 102);
pub const R_PPC_EMB_NADDR16_LO = @as(c_int, 103);
pub const R_PPC_EMB_NADDR16_HI = @as(c_int, 104);
pub const R_PPC_EMB_NADDR16_HA = @as(c_int, 105);
pub const R_PPC_EMB_SDAI16 = @as(c_int, 106);
pub const R_PPC_EMB_SDA2I16 = @as(c_int, 107);
pub const R_PPC_EMB_SDA2REL = @as(c_int, 108);
pub const R_PPC_EMB_SDA21 = @as(c_int, 109);
pub const R_PPC_EMB_MRKREF = @as(c_int, 110);
pub const R_PPC_EMB_RELSEC16 = @as(c_int, 111);
pub const R_PPC_EMB_RELST_LO = @as(c_int, 112);
pub const R_PPC_EMB_RELST_HI = @as(c_int, 113);
pub const R_PPC_EMB_RELST_HA = @as(c_int, 114);
pub const R_PPC_EMB_BIT_FLD = @as(c_int, 115);
pub const R_PPC_EMB_RELSDA = @as(c_int, 116);
pub const R_PPC_DIAB_SDA21_LO = @as(c_int, 180);
pub const R_PPC_DIAB_SDA21_HI = @as(c_int, 181);
pub const R_PPC_DIAB_SDA21_HA = @as(c_int, 182);
pub const R_PPC_DIAB_RELSDA_LO = @as(c_int, 183);
pub const R_PPC_DIAB_RELSDA_HI = @as(c_int, 184);
pub const R_PPC_DIAB_RELSDA_HA = @as(c_int, 185);
pub const R_PPC_IRELATIVE = @as(c_int, 248);
pub const R_PPC_REL16 = @as(c_int, 249);
pub const R_PPC_REL16_LO = @as(c_int, 250);
pub const R_PPC_REL16_HI = @as(c_int, 251);
pub const R_PPC_REL16_HA = @as(c_int, 252);
pub const R_PPC_TOC16 = @as(c_int, 255);
pub const DT_PPC_GOT = DT_LOPROC + @as(c_int, 0);
pub const DT_PPC_OPT = DT_LOPROC + @as(c_int, 1);
pub const DT_PPC_NUM = @as(c_int, 2);
pub const PPC_OPT_TLS = @as(c_int, 1);
pub const R_PPC64_NONE = R_PPC_NONE;
pub const R_PPC64_ADDR32 = R_PPC_ADDR32;
pub const R_PPC64_ADDR24 = R_PPC_ADDR24;
pub const R_PPC64_ADDR16 = R_PPC_ADDR16;
pub const R_PPC64_ADDR16_LO = R_PPC_ADDR16_LO;
pub const R_PPC64_ADDR16_HI = R_PPC_ADDR16_HI;
pub const R_PPC64_ADDR16_HA = R_PPC_ADDR16_HA;
pub const R_PPC64_ADDR14 = R_PPC_ADDR14;
pub const R_PPC64_ADDR14_BRTAKEN = R_PPC_ADDR14_BRTAKEN;
pub const R_PPC64_ADDR14_BRNTAKEN = R_PPC_ADDR14_BRNTAKEN;
pub const R_PPC64_REL24 = R_PPC_REL24;
pub const R_PPC64_REL14 = R_PPC_REL14;
pub const R_PPC64_REL14_BRTAKEN = R_PPC_REL14_BRTAKEN;
pub const R_PPC64_REL14_BRNTAKEN = R_PPC_REL14_BRNTAKEN;
pub const R_PPC64_GOT16 = R_PPC_GOT16;
pub const R_PPC64_GOT16_LO = R_PPC_GOT16_LO;
pub const R_PPC64_GOT16_HI = R_PPC_GOT16_HI;
pub const R_PPC64_GOT16_HA = R_PPC_GOT16_HA;
pub const R_PPC64_COPY = R_PPC_COPY;
pub const R_PPC64_GLOB_DAT = R_PPC_GLOB_DAT;
pub const R_PPC64_JMP_SLOT = R_PPC_JMP_SLOT;
pub const R_PPC64_RELATIVE = R_PPC_RELATIVE;
pub const R_PPC64_UADDR32 = R_PPC_UADDR32;
pub const R_PPC64_UADDR16 = R_PPC_UADDR16;
pub const R_PPC64_REL32 = R_PPC_REL32;
pub const R_PPC64_PLT32 = R_PPC_PLT32;
pub const R_PPC64_PLTREL32 = R_PPC_PLTREL32;
pub const R_PPC64_PLT16_LO = R_PPC_PLT16_LO;
pub const R_PPC64_PLT16_HI = R_PPC_PLT16_HI;
pub const R_PPC64_PLT16_HA = R_PPC_PLT16_HA;
pub const R_PPC64_SECTOFF = R_PPC_SECTOFF;
pub const R_PPC64_SECTOFF_LO = R_PPC_SECTOFF_LO;
pub const R_PPC64_SECTOFF_HI = R_PPC_SECTOFF_HI;
pub const R_PPC64_SECTOFF_HA = R_PPC_SECTOFF_HA;
pub const R_PPC64_ADDR30 = @as(c_int, 37);
pub const R_PPC64_ADDR64 = @as(c_int, 38);
pub const R_PPC64_ADDR16_HIGHER = @as(c_int, 39);
pub const R_PPC64_ADDR16_HIGHERA = @as(c_int, 40);
pub const R_PPC64_ADDR16_HIGHEST = @as(c_int, 41);
pub const R_PPC64_ADDR16_HIGHESTA = @as(c_int, 42);
pub const R_PPC64_UADDR64 = @as(c_int, 43);
pub const R_PPC64_REL64 = @as(c_int, 44);
pub const R_PPC64_PLT64 = @as(c_int, 45);
pub const R_PPC64_PLTREL64 = @as(c_int, 46);
pub const R_PPC64_TOC16 = @as(c_int, 47);
pub const R_PPC64_TOC16_LO = @as(c_int, 48);
pub const R_PPC64_TOC16_HI = @as(c_int, 49);
pub const R_PPC64_TOC16_HA = @as(c_int, 50);
pub const R_PPC64_TOC = @as(c_int, 51);
pub const R_PPC64_PLTGOT16 = @as(c_int, 52);
pub const R_PPC64_PLTGOT16_LO = @as(c_int, 53);
pub const R_PPC64_PLTGOT16_HI = @as(c_int, 54);
pub const R_PPC64_PLTGOT16_HA = @as(c_int, 55);
pub const R_PPC64_ADDR16_DS = @as(c_int, 56);
pub const R_PPC64_ADDR16_LO_DS = @as(c_int, 57);
pub const R_PPC64_GOT16_DS = @as(c_int, 58);
pub const R_PPC64_GOT16_LO_DS = @as(c_int, 59);
pub const R_PPC64_PLT16_LO_DS = @as(c_int, 60);
pub const R_PPC64_SECTOFF_DS = @as(c_int, 61);
pub const R_PPC64_SECTOFF_LO_DS = @as(c_int, 62);
pub const R_PPC64_TOC16_DS = @as(c_int, 63);
pub const R_PPC64_TOC16_LO_DS = @as(c_int, 64);
pub const R_PPC64_PLTGOT16_DS = @as(c_int, 65);
pub const R_PPC64_PLTGOT16_LO_DS = @as(c_int, 66);
pub const R_PPC64_TLS = @as(c_int, 67);
pub const R_PPC64_DTPMOD64 = @as(c_int, 68);
pub const R_PPC64_TPREL16 = @as(c_int, 69);
pub const R_PPC64_TPREL16_LO = @as(c_int, 70);
pub const R_PPC64_TPREL16_HI = @as(c_int, 71);
pub const R_PPC64_TPREL16_HA = @as(c_int, 72);
pub const R_PPC64_TPREL64 = @as(c_int, 73);
pub const R_PPC64_DTPREL16 = @as(c_int, 74);
pub const R_PPC64_DTPREL16_LO = @as(c_int, 75);
pub const R_PPC64_DTPREL16_HI = @as(c_int, 76);
pub const R_PPC64_DTPREL16_HA = @as(c_int, 77);
pub const R_PPC64_DTPREL64 = @as(c_int, 78);
pub const R_PPC64_GOT_TLSGD16 = @as(c_int, 79);
pub const R_PPC64_GOT_TLSGD16_LO = @as(c_int, 80);
pub const R_PPC64_GOT_TLSGD16_HI = @as(c_int, 81);
pub const R_PPC64_GOT_TLSGD16_HA = @as(c_int, 82);
pub const R_PPC64_GOT_TLSLD16 = @as(c_int, 83);
pub const R_PPC64_GOT_TLSLD16_LO = @as(c_int, 84);
pub const R_PPC64_GOT_TLSLD16_HI = @as(c_int, 85);
pub const R_PPC64_GOT_TLSLD16_HA = @as(c_int, 86);
pub const R_PPC64_GOT_TPREL16_DS = @as(c_int, 87);
pub const R_PPC64_GOT_TPREL16_LO_DS = @as(c_int, 88);
pub const R_PPC64_GOT_TPREL16_HI = @as(c_int, 89);
pub const R_PPC64_GOT_TPREL16_HA = @as(c_int, 90);
pub const R_PPC64_GOT_DTPREL16_DS = @as(c_int, 91);
pub const R_PPC64_GOT_DTPREL16_LO_DS = @as(c_int, 92);
pub const R_PPC64_GOT_DTPREL16_HI = @as(c_int, 93);
pub const R_PPC64_GOT_DTPREL16_HA = @as(c_int, 94);
pub const R_PPC64_TPREL16_DS = @as(c_int, 95);
pub const R_PPC64_TPREL16_LO_DS = @as(c_int, 96);
pub const R_PPC64_TPREL16_HIGHER = @as(c_int, 97);
pub const R_PPC64_TPREL16_HIGHERA = @as(c_int, 98);
pub const R_PPC64_TPREL16_HIGHEST = @as(c_int, 99);
pub const R_PPC64_TPREL16_HIGHESTA = @as(c_int, 100);
pub const R_PPC64_DTPREL16_DS = @as(c_int, 101);
pub const R_PPC64_DTPREL16_LO_DS = @as(c_int, 102);
pub const R_PPC64_DTPREL16_HIGHER = @as(c_int, 103);
pub const R_PPC64_DTPREL16_HIGHERA = @as(c_int, 104);
pub const R_PPC64_DTPREL16_HIGHEST = @as(c_int, 105);
pub const R_PPC64_DTPREL16_HIGHESTA = @as(c_int, 106);
pub const R_PPC64_TLSGD = @as(c_int, 107);
pub const R_PPC64_TLSLD = @as(c_int, 108);
pub const R_PPC64_TOCSAVE = @as(c_int, 109);
pub const R_PPC64_ADDR16_HIGH = @as(c_int, 110);
pub const R_PPC64_ADDR16_HIGHA = @as(c_int, 111);
pub const R_PPC64_TPREL16_HIGH = @as(c_int, 112);
pub const R_PPC64_TPREL16_HIGHA = @as(c_int, 113);
pub const R_PPC64_DTPREL16_HIGH = @as(c_int, 114);
pub const R_PPC64_DTPREL16_HIGHA = @as(c_int, 115);
pub const R_PPC64_JMP_IREL = @as(c_int, 247);
pub const R_PPC64_IRELATIVE = @as(c_int, 248);
pub const R_PPC64_REL16 = @as(c_int, 249);
pub const R_PPC64_REL16_LO = @as(c_int, 250);
pub const R_PPC64_REL16_HI = @as(c_int, 251);
pub const R_PPC64_REL16_HA = @as(c_int, 252);
pub const EF_PPC64_ABI = @as(c_int, 3);
pub const DT_PPC64_GLINK = DT_LOPROC + @as(c_int, 0);
pub const DT_PPC64_OPD = DT_LOPROC + @as(c_int, 1);
pub const DT_PPC64_OPDSZ = DT_LOPROC + @as(c_int, 2);
pub const DT_PPC64_OPT = DT_LOPROC + @as(c_int, 3);
pub const DT_PPC64_NUM = @as(c_int, 4);
pub const PPC64_OPT_TLS = @as(c_int, 1);
pub const PPC64_OPT_MULTI_TOC = @as(c_int, 2);
pub const PPC64_OPT_LOCALENTRY = @as(c_int, 4);
pub const STO_PPC64_LOCAL_BIT = @as(c_int, 5);
pub const STO_PPC64_LOCAL_MASK = @as(c_int, 7) << STO_PPC64_LOCAL_BIT;
pub inline fn PPC64_LOCAL_ENTRY_OFFSET(other: anytype) @TypeOf(((@as(c_int, 1) << ((other & STO_PPC64_LOCAL_MASK) >> STO_PPC64_LOCAL_BIT)) >> @as(c_int, 2)) << @as(c_int, 2)) {
    return ((@as(c_int, 1) << ((other & STO_PPC64_LOCAL_MASK) >> STO_PPC64_LOCAL_BIT)) >> @as(c_int, 2)) << @as(c_int, 2);
}
pub const EF_ARM_RELEXEC = @as(c_int, 0x01);
pub const EF_ARM_HASENTRY = @as(c_int, 0x02);
pub const EF_ARM_INTERWORK = @as(c_int, 0x04);
pub const EF_ARM_APCS_26 = @as(c_int, 0x08);
pub const EF_ARM_APCS_FLOAT = @as(c_int, 0x10);
pub const EF_ARM_PIC = @as(c_int, 0x20);
pub const EF_ARM_ALIGN8 = @as(c_int, 0x40);
pub const EF_ARM_NEW_ABI = @as(c_int, 0x80);
pub const EF_ARM_OLD_ABI = @as(c_int, 0x100);
pub const EF_ARM_SOFT_FLOAT = @as(c_int, 0x200);
pub const EF_ARM_VFP_FLOAT = @as(c_int, 0x400);
pub const EF_ARM_MAVERICK_FLOAT = @as(c_int, 0x800);
pub const EF_ARM_ABI_FLOAT_SOFT = @as(c_int, 0x200);
pub const EF_ARM_ABI_FLOAT_HARD = @as(c_int, 0x400);
pub const EF_ARM_SYMSARESORTED = @as(c_int, 0x04);
pub const EF_ARM_DYNSYMSUSESEGIDX = @as(c_int, 0x08);
pub const EF_ARM_MAPSYMSFIRST = @as(c_int, 0x10);
pub const EF_ARM_EABIMASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF000000, .hexadecimal);
pub const EF_ARM_BE8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal);
pub const EF_ARM_LE8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal);
pub inline fn EF_ARM_EABI_VERSION(flags: anytype) @TypeOf(flags & EF_ARM_EABIMASK) {
    return flags & EF_ARM_EABIMASK;
}
pub const EF_ARM_EABI_UNKNOWN = @as(c_int, 0x00000000);
pub const EF_ARM_EABI_VER1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal);
pub const EF_ARM_EABI_VER2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal);
pub const EF_ARM_EABI_VER3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x03000000, .hexadecimal);
pub const EF_ARM_EABI_VER4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal);
pub const EF_ARM_EABI_VER5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x05000000, .hexadecimal);
pub const STT_ARM_TFUNC = STT_LOPROC;
pub const STT_ARM_16BIT = STT_HIPROC;
pub const SHF_ARM_ENTRYSECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal);
pub const SHF_ARM_COMDEF = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal);
pub const PF_ARM_SB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal);
pub const PF_ARM_PI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const PF_ARM_ABS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal);
pub const PT_ARM_EXIDX = PT_LOPROC + @as(c_int, 1);
pub const SHT_ARM_EXIDX = SHT_LOPROC + @as(c_int, 1);
pub const SHT_ARM_PREEMPTMAP = SHT_LOPROC + @as(c_int, 2);
pub const SHT_ARM_ATTRIBUTES = SHT_LOPROC + @as(c_int, 3);
pub const R_AARCH64_NONE = @as(c_int, 0);
pub const R_AARCH64_P32_ABS32 = @as(c_int, 1);
pub const R_AARCH64_P32_COPY = @as(c_int, 180);
pub const R_AARCH64_P32_GLOB_DAT = @as(c_int, 181);
pub const R_AARCH64_P32_JUMP_SLOT = @as(c_int, 182);
pub const R_AARCH64_P32_RELATIVE = @as(c_int, 183);
pub const R_AARCH64_P32_TLS_DTPMOD = @as(c_int, 184);
pub const R_AARCH64_P32_TLS_DTPREL = @as(c_int, 185);
pub const R_AARCH64_P32_TLS_TPREL = @as(c_int, 186);
pub const R_AARCH64_P32_TLSDESC = @as(c_int, 187);
pub const R_AARCH64_P32_IRELATIVE = @as(c_int, 188);
pub const R_AARCH64_ABS64 = @as(c_int, 257);
pub const R_AARCH64_ABS32 = @as(c_int, 258);
pub const R_AARCH64_ABS16 = @as(c_int, 259);
pub const R_AARCH64_PREL64 = @as(c_int, 260);
pub const R_AARCH64_PREL32 = @as(c_int, 261);
pub const R_AARCH64_PREL16 = @as(c_int, 262);
pub const R_AARCH64_MOVW_UABS_G0 = @as(c_int, 263);
pub const R_AARCH64_MOVW_UABS_G0_NC = @as(c_int, 264);
pub const R_AARCH64_MOVW_UABS_G1 = @as(c_int, 265);
pub const R_AARCH64_MOVW_UABS_G1_NC = @as(c_int, 266);
pub const R_AARCH64_MOVW_UABS_G2 = @as(c_int, 267);
pub const R_AARCH64_MOVW_UABS_G2_NC = @as(c_int, 268);
pub const R_AARCH64_MOVW_UABS_G3 = @as(c_int, 269);
pub const R_AARCH64_MOVW_SABS_G0 = @as(c_int, 270);
pub const R_AARCH64_MOVW_SABS_G1 = @as(c_int, 271);
pub const R_AARCH64_MOVW_SABS_G2 = @as(c_int, 272);
pub const R_AARCH64_LD_PREL_LO19 = @as(c_int, 273);
pub const R_AARCH64_ADR_PREL_LO21 = @as(c_int, 274);
pub const R_AARCH64_ADR_PREL_PG_HI21 = @as(c_int, 275);
pub const R_AARCH64_ADR_PREL_PG_HI21_NC = @as(c_int, 276);
pub const R_AARCH64_ADD_ABS_LO12_NC = @as(c_int, 277);
pub const R_AARCH64_LDST8_ABS_LO12_NC = @as(c_int, 278);
pub const R_AARCH64_TSTBR14 = @as(c_int, 279);
pub const R_AARCH64_CONDBR19 = @as(c_int, 280);
pub const R_AARCH64_JUMP26 = @as(c_int, 282);
pub const R_AARCH64_CALL26 = @as(c_int, 283);
pub const R_AARCH64_LDST16_ABS_LO12_NC = @as(c_int, 284);
pub const R_AARCH64_LDST32_ABS_LO12_NC = @as(c_int, 285);
pub const R_AARCH64_LDST64_ABS_LO12_NC = @as(c_int, 286);
pub const R_AARCH64_MOVW_PREL_G0 = @as(c_int, 287);
pub const R_AARCH64_MOVW_PREL_G0_NC = @as(c_int, 288);
pub const R_AARCH64_MOVW_PREL_G1 = @as(c_int, 289);
pub const R_AARCH64_MOVW_PREL_G1_NC = @as(c_int, 290);
pub const R_AARCH64_MOVW_PREL_G2 = @as(c_int, 291);
pub const R_AARCH64_MOVW_PREL_G2_NC = @as(c_int, 292);
pub const R_AARCH64_MOVW_PREL_G3 = @as(c_int, 293);
pub const R_AARCH64_LDST128_ABS_LO12_NC = @as(c_int, 299);
pub const R_AARCH64_MOVW_GOTOFF_G0 = @as(c_int, 300);
pub const R_AARCH64_MOVW_GOTOFF_G0_NC = @as(c_int, 301);
pub const R_AARCH64_MOVW_GOTOFF_G1 = @as(c_int, 302);
pub const R_AARCH64_MOVW_GOTOFF_G1_NC = @as(c_int, 303);
pub const R_AARCH64_MOVW_GOTOFF_G2 = @as(c_int, 304);
pub const R_AARCH64_MOVW_GOTOFF_G2_NC = @as(c_int, 305);
pub const R_AARCH64_MOVW_GOTOFF_G3 = @as(c_int, 306);
pub const R_AARCH64_GOTREL64 = @as(c_int, 307);
pub const R_AARCH64_GOTREL32 = @as(c_int, 308);
pub const R_AARCH64_GOT_LD_PREL19 = @as(c_int, 309);
pub const R_AARCH64_LD64_GOTOFF_LO15 = @as(c_int, 310);
pub const R_AARCH64_ADR_GOT_PAGE = @as(c_int, 311);
pub const R_AARCH64_LD64_GOT_LO12_NC = @as(c_int, 312);
pub const R_AARCH64_LD64_GOTPAGE_LO15 = @as(c_int, 313);
pub const R_AARCH64_TLSGD_ADR_PREL21 = @as(c_int, 512);
pub const R_AARCH64_TLSGD_ADR_PAGE21 = @as(c_int, 513);
pub const R_AARCH64_TLSGD_ADD_LO12_NC = @as(c_int, 514);
pub const R_AARCH64_TLSGD_MOVW_G1 = @as(c_int, 515);
pub const R_AARCH64_TLSGD_MOVW_G0_NC = @as(c_int, 516);
pub const R_AARCH64_TLSLD_ADR_PREL21 = @as(c_int, 517);
pub const R_AARCH64_TLSLD_ADR_PAGE21 = @as(c_int, 518);
pub const R_AARCH64_TLSLD_ADD_LO12_NC = @as(c_int, 519);
pub const R_AARCH64_TLSLD_MOVW_G1 = @as(c_int, 520);
pub const R_AARCH64_TLSLD_MOVW_G0_NC = @as(c_int, 521);
pub const R_AARCH64_TLSLD_LD_PREL19 = @as(c_int, 522);
pub const R_AARCH64_TLSLD_MOVW_DTPREL_G2 = @as(c_int, 523);
pub const R_AARCH64_TLSLD_MOVW_DTPREL_G1 = @as(c_int, 524);
pub const R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC = @as(c_int, 525);
pub const R_AARCH64_TLSLD_MOVW_DTPREL_G0 = @as(c_int, 526);
pub const R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC = @as(c_int, 527);
pub const R_AARCH64_TLSLD_ADD_DTPREL_HI12 = @as(c_int, 528);
pub const R_AARCH64_TLSLD_ADD_DTPREL_LO12 = @as(c_int, 529);
pub const R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC = @as(c_int, 530);
pub const R_AARCH64_TLSLD_LDST8_DTPREL_LO12 = @as(c_int, 531);
pub const R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC = @as(c_int, 532);
pub const R_AARCH64_TLSLD_LDST16_DTPREL_LO12 = @as(c_int, 533);
pub const R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC = @as(c_int, 534);
pub const R_AARCH64_TLSLD_LDST32_DTPREL_LO12 = @as(c_int, 535);
pub const R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC = @as(c_int, 536);
pub const R_AARCH64_TLSLD_LDST64_DTPREL_LO12 = @as(c_int, 537);
pub const R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC = @as(c_int, 538);
pub const R_AARCH64_TLSIE_MOVW_GOTTPREL_G1 = @as(c_int, 539);
pub const R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC = @as(c_int, 540);
pub const R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21 = @as(c_int, 541);
pub const R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC = @as(c_int, 542);
pub const R_AARCH64_TLSIE_LD_GOTTPREL_PREL19 = @as(c_int, 543);
pub const R_AARCH64_TLSLE_MOVW_TPREL_G2 = @as(c_int, 544);
pub const R_AARCH64_TLSLE_MOVW_TPREL_G1 = @as(c_int, 545);
pub const R_AARCH64_TLSLE_MOVW_TPREL_G1_NC = @as(c_int, 546);
pub const R_AARCH64_TLSLE_MOVW_TPREL_G0 = @as(c_int, 547);
pub const R_AARCH64_TLSLE_MOVW_TPREL_G0_NC = @as(c_int, 548);
pub const R_AARCH64_TLSLE_ADD_TPREL_HI12 = @as(c_int, 549);
pub const R_AARCH64_TLSLE_ADD_TPREL_LO12 = @as(c_int, 550);
pub const R_AARCH64_TLSLE_ADD_TPREL_LO12_NC = @as(c_int, 551);
pub const R_AARCH64_TLSLE_LDST8_TPREL_LO12 = @as(c_int, 552);
pub const R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC = @as(c_int, 553);
pub const R_AARCH64_TLSLE_LDST16_TPREL_LO12 = @as(c_int, 554);
pub const R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC = @as(c_int, 555);
pub const R_AARCH64_TLSLE_LDST32_TPREL_LO12 = @as(c_int, 556);
pub const R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC = @as(c_int, 557);
pub const R_AARCH64_TLSLE_LDST64_TPREL_LO12 = @as(c_int, 558);
pub const R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC = @as(c_int, 559);
pub const R_AARCH64_TLSDESC_LD_PREL19 = @as(c_int, 560);
pub const R_AARCH64_TLSDESC_ADR_PREL21 = @as(c_int, 561);
pub const R_AARCH64_TLSDESC_ADR_PAGE21 = @as(c_int, 562);
pub const R_AARCH64_TLSDESC_LD64_LO12 = @as(c_int, 563);
pub const R_AARCH64_TLSDESC_ADD_LO12 = @as(c_int, 564);
pub const R_AARCH64_TLSDESC_OFF_G1 = @as(c_int, 565);
pub const R_AARCH64_TLSDESC_OFF_G0_NC = @as(c_int, 566);
pub const R_AARCH64_TLSDESC_LDR = @as(c_int, 567);
pub const R_AARCH64_TLSDESC_ADD = @as(c_int, 568);
pub const R_AARCH64_TLSDESC_CALL = @as(c_int, 569);
pub const R_AARCH64_TLSLE_LDST128_TPREL_LO12 = @as(c_int, 570);
pub const R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC = @as(c_int, 571);
pub const R_AARCH64_TLSLD_LDST128_DTPREL_LO12 = @as(c_int, 572);
pub const R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC = @as(c_int, 573);
pub const R_AARCH64_COPY = @as(c_int, 1024);
pub const R_AARCH64_GLOB_DAT = @as(c_int, 1025);
pub const R_AARCH64_JUMP_SLOT = @as(c_int, 1026);
pub const R_AARCH64_RELATIVE = @as(c_int, 1027);
pub const R_AARCH64_TLS_DTPMOD = @as(c_int, 1028);
pub const R_AARCH64_TLS_DTPREL = @as(c_int, 1029);
pub const R_AARCH64_TLS_TPREL = @as(c_int, 1030);
pub const R_AARCH64_TLSDESC = @as(c_int, 1031);
pub const R_AARCH64_IRELATIVE = @as(c_int, 1032);
pub const DT_AARCH64_BTI_PLT = DT_LOPROC + @as(c_int, 1);
pub const DT_AARCH64_PAC_PLT = DT_LOPROC + @as(c_int, 3);
pub const DT_AARCH64_VARIANT_PCS = DT_LOPROC + @as(c_int, 5);
pub const DT_AARCH64_NUM = @as(c_int, 6);
pub const STO_AARCH64_VARIANT_PCS = @as(c_int, 0x80);
pub const R_ARM_NONE = @as(c_int, 0);
pub const R_ARM_PC24 = @as(c_int, 1);
pub const R_ARM_ABS32 = @as(c_int, 2);
pub const R_ARM_REL32 = @as(c_int, 3);
pub const R_ARM_PC13 = @as(c_int, 4);
pub const R_ARM_ABS16 = @as(c_int, 5);
pub const R_ARM_ABS12 = @as(c_int, 6);
pub const R_ARM_THM_ABS5 = @as(c_int, 7);
pub const R_ARM_ABS8 = @as(c_int, 8);
pub const R_ARM_SBREL32 = @as(c_int, 9);
pub const R_ARM_THM_PC22 = @as(c_int, 10);
pub const R_ARM_THM_PC8 = @as(c_int, 11);
pub const R_ARM_AMP_VCALL9 = @as(c_int, 12);
pub const R_ARM_SWI24 = @as(c_int, 13);
pub const R_ARM_TLS_DESC = @as(c_int, 13);
pub const R_ARM_THM_SWI8 = @as(c_int, 14);
pub const R_ARM_XPC25 = @as(c_int, 15);
pub const R_ARM_THM_XPC22 = @as(c_int, 16);
pub const R_ARM_TLS_DTPMOD32 = @as(c_int, 17);
pub const R_ARM_TLS_DTPOFF32 = @as(c_int, 18);
pub const R_ARM_TLS_TPOFF32 = @as(c_int, 19);
pub const R_ARM_COPY = @as(c_int, 20);
pub const R_ARM_GLOB_DAT = @as(c_int, 21);
pub const R_ARM_JUMP_SLOT = @as(c_int, 22);
pub const R_ARM_RELATIVE = @as(c_int, 23);
pub const R_ARM_GOTOFF = @as(c_int, 24);
pub const R_ARM_GOTPC = @as(c_int, 25);
pub const R_ARM_GOT32 = @as(c_int, 26);
pub const R_ARM_PLT32 = @as(c_int, 27);
pub const R_ARM_CALL = @as(c_int, 28);
pub const R_ARM_JUMP24 = @as(c_int, 29);
pub const R_ARM_THM_JUMP24 = @as(c_int, 30);
pub const R_ARM_BASE_ABS = @as(c_int, 31);
pub const R_ARM_ALU_PCREL_7_0 = @as(c_int, 32);
pub const R_ARM_ALU_PCREL_15_8 = @as(c_int, 33);
pub const R_ARM_ALU_PCREL_23_15 = @as(c_int, 34);
pub const R_ARM_LDR_SBREL_11_0 = @as(c_int, 35);
pub const R_ARM_ALU_SBREL_19_12 = @as(c_int, 36);
pub const R_ARM_ALU_SBREL_27_20 = @as(c_int, 37);
pub const R_ARM_TARGET1 = @as(c_int, 38);
pub const R_ARM_SBREL31 = @as(c_int, 39);
pub const R_ARM_V4BX = @as(c_int, 40);
pub const R_ARM_TARGET2 = @as(c_int, 41);
pub const R_ARM_PREL31 = @as(c_int, 42);
pub const R_ARM_MOVW_ABS_NC = @as(c_int, 43);
pub const R_ARM_MOVT_ABS = @as(c_int, 44);
pub const R_ARM_MOVW_PREL_NC = @as(c_int, 45);
pub const R_ARM_MOVT_PREL = @as(c_int, 46);
pub const R_ARM_THM_MOVW_ABS_NC = @as(c_int, 47);
pub const R_ARM_THM_MOVT_ABS = @as(c_int, 48);
pub const R_ARM_THM_MOVW_PREL_NC = @as(c_int, 49);
pub const R_ARM_THM_MOVT_PREL = @as(c_int, 50);
pub const R_ARM_THM_JUMP19 = @as(c_int, 51);
pub const R_ARM_THM_JUMP6 = @as(c_int, 52);
pub const R_ARM_THM_ALU_PREL_11_0 = @as(c_int, 53);
pub const R_ARM_THM_PC12 = @as(c_int, 54);
pub const R_ARM_ABS32_NOI = @as(c_int, 55);
pub const R_ARM_REL32_NOI = @as(c_int, 56);
pub const R_ARM_ALU_PC_G0_NC = @as(c_int, 57);
pub const R_ARM_ALU_PC_G0 = @as(c_int, 58);
pub const R_ARM_ALU_PC_G1_NC = @as(c_int, 59);
pub const R_ARM_ALU_PC_G1 = @as(c_int, 60);
pub const R_ARM_ALU_PC_G2 = @as(c_int, 61);
pub const R_ARM_LDR_PC_G1 = @as(c_int, 62);
pub const R_ARM_LDR_PC_G2 = @as(c_int, 63);
pub const R_ARM_LDRS_PC_G0 = @as(c_int, 64);
pub const R_ARM_LDRS_PC_G1 = @as(c_int, 65);
pub const R_ARM_LDRS_PC_G2 = @as(c_int, 66);
pub const R_ARM_LDC_PC_G0 = @as(c_int, 67);
pub const R_ARM_LDC_PC_G1 = @as(c_int, 68);
pub const R_ARM_LDC_PC_G2 = @as(c_int, 69);
pub const R_ARM_ALU_SB_G0_NC = @as(c_int, 70);
pub const R_ARM_ALU_SB_G0 = @as(c_int, 71);
pub const R_ARM_ALU_SB_G1_NC = @as(c_int, 72);
pub const R_ARM_ALU_SB_G1 = @as(c_int, 73);
pub const R_ARM_ALU_SB_G2 = @as(c_int, 74);
pub const R_ARM_LDR_SB_G0 = @as(c_int, 75);
pub const R_ARM_LDR_SB_G1 = @as(c_int, 76);
pub const R_ARM_LDR_SB_G2 = @as(c_int, 77);
pub const R_ARM_LDRS_SB_G0 = @as(c_int, 78);
pub const R_ARM_LDRS_SB_G1 = @as(c_int, 79);
pub const R_ARM_LDRS_SB_G2 = @as(c_int, 80);
pub const R_ARM_LDC_SB_G0 = @as(c_int, 81);
pub const R_ARM_LDC_SB_G1 = @as(c_int, 82);
pub const R_ARM_LDC_SB_G2 = @as(c_int, 83);
pub const R_ARM_MOVW_BREL_NC = @as(c_int, 84);
pub const R_ARM_MOVT_BREL = @as(c_int, 85);
pub const R_ARM_MOVW_BREL = @as(c_int, 86);
pub const R_ARM_THM_MOVW_BREL_NC = @as(c_int, 87);
pub const R_ARM_THM_MOVT_BREL = @as(c_int, 88);
pub const R_ARM_THM_MOVW_BREL = @as(c_int, 89);
pub const R_ARM_TLS_GOTDESC = @as(c_int, 90);
pub const R_ARM_TLS_CALL = @as(c_int, 91);
pub const R_ARM_TLS_DESCSEQ = @as(c_int, 92);
pub const R_ARM_THM_TLS_CALL = @as(c_int, 93);
pub const R_ARM_PLT32_ABS = @as(c_int, 94);
pub const R_ARM_GOT_ABS = @as(c_int, 95);
pub const R_ARM_GOT_PREL = @as(c_int, 96);
pub const R_ARM_GOT_BREL12 = @as(c_int, 97);
pub const R_ARM_GOTOFF12 = @as(c_int, 98);
pub const R_ARM_GOTRELAX = @as(c_int, 99);
pub const R_ARM_GNU_VTENTRY = @as(c_int, 100);
pub const R_ARM_GNU_VTINHERIT = @as(c_int, 101);
pub const R_ARM_THM_PC11 = @as(c_int, 102);
pub const R_ARM_THM_PC9 = @as(c_int, 103);
pub const R_ARM_TLS_GD32 = @as(c_int, 104);
pub const R_ARM_TLS_LDM32 = @as(c_int, 105);
pub const R_ARM_TLS_LDO32 = @as(c_int, 106);
pub const R_ARM_TLS_IE32 = @as(c_int, 107);
pub const R_ARM_TLS_LE32 = @as(c_int, 108);
pub const R_ARM_TLS_LDO12 = @as(c_int, 109);
pub const R_ARM_TLS_LE12 = @as(c_int, 110);
pub const R_ARM_TLS_IE12GP = @as(c_int, 111);
pub const R_ARM_ME_TOO = @as(c_int, 128);
pub const R_ARM_THM_TLS_DESCSEQ = @as(c_int, 129);
pub const R_ARM_THM_TLS_DESCSEQ16 = @as(c_int, 129);
pub const R_ARM_THM_TLS_DESCSEQ32 = @as(c_int, 130);
pub const R_ARM_THM_GOT_BREL12 = @as(c_int, 131);
pub const R_ARM_IRELATIVE = @as(c_int, 160);
pub const R_ARM_RXPC25 = @as(c_int, 249);
pub const R_ARM_RSBREL32 = @as(c_int, 250);
pub const R_ARM_THM_RPC22 = @as(c_int, 251);
pub const R_ARM_RREL32 = @as(c_int, 252);
pub const R_ARM_RABS22 = @as(c_int, 253);
pub const R_ARM_RPC24 = @as(c_int, 254);
pub const R_ARM_RBASE = @as(c_int, 255);
pub const R_ARM_NUM = @as(c_int, 256);
pub const R_CKCORE_NONE = @as(c_int, 0);
pub const R_CKCORE_ADDR32 = @as(c_int, 1);
pub const R_CKCORE_PCRELIMM8BY4 = @as(c_int, 2);
pub const R_CKCORE_PCRELIMM11BY2 = @as(c_int, 3);
pub const R_CKCORE_PCREL32 = @as(c_int, 5);
pub const R_CKCORE_PCRELJSR_IMM11BY2 = @as(c_int, 6);
pub const R_CKCORE_RELATIVE = @as(c_int, 9);
pub const R_CKCORE_COPY = @as(c_int, 10);
pub const R_CKCORE_GLOB_DAT = @as(c_int, 11);
pub const R_CKCORE_JUMP_SLOT = @as(c_int, 12);
pub const R_CKCORE_GOTOFF = @as(c_int, 13);
pub const R_CKCORE_GOTPC = @as(c_int, 14);
pub const R_CKCORE_GOT32 = @as(c_int, 15);
pub const R_CKCORE_PLT32 = @as(c_int, 16);
pub const R_CKCORE_ADDRGOT = @as(c_int, 17);
pub const R_CKCORE_ADDRPLT = @as(c_int, 18);
pub const R_CKCORE_PCREL_IMM26BY2 = @as(c_int, 19);
pub const R_CKCORE_PCREL_IMM16BY2 = @as(c_int, 20);
pub const R_CKCORE_PCREL_IMM16BY4 = @as(c_int, 21);
pub const R_CKCORE_PCREL_IMM10BY2 = @as(c_int, 22);
pub const R_CKCORE_PCREL_IMM10BY4 = @as(c_int, 23);
pub const R_CKCORE_ADDR_HI16 = @as(c_int, 24);
pub const R_CKCORE_ADDR_LO16 = @as(c_int, 25);
pub const R_CKCORE_GOTPC_HI16 = @as(c_int, 26);
pub const R_CKCORE_GOTPC_LO16 = @as(c_int, 27);
pub const R_CKCORE_GOTOFF_HI16 = @as(c_int, 28);
pub const R_CKCORE_GOTOFF_LO16 = @as(c_int, 29);
pub const R_CKCORE_GOT12 = @as(c_int, 30);
pub const R_CKCORE_GOT_HI16 = @as(c_int, 31);
pub const R_CKCORE_GOT_LO16 = @as(c_int, 32);
pub const R_CKCORE_PLT12 = @as(c_int, 33);
pub const R_CKCORE_PLT_HI16 = @as(c_int, 34);
pub const R_CKCORE_PLT_LO16 = @as(c_int, 35);
pub const R_CKCORE_ADDRGOT_HI16 = @as(c_int, 36);
pub const R_CKCORE_ADDRGOT_LO16 = @as(c_int, 37);
pub const R_CKCORE_ADDRPLT_HI16 = @as(c_int, 38);
pub const R_CKCORE_ADDRPLT_LO16 = @as(c_int, 39);
pub const R_CKCORE_PCREL_JSR_IMM26BY2 = @as(c_int, 40);
pub const R_CKCORE_TOFFSET_LO16 = @as(c_int, 41);
pub const R_CKCORE_DOFFSET_LO16 = @as(c_int, 42);
pub const R_CKCORE_PCREL_IMM18BY2 = @as(c_int, 43);
pub const R_CKCORE_DOFFSET_IMM18 = @as(c_int, 44);
pub const R_CKCORE_DOFFSET_IMM18BY2 = @as(c_int, 45);
pub const R_CKCORE_DOFFSET_IMM18BY4 = @as(c_int, 46);
pub const R_CKCORE_GOT_IMM18BY4 = @as(c_int, 48);
pub const R_CKCORE_PLT_IMM18BY4 = @as(c_int, 49);
pub const R_CKCORE_PCREL_IMM7BY4 = @as(c_int, 50);
pub const R_CKCORE_TLS_LE32 = @as(c_int, 51);
pub const R_CKCORE_TLS_IE32 = @as(c_int, 52);
pub const R_CKCORE_TLS_GD32 = @as(c_int, 53);
pub const R_CKCORE_TLS_LDM32 = @as(c_int, 54);
pub const R_CKCORE_TLS_LDO32 = @as(c_int, 55);
pub const R_CKCORE_TLS_DTPMOD32 = @as(c_int, 56);
pub const R_CKCORE_TLS_DTPOFF32 = @as(c_int, 57);
pub const R_CKCORE_TLS_TPOFF32 = @as(c_int, 58);
pub const EF_CSKY_ABIMASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xF0000000, .hexadecimal);
pub const EF_CSKY_OTHER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0FFF0000, .hexadecimal);
pub const EF_CSKY_PROCESSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000FFFF, .hexadecimal);
pub const EF_CSKY_ABIV1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal);
pub const EF_CSKY_ABIV2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const SHT_CSKY_ATTRIBUTES = SHT_LOPROC + @as(c_int, 1);
pub const EF_IA_64_MASKOS = @as(c_int, 0x0000000f);
pub const EF_IA_64_ABI64 = @as(c_int, 0x00000010);
pub const EF_IA_64_ARCH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff000000, .hexadecimal);
pub const PT_IA_64_ARCHEXT = PT_LOPROC + @as(c_int, 0);
pub const PT_IA_64_UNWIND = PT_LOPROC + @as(c_int, 1);
pub const PT_IA_64_HP_OPT_ANOT = PT_LOOS + @as(c_int, 0x12);
pub const PT_IA_64_HP_HSL_ANOT = PT_LOOS + @as(c_int, 0x13);
pub const PT_IA_64_HP_STACK = PT_LOOS + @as(c_int, 0x14);
pub const PF_IA_64_NORECOV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal);
pub const SHT_IA_64_EXT = SHT_LOPROC + @as(c_int, 0);
pub const SHT_IA_64_UNWIND = SHT_LOPROC + @as(c_int, 1);
pub const SHF_IA_64_SHORT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal);
pub const SHF_IA_64_NORECOV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const DT_IA_64_PLT_RESERVE = DT_LOPROC + @as(c_int, 0);
pub const DT_IA_64_NUM = @as(c_int, 1);
pub const R_IA64_NONE = @as(c_int, 0x00);
pub const R_IA64_IMM14 = @as(c_int, 0x21);
pub const R_IA64_IMM22 = @as(c_int, 0x22);
pub const R_IA64_IMM64 = @as(c_int, 0x23);
pub const R_IA64_DIR32MSB = @as(c_int, 0x24);
pub const R_IA64_DIR32LSB = @as(c_int, 0x25);
pub const R_IA64_DIR64MSB = @as(c_int, 0x26);
pub const R_IA64_DIR64LSB = @as(c_int, 0x27);
pub const R_IA64_GPREL22 = @as(c_int, 0x2a);
pub const R_IA64_GPREL64I = @as(c_int, 0x2b);
pub const R_IA64_GPREL32MSB = @as(c_int, 0x2c);
pub const R_IA64_GPREL32LSB = @as(c_int, 0x2d);
pub const R_IA64_GPREL64MSB = @as(c_int, 0x2e);
pub const R_IA64_GPREL64LSB = @as(c_int, 0x2f);
pub const R_IA64_LTOFF22 = @as(c_int, 0x32);
pub const R_IA64_LTOFF64I = @as(c_int, 0x33);
pub const R_IA64_PLTOFF22 = @as(c_int, 0x3a);
pub const R_IA64_PLTOFF64I = @as(c_int, 0x3b);
pub const R_IA64_PLTOFF64MSB = @as(c_int, 0x3e);
pub const R_IA64_PLTOFF64LSB = @as(c_int, 0x3f);
pub const R_IA64_FPTR64I = @as(c_int, 0x43);
pub const R_IA64_FPTR32MSB = @as(c_int, 0x44);
pub const R_IA64_FPTR32LSB = @as(c_int, 0x45);
pub const R_IA64_FPTR64MSB = @as(c_int, 0x46);
pub const R_IA64_FPTR64LSB = @as(c_int, 0x47);
pub const R_IA64_PCREL60B = @as(c_int, 0x48);
pub const R_IA64_PCREL21B = @as(c_int, 0x49);
pub const R_IA64_PCREL21M = @as(c_int, 0x4a);
pub const R_IA64_PCREL21F = @as(c_int, 0x4b);
pub const R_IA64_PCREL32MSB = @as(c_int, 0x4c);
pub const R_IA64_PCREL32LSB = @as(c_int, 0x4d);
pub const R_IA64_PCREL64MSB = @as(c_int, 0x4e);
pub const R_IA64_PCREL64LSB = @as(c_int, 0x4f);
pub const R_IA64_LTOFF_FPTR22 = @as(c_int, 0x52);
pub const R_IA64_LTOFF_FPTR64I = @as(c_int, 0x53);
pub const R_IA64_LTOFF_FPTR32MSB = @as(c_int, 0x54);
pub const R_IA64_LTOFF_FPTR32LSB = @as(c_int, 0x55);
pub const R_IA64_LTOFF_FPTR64MSB = @as(c_int, 0x56);
pub const R_IA64_LTOFF_FPTR64LSB = @as(c_int, 0x57);
pub const R_IA64_SEGREL32MSB = @as(c_int, 0x5c);
pub const R_IA64_SEGREL32LSB = @as(c_int, 0x5d);
pub const R_IA64_SEGREL64MSB = @as(c_int, 0x5e);
pub const R_IA64_SEGREL64LSB = @as(c_int, 0x5f);
pub const R_IA64_SECREL32MSB = @as(c_int, 0x64);
pub const R_IA64_SECREL32LSB = @as(c_int, 0x65);
pub const R_IA64_SECREL64MSB = @as(c_int, 0x66);
pub const R_IA64_SECREL64LSB = @as(c_int, 0x67);
pub const R_IA64_REL32MSB = @as(c_int, 0x6c);
pub const R_IA64_REL32LSB = @as(c_int, 0x6d);
pub const R_IA64_REL64MSB = @as(c_int, 0x6e);
pub const R_IA64_REL64LSB = @as(c_int, 0x6f);
pub const R_IA64_LTV32MSB = @as(c_int, 0x74);
pub const R_IA64_LTV32LSB = @as(c_int, 0x75);
pub const R_IA64_LTV64MSB = @as(c_int, 0x76);
pub const R_IA64_LTV64LSB = @as(c_int, 0x77);
pub const R_IA64_PCREL21BI = @as(c_int, 0x79);
pub const R_IA64_PCREL22 = @as(c_int, 0x7a);
pub const R_IA64_PCREL64I = @as(c_int, 0x7b);
pub const R_IA64_IPLTMSB = @as(c_int, 0x80);
pub const R_IA64_IPLTLSB = @as(c_int, 0x81);
pub const R_IA64_COPY = @as(c_int, 0x84);
pub const R_IA64_SUB = @as(c_int, 0x85);
pub const R_IA64_LTOFF22X = @as(c_int, 0x86);
pub const R_IA64_LDXMOV = @as(c_int, 0x87);
pub const R_IA64_TPREL14 = @as(c_int, 0x91);
pub const R_IA64_TPREL22 = @as(c_int, 0x92);
pub const R_IA64_TPREL64I = @as(c_int, 0x93);
pub const R_IA64_TPREL64MSB = @as(c_int, 0x96);
pub const R_IA64_TPREL64LSB = @as(c_int, 0x97);
pub const R_IA64_LTOFF_TPREL22 = @as(c_int, 0x9a);
pub const R_IA64_DTPMOD64MSB = @as(c_int, 0xa6);
pub const R_IA64_DTPMOD64LSB = @as(c_int, 0xa7);
pub const R_IA64_LTOFF_DTPMOD22 = @as(c_int, 0xaa);
pub const R_IA64_DTPREL14 = @as(c_int, 0xb1);
pub const R_IA64_DTPREL22 = @as(c_int, 0xb2);
pub const R_IA64_DTPREL64I = @as(c_int, 0xb3);
pub const R_IA64_DTPREL32MSB = @as(c_int, 0xb4);
pub const R_IA64_DTPREL32LSB = @as(c_int, 0xb5);
pub const R_IA64_DTPREL64MSB = @as(c_int, 0xb6);
pub const R_IA64_DTPREL64LSB = @as(c_int, 0xb7);
pub const R_IA64_LTOFF_DTPREL22 = @as(c_int, 0xba);
pub const EF_SH_MACH_MASK = @as(c_int, 0x1f);
pub const EF_SH_UNKNOWN = @as(c_int, 0x0);
pub const EF_SH1 = @as(c_int, 0x1);
pub const EF_SH2 = @as(c_int, 0x2);
pub const EF_SH3 = @as(c_int, 0x3);
pub const EF_SH_DSP = @as(c_int, 0x4);
pub const EF_SH3_DSP = @as(c_int, 0x5);
pub const EF_SH4AL_DSP = @as(c_int, 0x6);
pub const EF_SH3E = @as(c_int, 0x8);
pub const EF_SH4 = @as(c_int, 0x9);
pub const EF_SH2E = @as(c_int, 0xb);
pub const EF_SH4A = @as(c_int, 0xc);
pub const EF_SH2A = @as(c_int, 0xd);
pub const EF_SH4_NOFPU = @as(c_int, 0x10);
pub const EF_SH4A_NOFPU = @as(c_int, 0x11);
pub const EF_SH4_NOMMU_NOFPU = @as(c_int, 0x12);
pub const EF_SH2A_NOFPU = @as(c_int, 0x13);
pub const EF_SH3_NOMMU = @as(c_int, 0x14);
pub const EF_SH2A_SH4_NOFPU = @as(c_int, 0x15);
pub const EF_SH2A_SH3_NOFPU = @as(c_int, 0x16);
pub const EF_SH2A_SH4 = @as(c_int, 0x17);
pub const EF_SH2A_SH3E = @as(c_int, 0x18);
pub const R_SH_NONE = @as(c_int, 0);
pub const R_SH_DIR32 = @as(c_int, 1);
pub const R_SH_REL32 = @as(c_int, 2);
pub const R_SH_DIR8WPN = @as(c_int, 3);
pub const R_SH_IND12W = @as(c_int, 4);
pub const R_SH_DIR8WPL = @as(c_int, 5);
pub const R_SH_DIR8WPZ = @as(c_int, 6);
pub const R_SH_DIR8BP = @as(c_int, 7);
pub const R_SH_DIR8W = @as(c_int, 8);
pub const R_SH_DIR8L = @as(c_int, 9);
pub const R_SH_SWITCH16 = @as(c_int, 25);
pub const R_SH_SWITCH32 = @as(c_int, 26);
pub const R_SH_USES = @as(c_int, 27);
pub const R_SH_COUNT = @as(c_int, 28);
pub const R_SH_ALIGN = @as(c_int, 29);
pub const R_SH_CODE = @as(c_int, 30);
pub const R_SH_DATA = @as(c_int, 31);
pub const R_SH_LABEL = @as(c_int, 32);
pub const R_SH_SWITCH8 = @as(c_int, 33);
pub const R_SH_GNU_VTINHERIT = @as(c_int, 34);
pub const R_SH_GNU_VTENTRY = @as(c_int, 35);
pub const R_SH_TLS_GD_32 = @as(c_int, 144);
pub const R_SH_TLS_LD_32 = @as(c_int, 145);
pub const R_SH_TLS_LDO_32 = @as(c_int, 146);
pub const R_SH_TLS_IE_32 = @as(c_int, 147);
pub const R_SH_TLS_LE_32 = @as(c_int, 148);
pub const R_SH_TLS_DTPMOD32 = @as(c_int, 149);
pub const R_SH_TLS_DTPOFF32 = @as(c_int, 150);
pub const R_SH_TLS_TPOFF32 = @as(c_int, 151);
pub const R_SH_GOT32 = @as(c_int, 160);
pub const R_SH_PLT32 = @as(c_int, 161);
pub const R_SH_COPY = @as(c_int, 162);
pub const R_SH_GLOB_DAT = @as(c_int, 163);
pub const R_SH_JMP_SLOT = @as(c_int, 164);
pub const R_SH_RELATIVE = @as(c_int, 165);
pub const R_SH_GOTOFF = @as(c_int, 166);
pub const R_SH_GOTPC = @as(c_int, 167);
pub const R_SH_NUM = @as(c_int, 256);
pub const EF_S390_HIGH_GPRS = @as(c_int, 0x00000001);
pub const R_390_NONE = @as(c_int, 0);
pub const R_390_8 = @as(c_int, 1);
pub const R_390_12 = @as(c_int, 2);
pub const R_390_16 = @as(c_int, 3);
pub const R_390_32 = @as(c_int, 4);
pub const R_390_PC32 = @as(c_int, 5);
pub const R_390_GOT12 = @as(c_int, 6);
pub const R_390_GOT32 = @as(c_int, 7);
pub const R_390_PLT32 = @as(c_int, 8);
pub const R_390_COPY = @as(c_int, 9);
pub const R_390_GLOB_DAT = @as(c_int, 10);
pub const R_390_JMP_SLOT = @as(c_int, 11);
pub const R_390_RELATIVE = @as(c_int, 12);
pub const R_390_GOTOFF32 = @as(c_int, 13);
pub const R_390_GOTPC = @as(c_int, 14);
pub const R_390_GOT16 = @as(c_int, 15);
pub const R_390_PC16 = @as(c_int, 16);
pub const R_390_PC16DBL = @as(c_int, 17);
pub const R_390_PLT16DBL = @as(c_int, 18);
pub const R_390_PC32DBL = @as(c_int, 19);
pub const R_390_PLT32DBL = @as(c_int, 20);
pub const R_390_GOTPCDBL = @as(c_int, 21);
pub const R_390_64 = @as(c_int, 22);
pub const R_390_PC64 = @as(c_int, 23);
pub const R_390_GOT64 = @as(c_int, 24);
pub const R_390_PLT64 = @as(c_int, 25);
pub const R_390_GOTENT = @as(c_int, 26);
pub const R_390_GOTOFF16 = @as(c_int, 27);
pub const R_390_GOTOFF64 = @as(c_int, 28);
pub const R_390_GOTPLT12 = @as(c_int, 29);
pub const R_390_GOTPLT16 = @as(c_int, 30);
pub const R_390_GOTPLT32 = @as(c_int, 31);
pub const R_390_GOTPLT64 = @as(c_int, 32);
pub const R_390_GOTPLTENT = @as(c_int, 33);
pub const R_390_PLTOFF16 = @as(c_int, 34);
pub const R_390_PLTOFF32 = @as(c_int, 35);
pub const R_390_PLTOFF64 = @as(c_int, 36);
pub const R_390_TLS_LOAD = @as(c_int, 37);
pub const R_390_TLS_GDCALL = @as(c_int, 38);
pub const R_390_TLS_LDCALL = @as(c_int, 39);
pub const R_390_TLS_GD32 = @as(c_int, 40);
pub const R_390_TLS_GD64 = @as(c_int, 41);
pub const R_390_TLS_GOTIE12 = @as(c_int, 42);
pub const R_390_TLS_GOTIE32 = @as(c_int, 43);
pub const R_390_TLS_GOTIE64 = @as(c_int, 44);
pub const R_390_TLS_LDM32 = @as(c_int, 45);
pub const R_390_TLS_LDM64 = @as(c_int, 46);
pub const R_390_TLS_IE32 = @as(c_int, 47);
pub const R_390_TLS_IE64 = @as(c_int, 48);
pub const R_390_TLS_IEENT = @as(c_int, 49);
pub const R_390_TLS_LE32 = @as(c_int, 50);
pub const R_390_TLS_LE64 = @as(c_int, 51);
pub const R_390_TLS_LDO32 = @as(c_int, 52);
pub const R_390_TLS_LDO64 = @as(c_int, 53);
pub const R_390_TLS_DTPMOD = @as(c_int, 54);
pub const R_390_TLS_DTPOFF = @as(c_int, 55);
pub const R_390_TLS_TPOFF = @as(c_int, 56);
pub const R_390_20 = @as(c_int, 57);
pub const R_390_GOT20 = @as(c_int, 58);
pub const R_390_GOTPLT20 = @as(c_int, 59);
pub const R_390_TLS_GOTIE20 = @as(c_int, 60);
pub const R_390_IRELATIVE = @as(c_int, 61);
pub const R_390_NUM = @as(c_int, 62);
pub const R_CRIS_NONE = @as(c_int, 0);
pub const R_CRIS_8 = @as(c_int, 1);
pub const R_CRIS_16 = @as(c_int, 2);
pub const R_CRIS_32 = @as(c_int, 3);
pub const R_CRIS_8_PCREL = @as(c_int, 4);
pub const R_CRIS_16_PCREL = @as(c_int, 5);
pub const R_CRIS_32_PCREL = @as(c_int, 6);
pub const R_CRIS_GNU_VTINHERIT = @as(c_int, 7);
pub const R_CRIS_GNU_VTENTRY = @as(c_int, 8);
pub const R_CRIS_COPY = @as(c_int, 9);
pub const R_CRIS_GLOB_DAT = @as(c_int, 10);
pub const R_CRIS_JUMP_SLOT = @as(c_int, 11);
pub const R_CRIS_RELATIVE = @as(c_int, 12);
pub const R_CRIS_16_GOT = @as(c_int, 13);
pub const R_CRIS_32_GOT = @as(c_int, 14);
pub const R_CRIS_16_GOTPLT = @as(c_int, 15);
pub const R_CRIS_32_GOTPLT = @as(c_int, 16);
pub const R_CRIS_32_GOTREL = @as(c_int, 17);
pub const R_CRIS_32_PLT_GOTREL = @as(c_int, 18);
pub const R_CRIS_32_PLT_PCREL = @as(c_int, 19);
pub const R_CRIS_NUM = @as(c_int, 20);
pub const R_X86_64_NONE = @as(c_int, 0);
pub const R_X86_64_64 = @as(c_int, 1);
pub const R_X86_64_PC32 = @as(c_int, 2);
pub const R_X86_64_GOT32 = @as(c_int, 3);
pub const R_X86_64_PLT32 = @as(c_int, 4);
pub const R_X86_64_COPY = @as(c_int, 5);
pub const R_X86_64_GLOB_DAT = @as(c_int, 6);
pub const R_X86_64_JUMP_SLOT = @as(c_int, 7);
pub const R_X86_64_RELATIVE = @as(c_int, 8);
pub const R_X86_64_GOTPCREL = @as(c_int, 9);
pub const R_X86_64_32 = @as(c_int, 10);
pub const R_X86_64_32S = @as(c_int, 11);
pub const R_X86_64_16 = @as(c_int, 12);
pub const R_X86_64_PC16 = @as(c_int, 13);
pub const R_X86_64_8 = @as(c_int, 14);
pub const R_X86_64_PC8 = @as(c_int, 15);
pub const R_X86_64_DTPMOD64 = @as(c_int, 16);
pub const R_X86_64_DTPOFF64 = @as(c_int, 17);
pub const R_X86_64_TPOFF64 = @as(c_int, 18);
pub const R_X86_64_TLSGD = @as(c_int, 19);
pub const R_X86_64_TLSLD = @as(c_int, 20);
pub const R_X86_64_DTPOFF32 = @as(c_int, 21);
pub const R_X86_64_GOTTPOFF = @as(c_int, 22);
pub const R_X86_64_TPOFF32 = @as(c_int, 23);
pub const R_X86_64_PC64 = @as(c_int, 24);
pub const R_X86_64_GOTOFF64 = @as(c_int, 25);
pub const R_X86_64_GOTPC32 = @as(c_int, 26);
pub const R_X86_64_GOT64 = @as(c_int, 27);
pub const R_X86_64_GOTPCREL64 = @as(c_int, 28);
pub const R_X86_64_GOTPC64 = @as(c_int, 29);
pub const R_X86_64_GOTPLT64 = @as(c_int, 30);
pub const R_X86_64_PLTOFF64 = @as(c_int, 31);
pub const R_X86_64_SIZE32 = @as(c_int, 32);
pub const R_X86_64_SIZE64 = @as(c_int, 33);
pub const R_X86_64_GOTPC32_TLSDESC = @as(c_int, 34);
pub const R_X86_64_TLSDESC_CALL = @as(c_int, 35);
pub const R_X86_64_TLSDESC = @as(c_int, 36);
pub const R_X86_64_IRELATIVE = @as(c_int, 37);
pub const R_X86_64_RELATIVE64 = @as(c_int, 38);
pub const R_X86_64_GOTPCRELX = @as(c_int, 41);
pub const R_X86_64_REX_GOTPCRELX = @as(c_int, 42);
pub const R_X86_64_NUM = @as(c_int, 43);
pub const SHT_X86_64_UNWIND = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000001, .hexadecimal);
pub const R_MN10300_NONE = @as(c_int, 0);
pub const R_MN10300_32 = @as(c_int, 1);
pub const R_MN10300_16 = @as(c_int, 2);
pub const R_MN10300_8 = @as(c_int, 3);
pub const R_MN10300_PCREL32 = @as(c_int, 4);
pub const R_MN10300_PCREL16 = @as(c_int, 5);
pub const R_MN10300_PCREL8 = @as(c_int, 6);
pub const R_MN10300_GNU_VTINHERIT = @as(c_int, 7);
pub const R_MN10300_GNU_VTENTRY = @as(c_int, 8);
pub const R_MN10300_24 = @as(c_int, 9);
pub const R_MN10300_GOTPC32 = @as(c_int, 10);
pub const R_MN10300_GOTPC16 = @as(c_int, 11);
pub const R_MN10300_GOTOFF32 = @as(c_int, 12);
pub const R_MN10300_GOTOFF24 = @as(c_int, 13);
pub const R_MN10300_GOTOFF16 = @as(c_int, 14);
pub const R_MN10300_PLT32 = @as(c_int, 15);
pub const R_MN10300_PLT16 = @as(c_int, 16);
pub const R_MN10300_GOT32 = @as(c_int, 17);
pub const R_MN10300_GOT24 = @as(c_int, 18);
pub const R_MN10300_GOT16 = @as(c_int, 19);
pub const R_MN10300_COPY = @as(c_int, 20);
pub const R_MN10300_GLOB_DAT = @as(c_int, 21);
pub const R_MN10300_JMP_SLOT = @as(c_int, 22);
pub const R_MN10300_RELATIVE = @as(c_int, 23);
pub const R_MN10300_TLS_GD = @as(c_int, 24);
pub const R_MN10300_TLS_LD = @as(c_int, 25);
pub const R_MN10300_TLS_LDO = @as(c_int, 26);
pub const R_MN10300_TLS_GOTIE = @as(c_int, 27);
pub const R_MN10300_TLS_IE = @as(c_int, 28);
pub const R_MN10300_TLS_LE = @as(c_int, 29);
pub const R_MN10300_TLS_DTPMOD = @as(c_int, 30);
pub const R_MN10300_TLS_DTPOFF = @as(c_int, 31);
pub const R_MN10300_TLS_TPOFF = @as(c_int, 32);
pub const R_MN10300_SYM_DIFF = @as(c_int, 33);
pub const R_MN10300_ALIGN = @as(c_int, 34);
pub const R_MN10300_NUM = @as(c_int, 35);
pub const R_M32R_NONE = @as(c_int, 0);
pub const R_M32R_16 = @as(c_int, 1);
pub const R_M32R_32 = @as(c_int, 2);
pub const R_M32R_24 = @as(c_int, 3);
pub const R_M32R_10_PCREL = @as(c_int, 4);
pub const R_M32R_18_PCREL = @as(c_int, 5);
pub const R_M32R_26_PCREL = @as(c_int, 6);
pub const R_M32R_HI16_ULO = @as(c_int, 7);
pub const R_M32R_HI16_SLO = @as(c_int, 8);
pub const R_M32R_LO16 = @as(c_int, 9);
pub const R_M32R_SDA16 = @as(c_int, 10);
pub const R_M32R_GNU_VTINHERIT = @as(c_int, 11);
pub const R_M32R_GNU_VTENTRY = @as(c_int, 12);
pub const R_M32R_16_RELA = @as(c_int, 33);
pub const R_M32R_32_RELA = @as(c_int, 34);
pub const R_M32R_24_RELA = @as(c_int, 35);
pub const R_M32R_10_PCREL_RELA = @as(c_int, 36);
pub const R_M32R_18_PCREL_RELA = @as(c_int, 37);
pub const R_M32R_26_PCREL_RELA = @as(c_int, 38);
pub const R_M32R_HI16_ULO_RELA = @as(c_int, 39);
pub const R_M32R_HI16_SLO_RELA = @as(c_int, 40);
pub const R_M32R_LO16_RELA = @as(c_int, 41);
pub const R_M32R_SDA16_RELA = @as(c_int, 42);
pub const R_M32R_RELA_GNU_VTINHERIT = @as(c_int, 43);
pub const R_M32R_RELA_GNU_VTENTRY = @as(c_int, 44);
pub const R_M32R_REL32 = @as(c_int, 45);
pub const R_M32R_GOT24 = @as(c_int, 48);
pub const R_M32R_26_PLTREL = @as(c_int, 49);
pub const R_M32R_COPY = @as(c_int, 50);
pub const R_M32R_GLOB_DAT = @as(c_int, 51);
pub const R_M32R_JMP_SLOT = @as(c_int, 52);
pub const R_M32R_RELATIVE = @as(c_int, 53);
pub const R_M32R_GOTOFF = @as(c_int, 54);
pub const R_M32R_GOTPC24 = @as(c_int, 55);
pub const R_M32R_GOT16_HI_ULO = @as(c_int, 56);
pub const R_M32R_GOT16_HI_SLO = @as(c_int, 57);
pub const R_M32R_GOT16_LO = @as(c_int, 58);
pub const R_M32R_GOTPC_HI_ULO = @as(c_int, 59);
pub const R_M32R_GOTPC_HI_SLO = @as(c_int, 60);
pub const R_M32R_GOTPC_LO = @as(c_int, 61);
pub const R_M32R_GOTOFF_HI_ULO = @as(c_int, 62);
pub const R_M32R_GOTOFF_HI_SLO = @as(c_int, 63);
pub const R_M32R_GOTOFF_LO = @as(c_int, 64);
pub const R_M32R_NUM = @as(c_int, 256);
pub const R_MICROBLAZE_NONE = @as(c_int, 0);
pub const R_MICROBLAZE_32 = @as(c_int, 1);
pub const R_MICROBLAZE_32_PCREL = @as(c_int, 2);
pub const R_MICROBLAZE_64_PCREL = @as(c_int, 3);
pub const R_MICROBLAZE_32_PCREL_LO = @as(c_int, 4);
pub const R_MICROBLAZE_64 = @as(c_int, 5);
pub const R_MICROBLAZE_32_LO = @as(c_int, 6);
pub const R_MICROBLAZE_SRO32 = @as(c_int, 7);
pub const R_MICROBLAZE_SRW32 = @as(c_int, 8);
pub const R_MICROBLAZE_64_NONE = @as(c_int, 9);
pub const R_MICROBLAZE_32_SYM_OP_SYM = @as(c_int, 10);
pub const R_MICROBLAZE_GNU_VTINHERIT = @as(c_int, 11);
pub const R_MICROBLAZE_GNU_VTENTRY = @as(c_int, 12);
pub const R_MICROBLAZE_GOTPC_64 = @as(c_int, 13);
pub const R_MICROBLAZE_GOT_64 = @as(c_int, 14);
pub const R_MICROBLAZE_PLT_64 = @as(c_int, 15);
pub const R_MICROBLAZE_REL = @as(c_int, 16);
pub const R_MICROBLAZE_JUMP_SLOT = @as(c_int, 17);
pub const R_MICROBLAZE_GLOB_DAT = @as(c_int, 18);
pub const R_MICROBLAZE_GOTOFF_64 = @as(c_int, 19);
pub const R_MICROBLAZE_GOTOFF_32 = @as(c_int, 20);
pub const R_MICROBLAZE_COPY = @as(c_int, 21);
pub const R_MICROBLAZE_TLS = @as(c_int, 22);
pub const R_MICROBLAZE_TLSGD = @as(c_int, 23);
pub const R_MICROBLAZE_TLSLD = @as(c_int, 24);
pub const R_MICROBLAZE_TLSDTPMOD32 = @as(c_int, 25);
pub const R_MICROBLAZE_TLSDTPREL32 = @as(c_int, 26);
pub const R_MICROBLAZE_TLSDTPREL64 = @as(c_int, 27);
pub const R_MICROBLAZE_TLSGOTTPREL32 = @as(c_int, 28);
pub const R_MICROBLAZE_TLSTPREL32 = @as(c_int, 29);
pub const DT_NIOS2_GP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000002, .hexadecimal);
pub const R_NIOS2_NONE = @as(c_int, 0);
pub const R_NIOS2_S16 = @as(c_int, 1);
pub const R_NIOS2_U16 = @as(c_int, 2);
pub const R_NIOS2_PCREL16 = @as(c_int, 3);
pub const R_NIOS2_CALL26 = @as(c_int, 4);
pub const R_NIOS2_IMM5 = @as(c_int, 5);
pub const R_NIOS2_CACHE_OPX = @as(c_int, 6);
pub const R_NIOS2_IMM6 = @as(c_int, 7);
pub const R_NIOS2_IMM8 = @as(c_int, 8);
pub const R_NIOS2_HI16 = @as(c_int, 9);
pub const R_NIOS2_LO16 = @as(c_int, 10);
pub const R_NIOS2_HIADJ16 = @as(c_int, 11);
pub const R_NIOS2_BFD_RELOC_32 = @as(c_int, 12);
pub const R_NIOS2_BFD_RELOC_16 = @as(c_int, 13);
pub const R_NIOS2_BFD_RELOC_8 = @as(c_int, 14);
pub const R_NIOS2_GPREL = @as(c_int, 15);
pub const R_NIOS2_GNU_VTINHERIT = @as(c_int, 16);
pub const R_NIOS2_GNU_VTENTRY = @as(c_int, 17);
pub const R_NIOS2_UJMP = @as(c_int, 18);
pub const R_NIOS2_CJMP = @as(c_int, 19);
pub const R_NIOS2_CALLR = @as(c_int, 20);
pub const R_NIOS2_ALIGN = @as(c_int, 21);
pub const R_NIOS2_GOT16 = @as(c_int, 22);
pub const R_NIOS2_CALL16 = @as(c_int, 23);
pub const R_NIOS2_GOTOFF_LO = @as(c_int, 24);
pub const R_NIOS2_GOTOFF_HA = @as(c_int, 25);
pub const R_NIOS2_PCREL_LO = @as(c_int, 26);
pub const R_NIOS2_PCREL_HA = @as(c_int, 27);
pub const R_NIOS2_TLS_GD16 = @as(c_int, 28);
pub const R_NIOS2_TLS_LDM16 = @as(c_int, 29);
pub const R_NIOS2_TLS_LDO16 = @as(c_int, 30);
pub const R_NIOS2_TLS_IE16 = @as(c_int, 31);
pub const R_NIOS2_TLS_LE16 = @as(c_int, 32);
pub const R_NIOS2_TLS_DTPMOD = @as(c_int, 33);
pub const R_NIOS2_TLS_DTPREL = @as(c_int, 34);
pub const R_NIOS2_TLS_TPREL = @as(c_int, 35);
pub const R_NIOS2_COPY = @as(c_int, 36);
pub const R_NIOS2_GLOB_DAT = @as(c_int, 37);
pub const R_NIOS2_JUMP_SLOT = @as(c_int, 38);
pub const R_NIOS2_RELATIVE = @as(c_int, 39);
pub const R_NIOS2_GOTOFF = @as(c_int, 40);
pub const R_NIOS2_CALL26_NOAT = @as(c_int, 41);
pub const R_NIOS2_GOT_LO = @as(c_int, 42);
pub const R_NIOS2_GOT_HA = @as(c_int, 43);
pub const R_NIOS2_CALL_LO = @as(c_int, 44);
pub const R_NIOS2_CALL_HA = @as(c_int, 45);
pub const R_TILEPRO_NONE = @as(c_int, 0);
pub const R_TILEPRO_32 = @as(c_int, 1);
pub const R_TILEPRO_16 = @as(c_int, 2);
pub const R_TILEPRO_8 = @as(c_int, 3);
pub const R_TILEPRO_32_PCREL = @as(c_int, 4);
pub const R_TILEPRO_16_PCREL = @as(c_int, 5);
pub const R_TILEPRO_8_PCREL = @as(c_int, 6);
pub const R_TILEPRO_LO16 = @as(c_int, 7);
pub const R_TILEPRO_HI16 = @as(c_int, 8);
pub const R_TILEPRO_HA16 = @as(c_int, 9);
pub const R_TILEPRO_COPY = @as(c_int, 10);
pub const R_TILEPRO_GLOB_DAT = @as(c_int, 11);
pub const R_TILEPRO_JMP_SLOT = @as(c_int, 12);
pub const R_TILEPRO_RELATIVE = @as(c_int, 13);
pub const R_TILEPRO_BROFF_X1 = @as(c_int, 14);
pub const R_TILEPRO_JOFFLONG_X1 = @as(c_int, 15);
pub const R_TILEPRO_JOFFLONG_X1_PLT = @as(c_int, 16);
pub const R_TILEPRO_IMM8_X0 = @as(c_int, 17);
pub const R_TILEPRO_IMM8_Y0 = @as(c_int, 18);
pub const R_TILEPRO_IMM8_X1 = @as(c_int, 19);
pub const R_TILEPRO_IMM8_Y1 = @as(c_int, 20);
pub const R_TILEPRO_MT_IMM15_X1 = @as(c_int, 21);
pub const R_TILEPRO_MF_IMM15_X1 = @as(c_int, 22);
pub const R_TILEPRO_IMM16_X0 = @as(c_int, 23);
pub const R_TILEPRO_IMM16_X1 = @as(c_int, 24);
pub const R_TILEPRO_IMM16_X0_LO = @as(c_int, 25);
pub const R_TILEPRO_IMM16_X1_LO = @as(c_int, 26);
pub const R_TILEPRO_IMM16_X0_HI = @as(c_int, 27);
pub const R_TILEPRO_IMM16_X1_HI = @as(c_int, 28);
pub const R_TILEPRO_IMM16_X0_HA = @as(c_int, 29);
pub const R_TILEPRO_IMM16_X1_HA = @as(c_int, 30);
pub const R_TILEPRO_IMM16_X0_PCREL = @as(c_int, 31);
pub const R_TILEPRO_IMM16_X1_PCREL = @as(c_int, 32);
pub const R_TILEPRO_IMM16_X0_LO_PCREL = @as(c_int, 33);
pub const R_TILEPRO_IMM16_X1_LO_PCREL = @as(c_int, 34);
pub const R_TILEPRO_IMM16_X0_HI_PCREL = @as(c_int, 35);
pub const R_TILEPRO_IMM16_X1_HI_PCREL = @as(c_int, 36);
pub const R_TILEPRO_IMM16_X0_HA_PCREL = @as(c_int, 37);
pub const R_TILEPRO_IMM16_X1_HA_PCREL = @as(c_int, 38);
pub const R_TILEPRO_IMM16_X0_GOT = @as(c_int, 39);
pub const R_TILEPRO_IMM16_X1_GOT = @as(c_int, 40);
pub const R_TILEPRO_IMM16_X0_GOT_LO = @as(c_int, 41);
pub const R_TILEPRO_IMM16_X1_GOT_LO = @as(c_int, 42);
pub const R_TILEPRO_IMM16_X0_GOT_HI = @as(c_int, 43);
pub const R_TILEPRO_IMM16_X1_GOT_HI = @as(c_int, 44);
pub const R_TILEPRO_IMM16_X0_GOT_HA = @as(c_int, 45);
pub const R_TILEPRO_IMM16_X1_GOT_HA = @as(c_int, 46);
pub const R_TILEPRO_MMSTART_X0 = @as(c_int, 47);
pub const R_TILEPRO_MMEND_X0 = @as(c_int, 48);
pub const R_TILEPRO_MMSTART_X1 = @as(c_int, 49);
pub const R_TILEPRO_MMEND_X1 = @as(c_int, 50);
pub const R_TILEPRO_SHAMT_X0 = @as(c_int, 51);
pub const R_TILEPRO_SHAMT_X1 = @as(c_int, 52);
pub const R_TILEPRO_SHAMT_Y0 = @as(c_int, 53);
pub const R_TILEPRO_SHAMT_Y1 = @as(c_int, 54);
pub const R_TILEPRO_DEST_IMM8_X1 = @as(c_int, 55);
pub const R_TILEPRO_TLS_GD_CALL = @as(c_int, 60);
pub const R_TILEPRO_IMM8_X0_TLS_GD_ADD = @as(c_int, 61);
pub const R_TILEPRO_IMM8_X1_TLS_GD_ADD = @as(c_int, 62);
pub const R_TILEPRO_IMM8_Y0_TLS_GD_ADD = @as(c_int, 63);
pub const R_TILEPRO_IMM8_Y1_TLS_GD_ADD = @as(c_int, 64);
pub const R_TILEPRO_TLS_IE_LOAD = @as(c_int, 65);
pub const R_TILEPRO_IMM16_X0_TLS_GD = @as(c_int, 66);
pub const R_TILEPRO_IMM16_X1_TLS_GD = @as(c_int, 67);
pub const R_TILEPRO_IMM16_X0_TLS_GD_LO = @as(c_int, 68);
pub const R_TILEPRO_IMM16_X1_TLS_GD_LO = @as(c_int, 69);
pub const R_TILEPRO_IMM16_X0_TLS_GD_HI = @as(c_int, 70);
pub const R_TILEPRO_IMM16_X1_TLS_GD_HI = @as(c_int, 71);
pub const R_TILEPRO_IMM16_X0_TLS_GD_HA = @as(c_int, 72);
pub const R_TILEPRO_IMM16_X1_TLS_GD_HA = @as(c_int, 73);
pub const R_TILEPRO_IMM16_X0_TLS_IE = @as(c_int, 74);
pub const R_TILEPRO_IMM16_X1_TLS_IE = @as(c_int, 75);
pub const R_TILEPRO_IMM16_X0_TLS_IE_LO = @as(c_int, 76);
pub const R_TILEPRO_IMM16_X1_TLS_IE_LO = @as(c_int, 77);
pub const R_TILEPRO_IMM16_X0_TLS_IE_HI = @as(c_int, 78);
pub const R_TILEPRO_IMM16_X1_TLS_IE_HI = @as(c_int, 79);
pub const R_TILEPRO_IMM16_X0_TLS_IE_HA = @as(c_int, 80);
pub const R_TILEPRO_IMM16_X1_TLS_IE_HA = @as(c_int, 81);
pub const R_TILEPRO_TLS_DTPMOD32 = @as(c_int, 82);
pub const R_TILEPRO_TLS_DTPOFF32 = @as(c_int, 83);
pub const R_TILEPRO_TLS_TPOFF32 = @as(c_int, 84);
pub const R_TILEPRO_IMM16_X0_TLS_LE = @as(c_int, 85);
pub const R_TILEPRO_IMM16_X1_TLS_LE = @as(c_int, 86);
pub const R_TILEPRO_IMM16_X0_TLS_LE_LO = @as(c_int, 87);
pub const R_TILEPRO_IMM16_X1_TLS_LE_LO = @as(c_int, 88);
pub const R_TILEPRO_IMM16_X0_TLS_LE_HI = @as(c_int, 89);
pub const R_TILEPRO_IMM16_X1_TLS_LE_HI = @as(c_int, 90);
pub const R_TILEPRO_IMM16_X0_TLS_LE_HA = @as(c_int, 91);
pub const R_TILEPRO_IMM16_X1_TLS_LE_HA = @as(c_int, 92);
pub const R_TILEPRO_GNU_VTINHERIT = @as(c_int, 128);
pub const R_TILEPRO_GNU_VTENTRY = @as(c_int, 129);
pub const R_TILEPRO_NUM = @as(c_int, 130);
pub const R_TILEGX_NONE = @as(c_int, 0);
pub const R_TILEGX_64 = @as(c_int, 1);
pub const R_TILEGX_32 = @as(c_int, 2);
pub const R_TILEGX_16 = @as(c_int, 3);
pub const R_TILEGX_8 = @as(c_int, 4);
pub const R_TILEGX_64_PCREL = @as(c_int, 5);
pub const R_TILEGX_32_PCREL = @as(c_int, 6);
pub const R_TILEGX_16_PCREL = @as(c_int, 7);
pub const R_TILEGX_8_PCREL = @as(c_int, 8);
pub const R_TILEGX_HW0 = @as(c_int, 9);
pub const R_TILEGX_HW1 = @as(c_int, 10);
pub const R_TILEGX_HW2 = @as(c_int, 11);
pub const R_TILEGX_HW3 = @as(c_int, 12);
pub const R_TILEGX_HW0_LAST = @as(c_int, 13);
pub const R_TILEGX_HW1_LAST = @as(c_int, 14);
pub const R_TILEGX_HW2_LAST = @as(c_int, 15);
pub const R_TILEGX_COPY = @as(c_int, 16);
pub const R_TILEGX_GLOB_DAT = @as(c_int, 17);
pub const R_TILEGX_JMP_SLOT = @as(c_int, 18);
pub const R_TILEGX_RELATIVE = @as(c_int, 19);
pub const R_TILEGX_BROFF_X1 = @as(c_int, 20);
pub const R_TILEGX_JUMPOFF_X1 = @as(c_int, 21);
pub const R_TILEGX_JUMPOFF_X1_PLT = @as(c_int, 22);
pub const R_TILEGX_IMM8_X0 = @as(c_int, 23);
pub const R_TILEGX_IMM8_Y0 = @as(c_int, 24);
pub const R_TILEGX_IMM8_X1 = @as(c_int, 25);
pub const R_TILEGX_IMM8_Y1 = @as(c_int, 26);
pub const R_TILEGX_DEST_IMM8_X1 = @as(c_int, 27);
pub const R_TILEGX_MT_IMM14_X1 = @as(c_int, 28);
pub const R_TILEGX_MF_IMM14_X1 = @as(c_int, 29);
pub const R_TILEGX_MMSTART_X0 = @as(c_int, 30);
pub const R_TILEGX_MMEND_X0 = @as(c_int, 31);
pub const R_TILEGX_SHAMT_X0 = @as(c_int, 32);
pub const R_TILEGX_SHAMT_X1 = @as(c_int, 33);
pub const R_TILEGX_SHAMT_Y0 = @as(c_int, 34);
pub const R_TILEGX_SHAMT_Y1 = @as(c_int, 35);
pub const R_TILEGX_IMM16_X0_HW0 = @as(c_int, 36);
pub const R_TILEGX_IMM16_X1_HW0 = @as(c_int, 37);
pub const R_TILEGX_IMM16_X0_HW1 = @as(c_int, 38);
pub const R_TILEGX_IMM16_X1_HW1 = @as(c_int, 39);
pub const R_TILEGX_IMM16_X0_HW2 = @as(c_int, 40);
pub const R_TILEGX_IMM16_X1_HW2 = @as(c_int, 41);
pub const R_TILEGX_IMM16_X0_HW3 = @as(c_int, 42);
pub const R_TILEGX_IMM16_X1_HW3 = @as(c_int, 43);
pub const R_TILEGX_IMM16_X0_HW0_LAST = @as(c_int, 44);
pub const R_TILEGX_IMM16_X1_HW0_LAST = @as(c_int, 45);
pub const R_TILEGX_IMM16_X0_HW1_LAST = @as(c_int, 46);
pub const R_TILEGX_IMM16_X1_HW1_LAST = @as(c_int, 47);
pub const R_TILEGX_IMM16_X0_HW2_LAST = @as(c_int, 48);
pub const R_TILEGX_IMM16_X1_HW2_LAST = @as(c_int, 49);
pub const R_TILEGX_IMM16_X0_HW0_PCREL = @as(c_int, 50);
pub const R_TILEGX_IMM16_X1_HW0_PCREL = @as(c_int, 51);
pub const R_TILEGX_IMM16_X0_HW1_PCREL = @as(c_int, 52);
pub const R_TILEGX_IMM16_X1_HW1_PCREL = @as(c_int, 53);
pub const R_TILEGX_IMM16_X0_HW2_PCREL = @as(c_int, 54);
pub const R_TILEGX_IMM16_X1_HW2_PCREL = @as(c_int, 55);
pub const R_TILEGX_IMM16_X0_HW3_PCREL = @as(c_int, 56);
pub const R_TILEGX_IMM16_X1_HW3_PCREL = @as(c_int, 57);
pub const R_TILEGX_IMM16_X0_HW0_LAST_PCREL = @as(c_int, 58);
pub const R_TILEGX_IMM16_X1_HW0_LAST_PCREL = @as(c_int, 59);
pub const R_TILEGX_IMM16_X0_HW1_LAST_PCREL = @as(c_int, 60);
pub const R_TILEGX_IMM16_X1_HW1_LAST_PCREL = @as(c_int, 61);
pub const R_TILEGX_IMM16_X0_HW2_LAST_PCREL = @as(c_int, 62);
pub const R_TILEGX_IMM16_X1_HW2_LAST_PCREL = @as(c_int, 63);
pub const R_TILEGX_IMM16_X0_HW0_GOT = @as(c_int, 64);
pub const R_TILEGX_IMM16_X1_HW0_GOT = @as(c_int, 65);
pub const R_TILEGX_IMM16_X0_HW0_PLT_PCREL = @as(c_int, 66);
pub const R_TILEGX_IMM16_X1_HW0_PLT_PCREL = @as(c_int, 67);
pub const R_TILEGX_IMM16_X0_HW1_PLT_PCREL = @as(c_int, 68);
pub const R_TILEGX_IMM16_X1_HW1_PLT_PCREL = @as(c_int, 69);
pub const R_TILEGX_IMM16_X0_HW2_PLT_PCREL = @as(c_int, 70);
pub const R_TILEGX_IMM16_X1_HW2_PLT_PCREL = @as(c_int, 71);
pub const R_TILEGX_IMM16_X0_HW0_LAST_GOT = @as(c_int, 72);
pub const R_TILEGX_IMM16_X1_HW0_LAST_GOT = @as(c_int, 73);
pub const R_TILEGX_IMM16_X0_HW1_LAST_GOT = @as(c_int, 74);
pub const R_TILEGX_IMM16_X1_HW1_LAST_GOT = @as(c_int, 75);
pub const R_TILEGX_IMM16_X0_HW3_PLT_PCREL = @as(c_int, 76);
pub const R_TILEGX_IMM16_X1_HW3_PLT_PCREL = @as(c_int, 77);
pub const R_TILEGX_IMM16_X0_HW0_TLS_GD = @as(c_int, 78);
pub const R_TILEGX_IMM16_X1_HW0_TLS_GD = @as(c_int, 79);
pub const R_TILEGX_IMM16_X0_HW0_TLS_LE = @as(c_int, 80);
pub const R_TILEGX_IMM16_X1_HW0_TLS_LE = @as(c_int, 81);
pub const R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE = @as(c_int, 82);
pub const R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE = @as(c_int, 83);
pub const R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE = @as(c_int, 84);
pub const R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE = @as(c_int, 85);
pub const R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD = @as(c_int, 86);
pub const R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD = @as(c_int, 87);
pub const R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD = @as(c_int, 88);
pub const R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD = @as(c_int, 89);
pub const R_TILEGX_IMM16_X0_HW0_TLS_IE = @as(c_int, 92);
pub const R_TILEGX_IMM16_X1_HW0_TLS_IE = @as(c_int, 93);
pub const R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL = @as(c_int, 94);
pub const R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL = @as(c_int, 95);
pub const R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL = @as(c_int, 96);
pub const R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL = @as(c_int, 97);
pub const R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL = @as(c_int, 98);
pub const R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL = @as(c_int, 99);
pub const R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE = @as(c_int, 100);
pub const R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE = @as(c_int, 101);
pub const R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE = @as(c_int, 102);
pub const R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE = @as(c_int, 103);
pub const R_TILEGX_TLS_DTPMOD64 = @as(c_int, 106);
pub const R_TILEGX_TLS_DTPOFF64 = @as(c_int, 107);
pub const R_TILEGX_TLS_TPOFF64 = @as(c_int, 108);
pub const R_TILEGX_TLS_DTPMOD32 = @as(c_int, 109);
pub const R_TILEGX_TLS_DTPOFF32 = @as(c_int, 110);
pub const R_TILEGX_TLS_TPOFF32 = @as(c_int, 111);
pub const R_TILEGX_TLS_GD_CALL = @as(c_int, 112);
pub const R_TILEGX_IMM8_X0_TLS_GD_ADD = @as(c_int, 113);
pub const R_TILEGX_IMM8_X1_TLS_GD_ADD = @as(c_int, 114);
pub const R_TILEGX_IMM8_Y0_TLS_GD_ADD = @as(c_int, 115);
pub const R_TILEGX_IMM8_Y1_TLS_GD_ADD = @as(c_int, 116);
pub const R_TILEGX_TLS_IE_LOAD = @as(c_int, 117);
pub const R_TILEGX_IMM8_X0_TLS_ADD = @as(c_int, 118);
pub const R_TILEGX_IMM8_X1_TLS_ADD = @as(c_int, 119);
pub const R_TILEGX_IMM8_Y0_TLS_ADD = @as(c_int, 120);
pub const R_TILEGX_IMM8_Y1_TLS_ADD = @as(c_int, 121);
pub const R_TILEGX_GNU_VTINHERIT = @as(c_int, 128);
pub const R_TILEGX_GNU_VTENTRY = @as(c_int, 129);
pub const R_TILEGX_NUM = @as(c_int, 130);
pub const EF_RISCV_RVC = @as(c_int, 0x0001);
pub const EF_RISCV_FLOAT_ABI = @as(c_int, 0x0006);
pub const EF_RISCV_FLOAT_ABI_SOFT = @as(c_int, 0x0000);
pub const EF_RISCV_FLOAT_ABI_SINGLE = @as(c_int, 0x0002);
pub const EF_RISCV_FLOAT_ABI_DOUBLE = @as(c_int, 0x0004);
pub const EF_RISCV_FLOAT_ABI_QUAD = @as(c_int, 0x0006);
pub const R_RISCV_NONE = @as(c_int, 0);
pub const R_RISCV_32 = @as(c_int, 1);
pub const R_RISCV_64 = @as(c_int, 2);
pub const R_RISCV_RELATIVE = @as(c_int, 3);
pub const R_RISCV_COPY = @as(c_int, 4);
pub const R_RISCV_JUMP_SLOT = @as(c_int, 5);
pub const R_RISCV_TLS_DTPMOD32 = @as(c_int, 6);
pub const R_RISCV_TLS_DTPMOD64 = @as(c_int, 7);
pub const R_RISCV_TLS_DTPREL32 = @as(c_int, 8);
pub const R_RISCV_TLS_DTPREL64 = @as(c_int, 9);
pub const R_RISCV_TLS_TPREL32 = @as(c_int, 10);
pub const R_RISCV_TLS_TPREL64 = @as(c_int, 11);
pub const R_RISCV_BRANCH = @as(c_int, 16);
pub const R_RISCV_JAL = @as(c_int, 17);
pub const R_RISCV_CALL = @as(c_int, 18);
pub const R_RISCV_CALL_PLT = @as(c_int, 19);
pub const R_RISCV_GOT_HI20 = @as(c_int, 20);
pub const R_RISCV_TLS_GOT_HI20 = @as(c_int, 21);
pub const R_RISCV_TLS_GD_HI20 = @as(c_int, 22);
pub const R_RISCV_PCREL_HI20 = @as(c_int, 23);
pub const R_RISCV_PCREL_LO12_I = @as(c_int, 24);
pub const R_RISCV_PCREL_LO12_S = @as(c_int, 25);
pub const R_RISCV_HI20 = @as(c_int, 26);
pub const R_RISCV_LO12_I = @as(c_int, 27);
pub const R_RISCV_LO12_S = @as(c_int, 28);
pub const R_RISCV_TPREL_HI20 = @as(c_int, 29);
pub const R_RISCV_TPREL_LO12_I = @as(c_int, 30);
pub const R_RISCV_TPREL_LO12_S = @as(c_int, 31);
pub const R_RISCV_TPREL_ADD = @as(c_int, 32);
pub const R_RISCV_ADD8 = @as(c_int, 33);
pub const R_RISCV_ADD16 = @as(c_int, 34);
pub const R_RISCV_ADD32 = @as(c_int, 35);
pub const R_RISCV_ADD64 = @as(c_int, 36);
pub const R_RISCV_SUB8 = @as(c_int, 37);
pub const R_RISCV_SUB16 = @as(c_int, 38);
pub const R_RISCV_SUB32 = @as(c_int, 39);
pub const R_RISCV_SUB64 = @as(c_int, 40);
pub const R_RISCV_GNU_VTINHERIT = @as(c_int, 41);
pub const R_RISCV_GNU_VTENTRY = @as(c_int, 42);
pub const R_RISCV_ALIGN = @as(c_int, 43);
pub const R_RISCV_RVC_BRANCH = @as(c_int, 44);
pub const R_RISCV_RVC_JUMP = @as(c_int, 45);
pub const R_RISCV_RVC_LUI = @as(c_int, 46);
pub const R_RISCV_GPREL_I = @as(c_int, 47);
pub const R_RISCV_GPREL_S = @as(c_int, 48);
pub const R_RISCV_TPREL_I = @as(c_int, 49);
pub const R_RISCV_TPREL_S = @as(c_int, 50);
pub const R_RISCV_RELAX = @as(c_int, 51);
pub const R_RISCV_SUB6 = @as(c_int, 52);
pub const R_RISCV_SET6 = @as(c_int, 53);
pub const R_RISCV_SET8 = @as(c_int, 54);
pub const R_RISCV_SET16 = @as(c_int, 55);
pub const R_RISCV_SET32 = @as(c_int, 56);
pub const R_RISCV_32_PCREL = @as(c_int, 57);
pub const R_RISCV_IRELATIVE = @as(c_int, 58);
pub const R_RISCV_NUM = @as(c_int, 59);
pub const R_BPF_NONE = @as(c_int, 0);
pub const R_BPF_64_64 = @as(c_int, 1);
pub const R_BPF_64_32 = @as(c_int, 10);
pub const R_METAG_HIADDR16 = @as(c_int, 0);
pub const R_METAG_LOADDR16 = @as(c_int, 1);
pub const R_METAG_ADDR32 = @as(c_int, 2);
pub const R_METAG_NONE = @as(c_int, 3);
pub const R_METAG_RELBRANCH = @as(c_int, 4);
pub const R_METAG_GETSETOFF = @as(c_int, 5);
pub const R_METAG_REG32OP1 = @as(c_int, 6);
pub const R_METAG_REG32OP2 = @as(c_int, 7);
pub const R_METAG_REG32OP3 = @as(c_int, 8);
pub const R_METAG_REG16OP1 = @as(c_int, 9);
pub const R_METAG_REG16OP2 = @as(c_int, 10);
pub const R_METAG_REG16OP3 = @as(c_int, 11);
pub const R_METAG_REG32OP4 = @as(c_int, 12);
pub const R_METAG_HIOG = @as(c_int, 13);
pub const R_METAG_LOOG = @as(c_int, 14);
pub const R_METAG_REL8 = @as(c_int, 15);
pub const R_METAG_REL16 = @as(c_int, 16);
pub const R_METAG_GNU_VTINHERIT = @as(c_int, 30);
pub const R_METAG_GNU_VTENTRY = @as(c_int, 31);
pub const R_METAG_HI16_GOTOFF = @as(c_int, 32);
pub const R_METAG_LO16_GOTOFF = @as(c_int, 33);
pub const R_METAG_GETSET_GOTOFF = @as(c_int, 34);
pub const R_METAG_GETSET_GOT = @as(c_int, 35);
pub const R_METAG_HI16_GOTPC = @as(c_int, 36);
pub const R_METAG_LO16_GOTPC = @as(c_int, 37);
pub const R_METAG_HI16_PLT = @as(c_int, 38);
pub const R_METAG_LO16_PLT = @as(c_int, 39);
pub const R_METAG_RELBRANCH_PLT = @as(c_int, 40);
pub const R_METAG_GOTOFF = @as(c_int, 41);
pub const R_METAG_PLT = @as(c_int, 42);
pub const R_METAG_COPY = @as(c_int, 43);
pub const R_METAG_JMP_SLOT = @as(c_int, 44);
pub const R_METAG_RELATIVE = @as(c_int, 45);
pub const R_METAG_GLOB_DAT = @as(c_int, 46);
pub const R_METAG_TLS_GD = @as(c_int, 47);
pub const R_METAG_TLS_LDM = @as(c_int, 48);
pub const R_METAG_TLS_LDO_HI16 = @as(c_int, 49);
pub const R_METAG_TLS_LDO_LO16 = @as(c_int, 50);
pub const R_METAG_TLS_LDO = @as(c_int, 51);
pub const R_METAG_TLS_IE = @as(c_int, 52);
pub const R_METAG_TLS_IENONPIC = @as(c_int, 53);
pub const R_METAG_TLS_IENONPIC_HI16 = @as(c_int, 54);
pub const R_METAG_TLS_IENONPIC_LO16 = @as(c_int, 55);
pub const R_METAG_TLS_TPOFF = @as(c_int, 56);
pub const R_METAG_TLS_DTPMOD = @as(c_int, 57);
pub const R_METAG_TLS_DTPOFF = @as(c_int, 58);
pub const R_METAG_TLS_LE = @as(c_int, 59);
pub const R_METAG_TLS_LE_HI16 = @as(c_int, 60);
pub const R_METAG_TLS_LE_LO16 = @as(c_int, 61);
pub const R_NDS32_NONE = @as(c_int, 0);
pub const R_NDS32_32_RELA = @as(c_int, 20);
pub const R_NDS32_COPY = @as(c_int, 39);
pub const R_NDS32_GLOB_DAT = @as(c_int, 40);
pub const R_NDS32_JMP_SLOT = @as(c_int, 41);
pub const R_NDS32_RELATIVE = @as(c_int, 42);
pub const R_NDS32_TLS_TPOFF = @as(c_int, 102);
pub const R_NDS32_TLS_DESC = @as(c_int, 119);
pub const R_ARC_NONE = @as(c_int, 0x0);
pub const R_ARC_8 = @as(c_int, 0x1);
pub const R_ARC_16 = @as(c_int, 0x2);
pub const R_ARC_24 = @as(c_int, 0x3);
pub const R_ARC_32 = @as(c_int, 0x4);
pub const R_ARC_B26 = @as(c_int, 0x5);
pub const R_ARC_B22_PCREL = @as(c_int, 0x6);
pub const R_ARC_H30 = @as(c_int, 0x7);
pub const R_ARC_N8 = @as(c_int, 0x8);
pub const R_ARC_N16 = @as(c_int, 0x9);
pub const R_ARC_N24 = @as(c_int, 0xA);
pub const R_ARC_N32 = @as(c_int, 0xB);
pub const R_ARC_SDA = @as(c_int, 0xC);
pub const R_ARC_SECTOFF = @as(c_int, 0xD);
pub const R_ARC_S21H_PCREL = @as(c_int, 0xE);
pub const R_ARC_S21W_PCREL = @as(c_int, 0xF);
pub const R_ARC_S25H_PCREL = @as(c_int, 0x10);
pub const R_ARC_S25W_PCREL = @as(c_int, 0x11);
pub const R_ARC_SDA32 = @as(c_int, 0x12);
pub const R_ARC_SDA_LDST = @as(c_int, 0x13);
pub const R_ARC_SDA_LDST1 = @as(c_int, 0x14);
pub const R_ARC_SDA_LDST2 = @as(c_int, 0x15);
pub const R_ARC_SDA16_LD = @as(c_int, 0x16);
pub const R_ARC_SDA16_LD1 = @as(c_int, 0x17);
pub const R_ARC_SDA16_LD2 = @as(c_int, 0x18);
pub const R_ARC_S13_PCREL = @as(c_int, 0x19);
pub const R_ARC_W = @as(c_int, 0x1A);
pub const R_ARC_32_ME = @as(c_int, 0x1B);
pub const R_ARC_N32_ME = @as(c_int, 0x1C);
pub const R_ARC_SECTOFF_ME = @as(c_int, 0x1D);
pub const R_ARC_SDA32_ME = @as(c_int, 0x1E);
pub const R_ARC_W_ME = @as(c_int, 0x1F);
pub const R_ARC_H30_ME = @as(c_int, 0x20);
pub const R_ARC_SECTOFF_U8 = @as(c_int, 0x21);
pub const R_ARC_SECTOFF_S9 = @as(c_int, 0x22);
pub const R_AC_SECTOFF_U8 = @as(c_int, 0x23);
pub const R_AC_SECTOFF_U8_1 = @as(c_int, 0x24);
pub const R_AC_SECTOFF_U8_2 = @as(c_int, 0x25);
pub const R_AC_SECTOFF_S9 = @as(c_int, 0x26);
pub const R_AC_SECTOFF_S9_1 = @as(c_int, 0x27);
pub const R_AC_SECTOFF_S9_2 = @as(c_int, 0x28);
pub const R_ARC_SECTOFF_ME_1 = @as(c_int, 0x29);
pub const R_ARC_SECTOFF_ME_2 = @as(c_int, 0x2A);
pub const R_ARC_SECTOFF_1 = @as(c_int, 0x2B);
pub const R_ARC_SECTOFF_2 = @as(c_int, 0x2C);
pub const R_ARC_PC32 = @as(c_int, 0x32);
pub const R_ARC_GOTPC32 = @as(c_int, 0x33);
pub const R_ARC_PLT32 = @as(c_int, 0x34);
pub const R_ARC_COPY = @as(c_int, 0x35);
pub const R_ARC_GLOB_DAT = @as(c_int, 0x36);
pub const R_ARC_JUMP_SLOT = @as(c_int, 0x37);
pub const R_ARC_RELATIVE = @as(c_int, 0x38);
pub const R_ARC_GOTOFF = @as(c_int, 0x39);
pub const R_ARC_GOTPC = @as(c_int, 0x3A);
pub const R_ARC_GOT32 = @as(c_int, 0x3B);
pub const R_ARC_TLS_DTPMOD = @as(c_int, 0x42);
pub const R_ARC_TLS_DTPOFF = @as(c_int, 0x43);
pub const R_ARC_TLS_TPOFF = @as(c_int, 0x44);
pub const R_ARC_TLS_GD_GOT = @as(c_int, 0x45);
pub const R_ARC_TLS_GD_LD = @as(c_int, 0x46);
pub const R_ARC_TLS_GD_CALL = @as(c_int, 0x47);
pub const R_ARC_TLS_IE_GOT = @as(c_int, 0x48);
pub const R_ARC_TLS_DTPOFF_S9 = @as(c_int, 0x4a);
pub const R_ARC_TLS_LE_S9 = @as(c_int, 0x4a);
pub const R_ARC_TLS_LE_32 = @as(c_int, 0x4b);
